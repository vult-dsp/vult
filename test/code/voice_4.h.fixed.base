/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef VOICE_4_H
#define VOICE_4_H

#include "vultin.h"
#include "voice_4.tables.h"

typedef struct Util_edge_type {
   bool pre;
} Util_edge_type;

typedef struct Util_change_type {
   fix16_t pre_x;
} Util_change_type;

typedef struct Util_dcblock_type {
   fix16_t x1;
   fix16_t y1;
} Util_dcblock_type;

typedef struct Util_smooth_type {
   fix16_t x;
} Util_smooth_type;

typedef struct Util_average2_type {
   fix16_t x0;
} Util_average2_type;

typedef struct Tricore_process_type {
   bool direction;
   Util_change_type inst_1b03c;
   Util_edge_type inst_2043c;
   Util_edge_type inst_3043c;
   fix16_t phase;
   fix16_t rate;
   fix16_t reset_phase;
   bool reset_state;
} Tricore_process_type;

typedef struct Tricore_process_type Tricore_noteOn_type;

typedef struct Tricore_process_type Tricore_noteOff_type;

typedef struct Tricore_process_type Tricore_controlChange_type;

typedef struct Tricore_process_type Tricore_default_type;

typedef struct Svf_process_type {
   fix16_t g;
   Util_change_type inst_1b0a2;
   Util_change_type inst_2b0a2;
   fix16_t inv_den;
   fix16_t r;
   fix16_t z1;
   fix16_t z2;
} Svf_process_type;

typedef struct Svf_process_type Svf_noteOn_type;

typedef struct Svf_process_type Svf_noteOff_type;

typedef struct Svf_process_type Svf_controlChange_type;

typedef struct Svf_process_type Svf_default_type;

typedef struct Lfo_soft_type {
   fix16_t x2;
   fix16_t x3;
   fix16_t x4;
} Lfo_soft_type;

typedef struct Lfo_process_type {
   Util_change_type inst_1b0d6;
   Util_edge_type inst_204d6;
   Lfo_soft_type inst_337d6;
   fix16_t phase;
   fix16_t rate;
} Lfo_process_type;

typedef struct Lfo_process_type Lfo_noteOn_type;

typedef struct Lfo_process_type Lfo_noteOff_type;

typedef struct Lfo_process_type Lfo_controlChange_type;

typedef struct Lfo_process_type Lfo_default_type;

typedef struct Phase_process_type {
   Util_change_type inst_1b08a;
   Util_edge_type inst_2048a;
   fix16_t phase;
   fix16_t rate;
} Phase_process_type;

typedef struct Phase_process_type Phase_noteOn_type;

typedef struct Phase_process_type Phase_noteOff_type;

typedef struct Phase_process_type Phase_controlChange_type;

typedef struct Phase_process_type Phase_default_type;

typedef struct Blit_pulse_train_type {
   Util_change_type inst_1b05e;
   int32_t m;
   fix16_t scale;
} Blit_pulse_train_type;

typedef struct Blit_pulse_train_type Blit_pulse_start_type;

typedef struct Blit_osc_blit_type {
   Util_change_type inst_1b026;
   Phase_process_type inst_28a26;
   Blit_pulse_train_type inst_35e26;
   Blit_pulse_train_type inst_45e26;
   Util_dcblock_type inst_56426;
   fix16_t output;
   fix16_t rate;
   fix16_t state_pulse;
   fix16_t state_saw;
} Blit_osc_blit_type;

typedef struct Blit_osc_blit_type Blit_init_type;

typedef struct Blit_process_type {
   Blit_osc_blit_type inst_1268b;
} Blit_process_type;

typedef struct Blit_process_type Blit_noteOn_type;

typedef struct Blit_process_type Blit_noteOff_type;

typedef struct Blit_process_type Blit_controlChange_type;

typedef struct Blit_process_type Blit_default_type;

typedef struct Adsr_do_type {
   Util_edge_type inst_104a0;
   Util_smooth_type inst_295a0;
   fix16_t out;
   fix16_t rate;
   fix16_t scale;
   int32_t state;
   fix16_t target;
} Adsr_do_type;

typedef struct Adsr_process_type {
   Adsr_do_type inst_1a025;
   fix16_t knob1;
   fix16_t knob2;
   fix16_t knob3;
   fix16_t knob4;
} Adsr_process_type;

typedef struct Adsr_process_type Adsr_noteOn_type;

typedef struct Adsr_process_type Adsr_noteOff_type;

typedef struct Adsr_process_type Adsr_controlChange_type;

typedef struct Adsr_process_type Adsr_default_type;

typedef struct Voice_4_process_type {
   fix16_t attack;
   fix16_t decay;
   fix16_t flt_cut;
   fix16_t flt_res;
   int32_t flt_shape;
   Lfo_process_type inst_1d695;
   Blit_process_type inst_28b95;
   Blit_process_type inst_38b95;
   Blit_process_type inst_48b95;
   Tricore_process_type inst_53c95;
   Svf_process_type inst_6a295;
   Adsr_do_type inst_7a095;
   fix16_t level1;
   fix16_t level2;
   fix16_t level3;
   fix16_t level4;
   fix16_t lfo_cv;
   fix16_t lfo_flt;
   fix16_t lfo_pw;
   fix16_t lfo_rate;
   fix16_t lfo_reset;
   fix16_t lfo_shape;
   fix16_t pw1;
   fix16_t pw2;
   fix16_t pw3;
   fix16_t pw4;
   fix16_t release;
   fix16_t sustain;
} Voice_4_process_type;

typedef struct Voice_4_process_type Voice_4_noteOn_type;

typedef struct Voice_4_process_type Voice_4_noteOff_type;

typedef struct Voice_4_process_type Voice_4_controlChange_type;

typedef struct Voice_4_process_type Voice_4_default_type;

static_inline void Util_edge_type_init(Util_edge_type& _ctx) {
   _ctx.pre = false;
}

static_inline void Util_change_type_init(Util_change_type& _ctx) {
   _ctx.pre_x = 0x0 /* 0.000000 */;
}

static_inline void Util_dcblock_type_init(Util_dcblock_type& _ctx) {
   _ctx.x1 = 0x0 /* 0.000000 */;
   _ctx.y1 = 0x0 /* 0.000000 */;
}

static_inline void Util_smooth_type_init(Util_smooth_type& _ctx) {
   _ctx.x = 0x0 /* 0.000000 */;
}

static_inline void Util_average2_type_init(Util_average2_type& _ctx) {
   _ctx.x0 = 0x0 /* 0.000000 */;
}

static_inline fix16_t Util_cvToPitch(fix16_t cv) {
   return 0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */, cv);
}

static_inline fix16_t Util_pitchToRate_1024_raw_c0(int32_t index) {
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024_raw_c1(int32_t index) {
   return Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024_raw_c2(int32_t index) {
   return Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024(fix16_t pitch) {
   int32_t index = int_clip(fix_to_int(fix_mul(pitch, 15996)), 0, 31);
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(pitch, (Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)], pitch)));
}

static_inline fix16_t Util_cvToRate_1024_raw_c0(int32_t index) {
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024_raw_c1(int32_t index) {
   return Util_cvToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024_raw_c2(int32_t index) {
   return Util_cvToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 2257351)), 0, 31);
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToRate_1024_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_1024_c2[static_cast<uint32_t>(index)], cv)));
}

static_inline void Tricore_default(Tricore_process_type& _ctx) {
   _ctx.rate = Util_cvToRate_1024(0x0 /* 0.000000 */);
}

void Tricore_process_type_init(Tricore_process_type& _ctx);

static_inline void Tricore_noteOn_type_init(Tricore_noteOn_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Tricore_noteOff_type_init(Tricore_noteOff_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Tricore_controlChange_type_init(Tricore_controlChange_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Tricore_default_type_init(Tricore_default_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline fix16_t Svf_calc_g_raw_c0(int32_t index) {
   return Svf_calc_g_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Svf_calc_g_raw_c1(int32_t index) {
   return Svf_calc_g_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Svf_calc_g_raw_c2(int32_t index) {
   return Svf_calc_g_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Svf_calc_g(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 9247857)), 0, 127);
   return Svf_calc_g_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Svf_calc_g_c1[static_cast<uint32_t>(index)] + fix_mul(Svf_calc_g_c2[static_cast<uint32_t>(index)], cv)));
}

static_inline void Svf_default(Svf_process_type& _ctx) {
   _ctx.g = Svf_calc_g(0x0 /* 0.000000 */);
   _ctx.r = 0x10000 /* 1.000000 */;
   _ctx.inv_den = fix_div(0x10000 /* 1.000000 */, (0x10000 /* 1.000000 */ + fix_mul(0x0 /* 0.000000 */, _ctx.g) + fix_mul(_ctx.g, _ctx.g)));
}

void Svf_process_type_init(Svf_process_type& _ctx);

static_inline void Svf_noteOn_type_init(Svf_noteOn_type& _ctx) {
   Svf_process_type_init(_ctx);
}

static_inline void Svf_noteOff_type_init(Svf_noteOff_type& _ctx) {
   Svf_process_type_init(_ctx);
}

static_inline void Svf_controlChange_type_init(Svf_controlChange_type& _ctx) {
   Svf_process_type_init(_ctx);
}

static_inline void Svf_default_type_init(Svf_default_type& _ctx) {
   Svf_process_type_init(_ctx);
}

static_inline void Lfo_soft_type_init(Lfo_soft_type& _ctx) {
   _ctx.x2 = 0x0 /* 0.000000 */;
   _ctx.x3 = 0x0 /* 0.000000 */;
   _ctx.x4 = 0x0 /* 0.000000 */;
}

void Lfo_process_type_init(Lfo_process_type& _ctx);

static_inline void Lfo_noteOn_type_init(Lfo_noteOn_type& _ctx) {
   Lfo_process_type_init(_ctx);
}

static_inline void Lfo_noteOff_type_init(Lfo_noteOff_type& _ctx) {
   Lfo_process_type_init(_ctx);
}

static_inline void Lfo_controlChange_type_init(Lfo_controlChange_type& _ctx) {
   Lfo_process_type_init(_ctx);
}

static_inline void Lfo_default_type_init(Lfo_default_type& _ctx) {
   Lfo_process_type_init(_ctx);
}

static_inline void Phase_default(Phase_process_type& _ctx) {
   _ctx.rate = Util_cvToRate_1024(0x0 /* 0.000000 */);
}

void Phase_process_type_init(Phase_process_type& _ctx);

static_inline void Phase_noteOn_type_init(Phase_noteOn_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline void Phase_noteOff_type_init(Phase_noteOff_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline void Phase_controlChange_type_init(Phase_controlChange_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline void Phase_default_type_init(Phase_default_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline fix16_t Util_cvToperiod_raw_c0(int32_t index) {
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod_raw_c1(int32_t index) {
   return Util_cvToperiod_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod_raw_c2(int32_t index) {
   return Util_cvToperiod_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 2031616)), 0, 31);
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToperiod_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToperiod_c2[static_cast<uint32_t>(index)], cv)));
}

static_inline void Blit_pulse_start(Blit_pulse_train_type& _ctx) {
   _ctx.m = 1 + 2 * int(Util_cvToperiod(0x0 /* 0.000000 */));
   _ctx.scale = 0x10000 /* 1.000000 */ + fix_mul(0x20000 /* 2.000000 */, Util_cvToperiod(0x0 /* 0.000000 */));
}

static_inline void Blit_pulse_train_type_init(Blit_pulse_train_type& _ctx) {
   Util_change_type_init(_ctx.inst_1b05e);
   _ctx.m = 0;
   _ctx.scale = 0x0 /* 0.000000 */;
   Blit_pulse_start(_ctx);
}

static_inline void Blit_pulse_start_type_init(Blit_pulse_start_type& _ctx) {
   Blit_pulse_train_type_init(_ctx);
}

static_inline fix16_t Util_pitchToRate_raw_c0(int32_t index) {
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_raw_c1(int32_t index) {
   return Util_pitchToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_raw_c2(int32_t index) {
   return Util_pitchToRate_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate(fix16_t pitch) {
   int32_t index = int_clip(fix_to_int(fix_mul(pitch, 15996)), 0, 31);
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)] + fix_mul(pitch, (Util_pitchToRate_c1[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_c2[static_cast<uint32_t>(index)], pitch)));
}

static_inline fix16_t Util_cvToRate_raw_c0(int32_t index) {
   return Util_cvToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_raw_c1(int32_t index) {
   return Util_cvToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_raw_c2(int32_t index) {
   return Util_cvToRate_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 9247857)), 0, 127);
   return Util_cvToRate_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToRate_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_c2[static_cast<uint32_t>(index)], cv)));
}

static_inline void Blit_init(Blit_osc_blit_type& _ctx) {
   _ctx.rate = Util_cvToRate(0x0 /* 0.000000 */);
}

void Blit_osc_blit_type_init(Blit_osc_blit_type& _ctx);

static_inline void Blit_init_type_init(Blit_init_type& _ctx) {
   Blit_osc_blit_type_init(_ctx);
}

static_inline void Blit_process_type_init(Blit_process_type& _ctx) {
   Blit_osc_blit_type_init(_ctx.inst_1268b);
}

static_inline void Blit_noteOn_type_init(Blit_noteOn_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline void Blit_noteOff_type_init(Blit_noteOff_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline void Blit_controlChange_type_init(Blit_controlChange_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline void Blit_default_type_init(Blit_default_type& _ctx) {
   Blit_process_type_init(_ctx);
}

void Adsr_do_type_init(Adsr_do_type& _ctx);

void Adsr_process_type_init(Adsr_process_type& _ctx);

static_inline void Adsr_noteOn_type_init(Adsr_noteOn_type& _ctx) {
   Adsr_process_type_init(_ctx);
}

static_inline void Adsr_noteOff_type_init(Adsr_noteOff_type& _ctx) {
   Adsr_process_type_init(_ctx);
}

static_inline void Adsr_controlChange_type_init(Adsr_controlChange_type& _ctx) {
   Adsr_process_type_init(_ctx);
}

static_inline void Adsr_default_type_init(Adsr_default_type& _ctx) {
   Adsr_process_type_init(_ctx);
}

void Voice_4_process_type_init(Voice_4_process_type& _ctx);

static_inline void Voice_4_noteOn_type_init(Voice_4_noteOn_type& _ctx) {
   Voice_4_process_type_init(_ctx);
}

static_inline void Voice_4_noteOff_type_init(Voice_4_noteOff_type& _ctx) {
   Voice_4_process_type_init(_ctx);
}

static_inline void Voice_4_controlChange_type_init(Voice_4_controlChange_type& _ctx) {
   Voice_4_process_type_init(_ctx);
}

static_inline void Voice_4_default_type_init(Voice_4_default_type& _ctx) {
   Voice_4_process_type_init(_ctx);
}

static_inline bool Util_edge(Util_edge_type& _ctx, bool x) {
   bool ret = x && _ctx.pre == false;
   _ctx.pre = x;
   return ret;
}

static_inline bool Util_change(Util_change_type& _ctx, fix16_t x) {
   bool v = _ctx.pre_x != x;
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1) {
   return y0 + fix_div(fix_mul((x + (- x0)), (y1 + (- y0))), (x1 + (- x0)));
}

static_inline fix16_t Util_dcblock(Util_dcblock_type& _ctx, fix16_t x0) {
   fix16_t y0 = x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */, _ctx.y1);
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

static_inline fix16_t Util_smooth(Util_smooth_type& _ctx, fix16_t input) {
   _ctx.x = fix_mul(0x147 /* 0.005000 */, (input + (- _ctx.x))) + _ctx.x;
   return _ctx.x;
}

static_inline fix16_t Util_average2(Util_average2_type& _ctx, fix16_t x1) {
   fix16_t result = fix_mul(0x8000 /* 0.500000 */, (x1 + _ctx.x0));
   _ctx.x0 = x1;
   return result;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x) {
   if (x <= -0xaaaa /* -0.666667 */) {
      return -0xaaaa /* -0.666667 */;
   }
   else {
      if (x >= 0xaaaa /* 0.666667 */) {
         return 0xaaaa /* 0.666667 */;
      }
      else {
         return x + fix_mul(-0x5555 /* -0.333333 */, fix_mul(x, fix_mul(x, x)));
      }
   }
}

static_inline fix16_t Util_pitchToCv(fix16_t pitch) {
   return -0x3333 /* -0.200000 */ + fix_mul(0x222 /* 0.008333 */, pitch);
}

static_inline fix16_t Util_cvTokHz_raw_c0(int32_t index) {
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz_raw_c1(int32_t index) {
   return Util_cvTokHz_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz_raw_c2(int32_t index) {
   return Util_cvTokHz_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 2031616)), 0, 31);
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvTokHz_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvTokHz_c2[static_cast<uint32_t>(index)], cv)));
}

fix16_t Tricore_process(Tricore_process_type& _ctx, fix16_t cv, fix16_t reset, fix16_t disable);

static_inline void Tricore_noteOn(Tricore_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Tricore_noteOff(Tricore_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Tricore_controlChange(Tricore_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline fix16_t Saturate_soft_tanh_table_raw_c0(int32_t index) {
   return Saturate_soft_tanh_table_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_soft_tanh_table_raw_c1(int32_t index) {
   return Saturate_soft_tanh_table_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_soft_tanh_table_raw_c2(int32_t index) {
   return Saturate_soft_tanh_table_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_soft_tanh_table(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul((x - -1572864), 327680)), 0, 240);
   return Saturate_soft_tanh_table_c0[static_cast<uint32_t>(index)] + fix_mul(x, (Saturate_soft_tanh_table_c1[static_cast<uint32_t>(index)] + fix_mul(Saturate_soft_tanh_table_c2[static_cast<uint32_t>(index)], x)));
}

static_inline fix16_t Saturate_soft_process(fix16_t x) {
   return Saturate_soft_tanh_table(x);
}

static_inline void Saturate_soft_noteOn(int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Saturate_soft_noteOff(int32_t note, int32_t channel) {
}

static_inline void Saturate_soft_controlChange(int32_t control, int32_t value, int32_t channel) {
}

static_inline void Saturate_soft_default() {
}

fix16_t Svf_process(Svf_process_type& _ctx, fix16_t x, fix16_t cv, fix16_t q, int32_t sel);

static_inline void Svf_noteOn(Svf_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Svf_noteOff(Svf_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Svf_controlChange(Svf_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline fix16_t Saturate_tanh_table_raw_c0(int32_t index) {
   return Saturate_tanh_table_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_tanh_table_raw_c1(int32_t index) {
   return Saturate_tanh_table_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_tanh_table_raw_c2(int32_t index) {
   return Saturate_tanh_table_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_tanh_table(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul((x - -1572864), 327680)), 0, 240);
   return Saturate_tanh_table_c0[static_cast<uint32_t>(index)] + fix_mul(x, (Saturate_tanh_table_c1[static_cast<uint32_t>(index)] + fix_mul(Saturate_tanh_table_c2[static_cast<uint32_t>(index)], x)));
}

static_inline fix16_t Saturate_process(fix16_t x) {
   return Saturate_tanh_table(x);
}

static_inline void Saturate_noteOn(int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Saturate_noteOff(int32_t note, int32_t channel) {
}

static_inline void Saturate_controlChange(int32_t control, int32_t value, int32_t channel) {
}

static_inline void Saturate_default() {
}

static_inline fix16_t Lfo_soft(Lfo_soft_type& _ctx, fix16_t x1) {
   fix16_t o = fix_mul(0x4000 /* 0.250000 */, (x1 + _ctx.x2 + _ctx.x3 + _ctx.x4));
   fix16_t _t_temp_0 = x1;
   fix16_t _t_temp_1 = _ctx.x2;
   fix16_t _t_temp_2 = _ctx.x3;
   _ctx.x2 = _t_temp_0;
   _ctx.x3 = _t_temp_1;
   _ctx.x4 = _t_temp_2;
   return o;
}

fix16_t Lfo_process(Lfo_process_type& _ctx, fix16_t cv, fix16_t shape, fix16_t reset);

static_inline void Lfo_noteOn(Lfo_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Lfo_noteOff(Lfo_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Lfo_controlChange(Lfo_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Lfo_default(Lfo_process_type& _ctx) {
}

static_inline fix16_t Tables_nsine_raw_c0(int32_t index) {
   return Tables_nsine_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_nsine_raw_c1(int32_t index) {
   return Tables_nsine_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_nsine_raw_c2(int32_t index) {
   return Tables_nsine_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_nsine(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul(x, 8323072)), 0, 127);
   return Tables_nsine_c0[static_cast<uint32_t>(index)] + fix_mul(x, (Tables_nsine_c1[static_cast<uint32_t>(index)] + fix_mul(Tables_nsine_c2[static_cast<uint32_t>(index)], x)));
}

fix16_t Phase_process(Phase_process_type& _ctx, fix16_t cv, fix16_t reset);

static_inline void Phase_noteOn(Phase_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Phase_noteOff(Phase_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Phase_controlChange(Phase_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

fix16_t Blit_pulse_train(Blit_pulse_train_type& _ctx, fix16_t cv, fix16_t phase);

fix16_t Blit_osc_blit(Blit_osc_blit_type& _ctx, fix16_t cv, fix16_t pw, fix16_t wave);

static_inline fix16_t Blit_process(Blit_process_type& _ctx, fix16_t cv, fix16_t pw, fix16_t wave) {
   return Blit_osc_blit(_ctx.inst_1268b, cv, pw, wave);
}

static_inline void Blit_noteOn(Blit_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Blit_noteOff(Blit_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Blit_controlChange(Blit_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Blit_default(Blit_process_type& _ctx) {
}

fix16_t Adsr_do(Adsr_do_type& _ctx, fix16_t gate, fix16_t a, fix16_t d, fix16_t s, fix16_t r);

static_inline fix16_t Adsr_process(Adsr_process_type& _ctx, fix16_t gate) {
   return Adsr_do(_ctx.inst_1a025, gate, _ctx.knob1, _ctx.knob2, _ctx.knob3, _ctx.knob4);
}

static_inline void Adsr_noteOn(Adsr_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Adsr_noteOff(Adsr_process_type& _ctx, int32_t note, int32_t channel) {
}

void Adsr_controlChange(Adsr_process_type& _ctx, int32_t control, int32_t value, int32_t channel);

static_inline void Adsr_default(Adsr_process_type& _ctx) {
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
   _ctx.knob3 = 0x10000 /* 1.000000 */;
   _ctx.knob4 = 0x8000 /* 0.500000 */;
}

static_inline fix16_t Voice_4_process(Voice_4_process_type& _ctx, fix16_t cv, fix16_t vel, fix16_t gate) {
   fix16_t lfo = Lfo_process(_ctx.inst_1d695, _ctx.lfo_rate, _ctx.lfo_shape, fix_mul(gate, _ctx.lfo_reset));
   fix16_t mod_pw = fix_mul(lfo, _ctx.lfo_pw);
   fix16_t mod_cv = fix_mul(lfo, _ctx.lfo_cv);
   fix16_t mod_flt = fix_mul(lfo, _ctx.lfo_flt);
   fix16_t o1 = Blit_process(_ctx.inst_28b95, 0x6 /* 0.000100 */ + cv + mod_cv, mod_pw + _ctx.pw1, 0x0 /* 0.000000 */);
   fix16_t o2 = Blit_process(_ctx.inst_38b95, 0xd /* 0.000200 */ + cv + mod_cv, mod_pw + _ctx.pw2, 0x10000 /* 1.000000 */);
   fix16_t o3 = Blit_process(_ctx.inst_48b95, cv + mod_cv + _ctx.pw3, mod_pw + _ctx.pw1, 0x0 /* 0.000000 */);
   fix16_t sub = Saturate_process(fix_mul((0x20000 /* 2.000000 */ + fix_mul(0x50000 /* 5.000000 */, _ctx.pw4)), Tricore_process(_ctx.inst_53c95, (cv + mod_cv), 0x0 /* 0.000000 */, 0x10000 /* 1.000000 */)));
   fix16_t o = fix_mul(o1, _ctx.level1) + fix_mul(o2, _ctx.level2) + fix_mul(o3, _ctx.level3) + fix_mul(sub, _ctx.level4);
   fix16_t f = Svf_process(_ctx.inst_6a295, o, mod_flt + _ctx.flt_cut, _ctx.flt_res, _ctx.flt_shape);
   fix16_t env = Adsr_do(_ctx.inst_7a095, gate, _ctx.attack, _ctx.decay, _ctx.sustain, _ctx.release);
   return fix_mul(env, f);
}

static_inline void Voice_4_noteOn(Voice_4_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Voice_4_noteOff(Voice_4_process_type& _ctx, int32_t note, int32_t channel) {
}

void Voice_4_controlChange(Voice_4_process_type& _ctx, int32_t control, int32_t value, int32_t channel);

static_inline void Voice_4_default(Voice_4_process_type& _ctx) {
}


#endif // VOICE_4_H
