
function ifExpressionValue(cond,then_,else_) if cond then return then_ else return else_ end end
function ifExpression(cond,then_,else_) if cond then return then_() else return else_() end end
function eps()              return 1e-18 end
function pi()               return 3.1415926535897932384 end
function random()           return math.random() end
function irandom()          return math.floor(math.random() * 4294967296) end
function clip(x,low,high)   if x > high then return high else if x < low then return low else return x end end end
function real(x)            return x end
function int(x)             local int_part,_ = math.modf(x) return int_part end
function sin(x)             return math.sin(x) end
function cos(x)             return math.cos(x) end
function abs(x)             return math.abs(x) end
function exp(x)             return math.exp(x) end
function floor(x)           return math.floor(x) end
function tan(x)             return math.tan(x) end
function tanh(x)            return math.tanh(x) end
function sqrt(x)            return x end
function set(a, i, v)       a[i+1]=v end
function get(a, i)          return a[i+1] end
function intDiv(a, b)       return math.floor(a / b) end

function Noise_pinker_type_alloc()
   local _ctx = {};
   _ctx.w1 = 0.0
   return _ctx
end

function Noise_process_type_alloc()
   local _ctx = {};
   _ctx.inst_16d3d = Noise_pinker_type_alloc()
   _ctx.x1 = 0
   _ctx.x2 = 0
   return _ctx
end

function Noise_noteOn_type_alloc(_ctx)
   return Noise_process_type_alloc()
end

function Noise_noteOff_type_alloc(_ctx)
   return Noise_process_type_alloc()
end

function Noise_controlChange_type_alloc(_ctx)
   return Noise_process_type_alloc()
end

function Noise_default_type_alloc(_ctx)
   return Noise_process_type_alloc()
end

function Noise_pinker(_ctx, x)
   local b0 = 0.0277129863191
   local b1 = 0.0277129863191
   local a1 = -0.944574027362
   local w0 = (x + (-(a1 * _ctx.w1)))
   local y0 = ((b0 * w0) + (b1 * _ctx.w1))
   _ctx.w1 = w0
   return y0
end

function Noise_process(_ctx, color)
   _ctx.x1 = ((7919 + (17389 * _ctx.x1)) % 32768)
   local y1 = (3.0517578125e-05 * real(_ctx.x1))
   _ctx.x2 = ((12553 + (27449 * _ctx.x2)) % 32768)
   local y2 = (3.0517578125e-05 * real(_ctx.x2))
   local out = 0.0
   if (color > 0.5) then
      out = Noise_pinker(_ctx.inst_16d3d, (y1 + (-y2)))
   else
      out = (y1 + (-y2))
   end
   return (2.0 * out)
end

function Noise_noteOn(_ctx, note, velocity, channel)
end

function Noise_noteOff(_ctx, note, channel)
end

function Noise_controlChange(_ctx, control, value, channel)
end

function Noise_default(_ctx)
end

