/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef KICK_H
#define KICK_H

#include "vultin.h"
#include "kick.tables.h"

typedef struct Noise_pinker_type {
   fix16_t w1;
} Noise_pinker_type;

typedef struct Noise_process_type {
   Noise_pinker_type inst_16d3d;
   int32_t x1;
   int32_t x2;
} Noise_process_type;

typedef struct Noise_process_type Noise_noteOn_type;

typedef struct Noise_process_type Noise_noteOff_type;

typedef struct Noise_process_type Noise_controlChange_type;

typedef struct Noise_process_type Noise_default_type;

typedef struct Util_edge_type {
   bool pre;
} Util_edge_type;

typedef struct Util_change_type {
   fix16_t pre_x;
} Util_change_type;

typedef struct Util_dcblock_type {
   fix16_t x1;
   fix16_t y1;
} Util_dcblock_type;

typedef struct Util_smooth_type {
   fix16_t x;
} Util_smooth_type;

typedef struct Util_average2_type {
   fix16_t x0;
} Util_average2_type;

typedef struct Tricore_process_type {
   bool direction;
   Util_change_type inst_1b03c;
   Util_edge_type inst_2043c;
   Util_edge_type inst_3043c;
   fix16_t phase;
   fix16_t rate;
   fix16_t reset_phase;
   bool reset_state;
} Tricore_process_type;

typedef struct Tricore_process_type Tricore_noteOn_type;

typedef struct Tricore_process_type Tricore_noteOff_type;

typedef struct Tricore_process_type Tricore_controlChange_type;

typedef struct Tricore_process_type Tricore_default_type;

typedef struct Swept_process_type {
   Util_edge_type inst_10402;
   fix16_t out;
} Swept_process_type;

typedef struct Swept_process_type Swept_noteOn_type;

typedef struct Swept_process_type Swept_noteOff_type;

typedef struct Swept_process_type Swept_controlChange_type;

typedef struct Swept_process_type Swept_default_type;

typedef struct Ahr_do_type {
   fix16_t Ahr_do_ret_0;
   fix16_t Ahr_do_ret_1;
   fix16_t hold_phase;
   Util_edge_type inst_104d8;
   Util_edge_type inst_204d8;
   fix16_t out;
   fix16_t rate;
   int32_t state;
   fix16_t target;
} Ahr_do_type;

typedef struct Ahr_process_type {
   fix16_t Ahr_process_ret_0;
   fix16_t Ahr_process_ret_1;
   Ahr_do_type inst_1d84b;
   fix16_t knob1;
   fix16_t knob2;
   fix16_t knob3;
} Ahr_process_type;

typedef struct Ahr_process_type Ahr_noteOn_type;

typedef struct Ahr_process_type Ahr_noteOff_type;

typedef struct Ahr_process_type Ahr_controlChange_type;

typedef struct Ahr_process_type Ahr_default_type;

typedef struct Kick_do_type {
   Ahr_do_type inst_1d863;
   Swept_process_type inst_20263;
   Tricore_process_type inst_33c63;
   Ahr_do_type inst_4d863;
   Noise_process_type inst_53d63;
} Kick_do_type;

typedef struct Kick_process_type {
   Kick_do_type inst_16352;
   fix16_t noise;
   fix16_t odecay;
   fix16_t pitch;
   fix16_t swept;
} Kick_process_type;

typedef struct Kick_process_type Kick_noteOn_type;

typedef struct Kick_process_type Kick_noteOff_type;

typedef struct Kick_process_type Kick_controlChange_type;

typedef struct Kick_process_type Kick_default_type;

static_inline void Noise_pinker_type_init(Noise_pinker_type& _ctx) {
   _ctx.w1 = 0x0 /* 0.000000 */;
}

static_inline void Noise_process_type_init(Noise_process_type& _ctx) {
   Noise_pinker_type_init(_ctx.inst_16d3d);
   _ctx.x1 = 0;
   _ctx.x2 = 0;
}

static_inline void Noise_noteOn_type_init(Noise_noteOn_type& _ctx) {
   Noise_process_type_init(_ctx);
}

static_inline void Noise_noteOff_type_init(Noise_noteOff_type& _ctx) {
   Noise_process_type_init(_ctx);
}

static_inline void Noise_controlChange_type_init(Noise_controlChange_type& _ctx) {
   Noise_process_type_init(_ctx);
}

static_inline void Noise_default_type_init(Noise_default_type& _ctx) {
   Noise_process_type_init(_ctx);
}

static_inline void Util_edge_type_init(Util_edge_type& _ctx) {
   _ctx.pre = false;
}

static_inline void Util_change_type_init(Util_change_type& _ctx) {
   _ctx.pre_x = 0x0 /* 0.000000 */;
}

static_inline void Util_dcblock_type_init(Util_dcblock_type& _ctx) {
   _ctx.x1 = 0x0 /* 0.000000 */;
   _ctx.y1 = 0x0 /* 0.000000 */;
}

static_inline void Util_smooth_type_init(Util_smooth_type& _ctx) {
   _ctx.x = 0x0 /* 0.000000 */;
}

static_inline void Util_average2_type_init(Util_average2_type& _ctx) {
   _ctx.x0 = 0x0 /* 0.000000 */;
}

void Tricore_process_type_init(Tricore_process_type& _ctx);

static_inline void Tricore_noteOn_type_init(Tricore_noteOn_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Tricore_noteOff_type_init(Tricore_noteOff_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Tricore_controlChange_type_init(Tricore_controlChange_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Tricore_default_type_init(Tricore_default_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Swept_process_type_init(Swept_process_type& _ctx) {
   Util_edge_type_init(_ctx.inst_10402);
   _ctx.out = 0x0 /* 0.000000 */;
}

static_inline void Swept_noteOn_type_init(Swept_noteOn_type& _ctx) {
   Swept_process_type_init(_ctx);
}

static_inline void Swept_noteOff_type_init(Swept_noteOff_type& _ctx) {
   Swept_process_type_init(_ctx);
}

static_inline void Swept_controlChange_type_init(Swept_controlChange_type& _ctx) {
   Swept_process_type_init(_ctx);
}

static_inline void Swept_default_type_init(Swept_default_type& _ctx) {
   Swept_process_type_init(_ctx);
}

void Ahr_do_type_init(Ahr_do_type& _ctx);

void Ahr_process_type_init(Ahr_process_type& _ctx);

static_inline void Ahr_noteOn_type_init(Ahr_noteOn_type& _ctx) {
   Ahr_process_type_init(_ctx);
}

static_inline void Ahr_noteOff_type_init(Ahr_noteOff_type& _ctx) {
   Ahr_process_type_init(_ctx);
}

static_inline void Ahr_controlChange_type_init(Ahr_controlChange_type& _ctx) {
   Ahr_process_type_init(_ctx);
}

static_inline void Ahr_default_type_init(Ahr_default_type& _ctx) {
   Ahr_process_type_init(_ctx);
}

void Kick_do_type_init(Kick_do_type& _ctx);

void Kick_process_type_init(Kick_process_type& _ctx);

static_inline void Kick_noteOn_type_init(Kick_noteOn_type& _ctx) {
   Kick_process_type_init(_ctx);
}

static_inline void Kick_noteOff_type_init(Kick_noteOff_type& _ctx) {
   Kick_process_type_init(_ctx);
}

static_inline void Kick_controlChange_type_init(Kick_controlChange_type& _ctx) {
   Kick_process_type_init(_ctx);
}

static_inline void Kick_default_type_init(Kick_default_type& _ctx) {
   Kick_process_type_init(_ctx);
}

static_inline fix16_t Noise_pinker(Noise_pinker_type& _ctx, fix16_t x) {
   fix16_t b0 = 0x718 /* 0.027713 */;
   fix16_t b1 = 0x718 /* 0.027713 */;
   fix16_t a1 = -0xf1cf /* -0.944574 */;
   fix16_t w0 = (x + (- fix_mul(a1, _ctx.w1)));
   fix16_t y0 = (fix_mul(b0, w0) + fix_mul(b1, _ctx.w1));
   _ctx.w1 = w0;
   return y0;
}

fix16_t Noise_process(Noise_process_type& _ctx, fix16_t color);

static_inline void Noise_noteOn(Noise_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Noise_noteOff(Noise_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Noise_controlChange(Noise_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Noise_default(Noise_process_type& _ctx) {
}

static_inline bool Util_edge(Util_edge_type& _ctx, bool x) {
   bool ret = (x && (_ctx.pre == false));
   _ctx.pre = x;
   return ret;
}

static_inline bool Util_change(Util_change_type& _ctx, fix16_t x) {
   bool v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1) {
   return (y0 + fix_div(fix_mul((x + (- x0)), (y1 + (- y0))), (x1 + (- x0))));
}

static_inline fix16_t Util_dcblock(Util_dcblock_type& _ctx, fix16_t x0) {
   fix16_t y0 = (x0 + ((- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */, _ctx.y1)));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

static_inline fix16_t Util_smooth(Util_smooth_type& _ctx, fix16_t input) {
   _ctx.x = (fix_mul(0x147 /* 0.005000 */, (input + (- _ctx.x))) + _ctx.x);
   return _ctx.x;
}

static_inline fix16_t Util_average2(Util_average2_type& _ctx, fix16_t x1) {
   fix16_t result = fix_mul(0x8000 /* 0.500000 */, (x1 + _ctx.x0));
   _ctx.x0 = x1;
   return result;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x) {
   if (x <= -0xaaaa /* -0.666667 */) {
      return -0xaaaa /* -0.666667 */;
   }
   else {
      if (x >= 0xaaaa /* 0.666667 */) {
         return 0xaaaa /* 0.666667 */;
      }
      else {
         return (x + fix_mul(-0x5555 /* -0.333333 */, fix_mul(x, fix_mul(x, x))));
      }
   }
}

static_inline fix16_t Util_pitchToRate_1024_raw_c0(int32_t index) {
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024_raw_c1(int32_t index) {
   return Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024_raw_c2(int32_t index) {
   return Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024(fix16_t pitch) {
   int32_t index = int_clip(fix_to_int(fix_mul(pitch, 15996)), 0, 31);
   return (Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(pitch, (Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)], pitch))));
}

static_inline fix16_t Util_pitchToRate_raw_c0(int32_t index) {
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_raw_c1(int32_t index) {
   return Util_pitchToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_raw_c2(int32_t index) {
   return Util_pitchToRate_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate(fix16_t pitch) {
   int32_t index = int_clip(fix_to_int(fix_mul(pitch, 15996)), 0, 31);
   return (Util_pitchToRate_c0[static_cast<uint32_t>(index)] + fix_mul(pitch, (Util_pitchToRate_c1[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_c2[static_cast<uint32_t>(index)], pitch))));
}

static_inline fix16_t Util_cvToPitch(fix16_t cv) {
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */, cv));
}

static_inline fix16_t Util_cvToRate_1024_raw_c0(int32_t index) {
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024_raw_c1(int32_t index) {
   return Util_cvToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024_raw_c2(int32_t index) {
   return Util_cvToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 2257351)), 0, 31);
   return (Util_cvToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToRate_1024_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_1024_c2[static_cast<uint32_t>(index)], cv))));
}

static_inline fix16_t Util_cvToRate_raw_c0(int32_t index) {
   return Util_cvToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_raw_c1(int32_t index) {
   return Util_cvToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_raw_c2(int32_t index) {
   return Util_cvToRate_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 9247857)), 0, 127);
   return (Util_cvToRate_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToRate_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_c2[static_cast<uint32_t>(index)], cv))));
}

static_inline fix16_t Util_pitchToCv(fix16_t pitch) {
   return fix_mul(0x222 /* 0.008333 */, (-0x180000 /* -24.000000 */ + pitch));
}

static_inline fix16_t Util_cvToperiod_raw_c0(int32_t index) {
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod_raw_c1(int32_t index) {
   return Util_cvToperiod_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod_raw_c2(int32_t index) {
   return Util_cvToperiod_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 2031616)), 0, 31);
   return (Util_cvToperiod_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToperiod_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToperiod_c2[static_cast<uint32_t>(index)], cv))));
}

static_inline fix16_t Util_cvTokHz_raw_c0(int32_t index) {
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz_raw_c1(int32_t index) {
   return Util_cvTokHz_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz_raw_c2(int32_t index) {
   return Util_cvTokHz_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 2031616)), 0, 31);
   return (Util_cvTokHz_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvTokHz_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvTokHz_c2[static_cast<uint32_t>(index)], cv))));
}

fix16_t Tricore_process(Tricore_process_type& _ctx, fix16_t cv, fix16_t reset, fix16_t disable);

static_inline void Tricore_noteOn(Tricore_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Tricore_noteOff(Tricore_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Tricore_controlChange(Tricore_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Tricore_default(Tricore_process_type& _ctx) {
   _ctx.rate = Util_cvToRate_1024(0x0 /* 0.000000 */);
}

static_inline fix16_t Swept_process(Swept_process_type& _ctx, fix16_t gate, fix16_t start, fix16_t end, fix16_t rate) {
   fix16_t a_rate = fix_div(0x10000 /* 1.000000 */, (0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */, rate)));
   bool bgate = (gate > 0x8000 /* 0.500000 */);
   _ctx.out = (fix_mul(0x106 /* 0.004000 */, fix_mul(rate, ((- _ctx.out) + fix_mul(0x4000000 /* 1024.000000 */, end)))) + _ctx.out);
   if (Util_edge(_ctx.inst_10402, bgate)) {
      _ctx.out = fix_mul(0x4000000 /* 1024.000000 */, start);
   }
   return fix_mul(0x40 /* 0.000977 */, _ctx.out);
}

static_inline void Swept_noteOn(Swept_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Swept_noteOff(Swept_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Swept_controlChange(Swept_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Swept_default(Swept_process_type& _ctx) {
}

static_inline fix16_t Saturate_tanh_table_raw_c0(int32_t index) {
   return Saturate_tanh_table_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_tanh_table_raw_c1(int32_t index) {
   return Saturate_tanh_table_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_tanh_table_raw_c2(int32_t index) {
   return Saturate_tanh_table_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_tanh_table(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul((x - -1572864), 327680)), 0, 240);
   return (Saturate_tanh_table_c0[static_cast<uint32_t>(index)] + fix_mul(x, (Saturate_tanh_table_c1[static_cast<uint32_t>(index)] + fix_mul(Saturate_tanh_table_c2[static_cast<uint32_t>(index)], x))));
}

static_inline fix16_t Saturate_process(fix16_t x) {
   return Saturate_tanh_table(x);
}

static_inline void Saturate_noteOn(int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Saturate_noteOff(int32_t note, int32_t channel) {
}

static_inline void Saturate_controlChange(int32_t control, int32_t value, int32_t channel) {
}

static_inline void Saturate_default() {
}

void Ahr_do(Ahr_do_type& _ctx, fix16_t gate, fix16_t a, fix16_t h, fix16_t r);

void Ahr_process(Ahr_process_type& _ctx, fix16_t gate);

static_inline void Ahr_noteOn(Ahr_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Ahr_noteOff(Ahr_process_type& _ctx, int32_t note, int32_t channel) {
}

void Ahr_controlChange(Ahr_process_type& _ctx, int32_t control, int32_t value, int32_t channel);

static_inline void Ahr_default(Ahr_process_type& _ctx) {
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
   _ctx.knob3 = 0x8000 /* 0.500000 */;
}

fix16_t Kick_do(Kick_do_type& _ctx, fix16_t gate, fix16_t odecay, fix16_t pitch, fix16_t swept, fix16_t noise);

static_inline fix16_t Kick_process(Kick_process_type& _ctx, fix16_t gate) {
   return Kick_do(_ctx.inst_16352, gate, _ctx.odecay, _ctx.pitch, _ctx.swept, _ctx.noise);
}

static_inline void Kick_noteOn(Kick_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Kick_noteOff(Kick_process_type& _ctx, int32_t note, int32_t channel) {
}

void Kick_controlChange(Kick_process_type& _ctx, int32_t control, int32_t value, int32_t channel);

static_inline void Kick_default(Kick_process_type& _ctx) {
}


#endif // KICK_H
