/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */

#include "phd.h"

void Phase_process_type_init(Phase_process_type& _ctx) {
   Util_change_type_init(_ctx.inst_1b08a);
   Util_edge_type_init(_ctx.inst_2048a);
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   Phase_default(_ctx);
}

fix16_t Phase_process(Phase_process_type& _ctx, fix16_t cv, fix16_t reset) {
   if (Util_change(_ctx.inst_1b08a, cv)) {
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   if (Util_edge(_ctx.inst_2048a, reset > 0x8000 /* 0.500000 */)) {
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else {
      _ctx.phase = _ctx.phase + _ctx.rate;
   }
   if (_ctx.phase > 0x4000000 /* 1024.000000 */) {
      _ctx.phase = -0x4000000 /* -1024.000000 */ + _ctx.phase;
   }
   else {
      _ctx.phase = _ctx.phase;
   }
   return (_ctx.phase >> 10);
}

fix16_t Phd_process(Phd_process_type& _ctx, fix16_t cv, fix16_t detune) {
   fix16_t phase1 = Phase_process(_ctx.inst_18aec, cv, 0x0 /* 0.000000 */);
   fix16_t comp = 0x10000 /* 1.000000 */ + (- phase1);
   fix16_t reset = (- phase1) + _ctx.pre_phase1;
   _ctx.pre_phase1 = phase1;
   fix16_t phase2 = Phase_process(_ctx.inst_38aec, cv + Util_smooth(_ctx.inst_295ec, (detune >> 1)), reset);
   fix16_t sine = Tables_nsine(phase2);
   return fix_mul(comp, sine);
}

