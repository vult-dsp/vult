
function ifExpressionValue(cond,then_,else_) if cond then return then_ else return else_ end end
function ifExpression(cond,then_,else_) if cond then return then_() else return else_() end end
function eps()              return 1e-18 end
function pi()               return 3.1415926535897932384 end
function random()           return math.random() end
function irandom()          return math.floor(math.random() * 4294967296) end
function clip(x,low,high)   if x > high then return high else if x < low then return low else return x end end end
function real(x)            return x end
function int(x)             local int_part,_ = math.modf(x) return int_part end
function sin(x)             return math.sin(x) end
function cos(x)             return math.cos(x) end
function abs(x)             return math.abs(x) end
function exp(x)             return math.exp(x) end
function floor(x)           return math.floor(x) end
function tan(x)             return math.tan(x) end
function tanh(x)            return math.tanh(x) end
function sqrt(x)            return x end
function set(a, i, v)       a[i+1]=v end
function get(a, i)          return a[i+1] end
function intDiv(a, b)       return math.floor(a / b) end

function Phasedist_smooth_type_alloc()
   local _ctx = {};
   _ctx.x = 0.
   return _ctx
end

function Phasedist_change_type_alloc()
   local _ctx = {};
   _ctx.pre_x = 0.
   return _ctx
end

function Phasedist_phasor_type_alloc()
   local _ctx = {};
   _ctx.inst_1e817 = Phasedist_change_type_alloc()
   _ctx.phase = 0.
   _ctx.rate = 0.
   return _ctx
end

function Phasedist_process_type_alloc()
   local _ctx = {};
   _ctx.detune = 0.
   _ctx.inst_117e9 = Phasedist_phasor_type_alloc()
   _ctx.inst_275e9 = Phasedist_smooth_type_alloc()
   _ctx.inst_317e9 = Phasedist_phasor_type_alloc()
   _ctx.inst_475e9 = Phasedist_smooth_type_alloc()
   _ctx.pitch = 0.
   _ctx.pre_phase1 = 0.
   _ctx.volume = 0.
   return _ctx
end

function Phasedist_noteOn_type_alloc(_ctx)
   return Phasedist_process_type_alloc()
end

function Phasedist_noteOff_type_alloc(_ctx)
   return Phasedist_process_type_alloc()
end

function Phasedist_controlChange_type_alloc(_ctx)
   return Phasedist_process_type_alloc()
end

function Phasedist_default_type_alloc(_ctx)
   return Phasedist_process_type_alloc()
end

function Phasedist_smooth(_ctx, input)
   _ctx.x = ((0.005 * (input + (-_ctx.x))) + _ctx.x)
   return _ctx.x
end

function Phasedist_change(_ctx, x)
   local v = (_ctx.pre_x ~= x)
   _ctx.pre_x = x
   return v
end

function Phasedist_pitchToRate(d)
   return (0.00019 * exp((0.05777 * d)))
end

function Phasedist_phasor(_ctx, pitch, reset)
   if Phasedist_change(_ctx.inst_1e817, pitch) then
      _ctx.rate = Phasedist_pitchToRate(pitch)
   end
   if reset then
      _ctx.phase = 0.
   else
      _ctx.phase = (_ctx.phase + _ctx.rate)
   end
   if (_ctx.phase > 1.) then
      _ctx.phase = (-1. + _ctx.phase)
   else
      _ctx.phase = _ctx.phase
   end
   return _ctx.phase
end

function Phasedist_process(_ctx, input)
   local phase1 = Phasedist_phasor(_ctx.inst_117e9, _ctx.pitch, false)
   local comp = (1. + (-phase1))
   local reset = (((-phase1) + _ctx.pre_phase1) > 0.5)
   _ctx.pre_phase1 = phase1
   local phase2 = Phasedist_phasor(_ctx.inst_317e9, ((32. * Phasedist_smooth(_ctx.inst_275e9, _ctx.detune)) + _ctx.pitch), reset)
   local sine = sin((6.28319 * phase2))
   return (comp * (sine * Phasedist_smooth(_ctx.inst_475e9, _ctx.volume)))
end

function Phasedist_noteOn(_ctx, note, velocity, channel)
   _ctx.pitch = real(note)
end

function Phasedist_noteOff(_ctx, note, channel)
end

function Phasedist_controlChange(_ctx, control, value, channel)
   if (control == 30) then
      _ctx.volume = (0.00788 * real(value))
   end
   if (control == 31) then
      _ctx.detune = (0.00788 * real(value))
   end
end

function Phasedist_default(_ctx)
   _ctx.volume = 1.
   _ctx.pitch = 45.
   _ctx.detune = 0.
end

