/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */

#include "kick.h"

void Tricore_process_type_init(Tricore_process_type& _ctx) {
   _ctx.direction = false;
   Util_change_type_init(_ctx.inst_1b03c);
   Util_edge_type_init(_ctx.inst_2043c);
   Util_edge_type_init(_ctx.inst_3043c);
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.reset_phase = 0x0 /* 0.000000 */;
   _ctx.reset_state = false;
}

void Ahr_do_type_init(Ahr_do_type& _ctx) {
   _ctx.Ahr_do_ret_0 = 0x0 /* 0.000000 */;
   _ctx.Ahr_do_ret_1 = 0x0 /* 0.000000 */;
   _ctx.hold_phase = 0x0 /* 0.000000 */;
   Util_edge_type_init(_ctx.inst_104d8);
   Util_edge_type_init(_ctx.inst_204d8);
   _ctx.out = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.target = 0x0 /* 0.000000 */;
}

void Ahr_process_type_init(Ahr_process_type& _ctx) {
   _ctx.Ahr_process_ret_0 = 0x0 /* 0.000000 */;
   _ctx.Ahr_process_ret_1 = 0x0 /* 0.000000 */;
   Ahr_do_type_init(_ctx.inst_1d84b);
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x0 /* 0.000000 */;
   _ctx.knob3 = 0x0 /* 0.000000 */;
}

void Kick_do_type_init(Kick_do_type& _ctx) {
   Ahr_do_type_init(_ctx.inst_1d863);
   Swept_process_type_init(_ctx.inst_20263);
   Tricore_process_type_init(_ctx.inst_33c63);
   Ahr_do_type_init(_ctx.inst_4d863);
   Noise_process_type_init(_ctx.inst_53d63);
}

void Kick_process_type_init(Kick_process_type& _ctx) {
   Kick_do_type_init(_ctx.inst_16352);
   _ctx.noise = 0x0 /* 0.000000 */;
   _ctx.odecay = 0x0 /* 0.000000 */;
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.swept = 0x0 /* 0.000000 */;
}

fix16_t Noise_process(Noise_process_type& _ctx, fix16_t color) {
   _ctx.x1 = ((7919 + (17389 * _ctx.x1)) % 32768);
   fix16_t y1 = fix_mul(0x2 /* 0.000031 */, int_to_fix(_ctx.x1));
   _ctx.x2 = ((12553 + (27449 * _ctx.x2)) % 32768);
   fix16_t y2 = fix_mul(0x2 /* 0.000031 */, int_to_fix(_ctx.x2));
   fix16_t out = 0.0f;
   if (color > 0x8000 /* 0.500000 */) {
      out = Noise_pinker(_ctx.inst_16d3d, (y1 + (- y2)));
   }
   else {
      out = (y1 + (- y2));
   }
   return fix_mul(0x20000 /* 2.000000 */, out);
}

fix16_t Tricore_process(Tricore_process_type& _ctx, fix16_t cv, fix16_t reset, fix16_t disable) {
   fix16_t out = 0x0 /* 0.000000 */;
   if (Util_change(_ctx.inst_1b03c, cv)) {
      _ctx.rate = fix_mul(0x40000 /* 4.000000 */, Util_cvToRate_1024(cv));
   }
   fix16_t new_phase = 0.0f;
   fix16_t _if_temp_0 = 0.0f;
   if (_ctx.direction) {
      _if_temp_0 = _ctx.rate;
   }
   else {
      _if_temp_0 = (- _ctx.rate);
   }
   new_phase = (_if_temp_0 + _ctx.phase);
   bool bdisable = (disable > 0x8000 /* 0.500000 */);
   if (Util_edge(_ctx.inst_2043c, (reset > 0x0 /* 0.000000 */)) || Util_edge(_ctx.inst_3043c, bdisable)) {
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0x0 /* 0.000000 */;
   }
   if (new_phase > 0x4000000 /* 1024.000000 */) {
      new_phase = (0x8000000 /* 2048.000000 */ + (- new_phase));
      _ctx.direction = false;
   }
   else {
      if (new_phase < -0x4000000 /* -1024.000000 */) {
         _ctx.direction = true;
         new_phase = (0x0 /* 0.000000 */ + new_phase);
      }
   }
   if (bdisable) {
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else {
      _ctx.phase = new_phase;
   }
   if (_ctx.reset_state) {
      if ((fix_abs(_ctx.reset_phase) > 0xa0000 /* 10.000000 */) || bdisable) {
         fix16_t reset_speed = 0.0f;
         if (bdisable) {
            reset_speed = 0x28f /* 0.010000 */;
         }
         else {
            reset_speed = 0x8000 /* 0.500000 */;
         }
         _ctx.reset_phase = ((- fix_mul(reset_speed, _ctx.reset_phase)) + _ctx.reset_phase);
      }
      else {
         if (_ctx.reset_phase > 0xa0000 /* 10.000000 */) {
            _ctx.reset_phase = _ctx.reset_phase;
         }
         else {
            _ctx.reset_phase = 0x0 /* 0.000000 */;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (out + _ctx.phase);
   return fix_mul(0x40 /* 0.000977 */, out);
}

void Ahr_do(Ahr_do_type& _ctx, fix16_t gate, fix16_t a, fix16_t h, fix16_t r) {
   int32_t release = 0;
   int32_t attack = 1;
   int32_t hold = 2;
   int32_t reset = 3;
   bool bgate = (gate > 0x0 /* 0.000000 */);
   if (Util_edge(_ctx.inst_104d8, bgate)) {
      _ctx.state = reset;
   }
   fix16_t resetting = 0.0f;
   if (_ctx.state == reset) {
      resetting = 0x10000 /* 1.000000 */;
   }
   else {
      resetting = 0x0 /* 0.000000 */;
   }
   if (Util_edge(_ctx.inst_204d8, (_ctx.out > 0x4000000 /* 1024.000000 */))) {
      _ctx.hold_phase = 0x0 /* 0.000000 */;
      _ctx.state = hold;
   }
   if ((_ctx.out < 0xa0000 /* 10.000000 */) && (_ctx.state == reset)) {
      _ctx.state = attack;
   }
   if ((_ctx.hold_phase > 0x640000 /* 100.000000 */) && (_ctx.state == hold)) {
      _ctx.state = release;
   }
   if (_ctx.state == reset) {
      _ctx.rate = 0xfd77 /* 0.990099 */;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   if (_ctx.state == attack) {
      _ctx.rate = fix_div(0x10000 /* 1.000000 */, (0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */, a)));
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   if (_ctx.state == hold) {
      fix16_t hrate = fix_div(0x10000 /* 1.000000 */, (0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */, h)));
      _ctx.hold_phase = (hrate + _ctx.hold_phase);
   }
   if (_ctx.state == release) {
      _ctx.rate = fix_div(0x10000 /* 1.000000 */, (0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */, r)));
      _ctx.target = 0x0 /* 0.000000 */;
   }
   _ctx.out = (fix_mul(0x147 /* 0.005000 */, fix_mul(((- _ctx.out) + _ctx.target), _ctx.rate)) + _ctx.out);
   _ctx.Ahr_do_ret_0 = fix_clip(fix_mul(0x40 /* 0.000977 */, _ctx.out), 0x0 /* 0.000000 */, 0x10000 /* 1.000000 */);
   _ctx.Ahr_do_ret_1 = resetting;
   return ;
}

void Ahr_process(Ahr_process_type& _ctx, fix16_t gate) {
   fix16_t _call_temp_1 = 0.0f;
   fix16_t _call_temp_0 = 0.0f;
   Ahr_do(_ctx.inst_1d84b, gate, _ctx.knob1, _ctx.knob2, _ctx.knob3);
   _call_temp_0 = _ctx.inst_1d84b.Ahr_do_ret_0;
   _call_temp_1 = _ctx.inst_1d84b.Ahr_do_ret_1;
   _ctx.Ahr_process_ret_0 = _call_temp_0;
   _ctx.Ahr_process_ret_1 = _call_temp_1;
   return ;
}

void Ahr_controlChange(Ahr_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
   if (control == 1) {
      _ctx.knob1 = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
   if (control == 2) {
      _ctx.knob2 = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
   if (control == 3) {
      _ctx.knob3 = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
}

fix16_t Kick_do(Kick_do_type& _ctx, fix16_t gate, fix16_t odecay, fix16_t pitch, fix16_t swept, fix16_t noise) {
   fix16_t osc_env = 0.0f;
   fix16_t env_reset = 0.0f;
   Ahr_do(_ctx.inst_1d863, gate, 0x147 /* 0.005000 */, (0x1999 /* 0.100000 */ + odecay), (0x28f /* 0.010000 */ + odecay));
   osc_env = _ctx.inst_1d863.Ahr_do_ret_0;
   env_reset = _ctx.inst_1d863.Ahr_do_ret_1;
   fix16_t cv = Swept_process(_ctx.inst_20263, (0x10000 /* 1.000000 */ + (- env_reset)), (pitch + fix_mul(0x6666 /* 0.400000 */, swept)), pitch, 0x1999 /* 0.100000 */);
   fix16_t osc = Tricore_process(_ctx.inst_33c63, cv, 0x0 /* 0.000000 */, env_reset);
   fix16_t osc_sat = Saturate_process(fix_mul(0x18000 /* 1.500000 */, osc));
   fix16_t noise_env = 0.0f;
   Ahr_do(_ctx.inst_4d863, gate, 0x41 /* 0.001000 */, 0x28f /* 0.010000 */, (0x41 /* 0.001000 */ + fix_mul(0x28f /* 0.010000 */, noise)));
   noise_env = _ctx.inst_4d863.Ahr_do_ret_0;
   fix16_t noise_osc = fix_mul(0x5555 /* 0.333333 */, fix_mul(noise, Noise_process(_ctx.inst_53d63, 0x10000 /* 1.000000 */)));
   return (fix_mul(noise_env, noise_osc) + fix_mul(osc_env, osc_sat));
}

void Kick_controlChange(Kick_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
   if (control == 30) {
      _ctx.odecay = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
   if (control == 31) {
      _ctx.pitch = Util_map(int_to_fix(value), 0x0 /* 0.000000 */, 0x7f0000 /* 127.000000 */, 0x0 /* 0.000000 */, 0x1999 /* 0.100000 */);
   }
   if (control == 32) {
      _ctx.swept = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
   if (control == 33) {
      _ctx.noise = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
}

