/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef DATATYPES_H
#define DATATYPES_H

#include "vultin.h"
#include "datatypes.tables.h"

typedef struct Datatypes_point {
   fix16_t x;
   fix16_t y;
} Datatypes_point;

typedef struct Datatypes_test2_type {
   Datatypes_point p2;
   Datatypes_point result;
} Datatypes_test2_type;

static_inline void Datatypes_point_init(Datatypes_point& _ctx) {
   _ctx.x = 0x0 /* 0.000000 */;
   _ctx.y = 0x0 /* 0.000000 */;
}

static_inline void Datatypes_test2_type_init(Datatypes_test2_type& _ctx) {
   Datatypes_point_init(_ctx.p2);
   Datatypes_point_init(_ctx.result);
}

static_inline Datatypes_point Datatypes_addPoint1(Datatypes_point& p1, Datatypes_point& p2) {
   Datatypes_point p3;
   Datatypes_point_init(p3);
   p3.x = p1.x + p2.x;
   p3.y = p1.y + p2.y;
   return p3;
}

static_inline void Datatypes_addPoint2(Datatypes_point& p1, Datatypes_point& p2, Datatypes_point& result) {
   result.x = p1.x + p2.x;
   result.y = p1.y + p2.y;
}

static_inline void Datatypes_test1() {
   Datatypes_point p1;
   Datatypes_point_init(p1);
   Datatypes_point p2;
   Datatypes_point_init(p2);
   Datatypes_point result = Datatypes_addPoint1(p1, p2);
   Datatypes_addPoint2(p1, p2, result);
}

static_inline void Datatypes_test2(Datatypes_test2_type& _ctx) {
   Datatypes_point p1;
   Datatypes_point_init(p1);
   _ctx.result = Datatypes_addPoint1(p1, _ctx.p2);
}


#endif // DATATYPES_H
