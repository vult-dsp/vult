/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */

#include "SaveState.h"

void SaveState_main_type_init(SaveState_main_type& _ctx) {
   SaveState_counter_type_init(_ctx.c1);
   SaveState_counter_type_init(_ctx.inst_19fb0);
   SaveState_nosave_type_init(_ctx.inst_21bb0);
   SaveState_point_init(_ctx.p1);
   SaveState_point_init(_ctx.p2);
   int32_t i_0 = 0;
   while (i_0 < 3) {
      SaveState_point_init(_ctx.point_array[static_cast<uint32_t>(i_0)]);
      i_0 = 1 + i_0;
   }
   _ctx.str = "";
   _ctx.x = 0.0f;
}

int32_t SaveState_main_type_serialize_data(CustomBuffer& buffer, int32_t index, SaveState_main_type& _ctx) {
   int32_t start = index;
   index = push_block_header(buffer, index);
   index = SaveState_counter_type_serialize_data(buffer, index, _ctx.c1);
   index = SaveState_counter_type_serialize_data(buffer, index, _ctx.inst_19fb0);
   index = SaveState_point_serialize_data(buffer, index, _ctx.p1);
   index = SaveState_point_serialize_data(buffer, index, _ctx.p2);
   int32_t start_0 = index;
   index = push_array(buffer, index, 3);
   int32_t i_0 = 0;
   while (i_0 < 3) {
      index = SaveState_point_serialize_data(buffer, index, _ctx.point_array[static_cast<uint32_t>(i_0)]);
      i_0 = 1 + i_0;
   }
   update_size(buffer, start_0, index + (- start_0));
   index = push_string(buffer, index, _ctx.str);
   index = push_float(buffer, index, _ctx.x);
   update_size(buffer, start, index + (- start));
   return index;
}

void SaveState_point_deserialize_data(CustomBuffer& buffer, CustomTypeDescr& type_descr, int32_t index, SaveState_point& _ctx) {
   int32_t field_index = search_field_name(buffer, type_descr, index, "x");
   if (field_index >= 0) {
      _ctx.x = deserialize_float(buffer, field_index);
   }
   field_index = search_field_name(buffer, type_descr, index, "y");
   if (field_index >= 0) {
      _ctx.y = deserialize_float(buffer, field_index);
   }
}

void SaveState_main_type_deserialize_data(CustomBuffer& buffer, CustomTypeDescr& type_descr, int32_t index, SaveState_main_type& _ctx) {
   int32_t field_index = search_field_name(buffer, type_descr, index, "c1");
   if (field_index >= 0) {
      CustomTypeDescr field_descr_0 = search_type_description(buffer, "SaveState_counter_type");
      SaveState_counter_type_deserialize_data(buffer, field_descr_0, field_index, _ctx.c1);
   }
   field_index = search_field_name(buffer, type_descr, index, "inst_19fb0");
   if (field_index >= 0) {
      CustomTypeDescr field_descr_1 = search_type_description(buffer, "SaveState_counter_type");
      SaveState_counter_type_deserialize_data(buffer, field_descr_1, field_index, _ctx.inst_19fb0);
   }
   field_index = search_field_name(buffer, type_descr, index, "p1");
   if (field_index >= 0) {
      CustomTypeDescr field_descr_2 = search_type_description(buffer, "SaveState_point");
      SaveState_point_deserialize_data(buffer, field_descr_2, field_index, _ctx.p1);
   }
   field_index = search_field_name(buffer, type_descr, index, "p2");
   if (field_index >= 0) {
      CustomTypeDescr field_descr_3 = search_type_description(buffer, "SaveState_point");
      SaveState_point_deserialize_data(buffer, field_descr_3, field_index, _ctx.p2);
   }
   CustomTypeDescr field_descr_4 = search_type_description(buffer, "SaveState_point");
   field_index = search_field_name(buffer, type_descr, index, "point_array");
   if (field_index >= 0) {
      field_index = first_array_element(buffer, field_index);
      int32_t i_5 = 0;
      while (i_5 < 3) {
         SaveState_point_deserialize_data(buffer, field_descr_4, field_index, _ctx.point_array[static_cast<uint32_t>(i_5)]);
         i_5 = 1 + i_5;
         field_index = next_object(buffer, field_index);
      }
   }
   field_index = search_field_name(buffer, type_descr, index, "str");
   if (field_index >= 0) {
      _ctx.str = deserialize_string(buffer, field_index);
   }
   field_index = search_field_name(buffer, type_descr, index, "x");
   if (field_index >= 0) {
      _ctx.x = deserialize_float(buffer, field_index);
   }
}

