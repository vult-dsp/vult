/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef MONOCV_H
#define MONOCV_H

#include "vultin.h"
#include "monocv.tables.h"

typedef struct Util_edge_type {
   bool pre;
} Util_edge_type;

typedef struct Util_change_type {
   float pre_x;
} Util_change_type;

typedef struct Util_dcblock_type {
   float x1;
   float y1;
} Util_dcblock_type;

typedef struct Util_smooth_type {
   float x;
} Util_smooth_type;

typedef struct Util_average2_type {
   float x0;
} Util_average2_type;

typedef struct Monocv_mono_noteOn_type {
   int32_t count;
   std::array<int32_t, 4> notes;
   int32_t pre;
} Monocv_mono_noteOn_type;

typedef struct Monocv_mono_noteOn_type Monocv_mono_noteOff_type;

typedef struct Monocv_mono_noteOn_type Monocv_mono_isGateOn_type;

typedef struct Monocv_process_type {
   float Monocv_process_ret_0;
   float Monocv_process_ret_1;
   float Monocv_process_ret_2;
   int32_t active_note;
   int32_t channel_in;
   float cv;
   float gate;
   Util_change_type inst_1b0d6;
   Monocv_mono_noteOn_type notes_a7d6;
   float vel;
} Monocv_process_type;

typedef struct Monocv_process_type Monocv_noteOn_type;

typedef struct Monocv_process_type Monocv_noteOff_type;

typedef struct Monocv_process_type Monocv_controlChange_type;

typedef struct Monocv_process_type Monocv_default_type;

static_inline void Util_edge_type_init(Util_edge_type& _ctx) {
   _ctx.pre = false;
}

static_inline void Util_change_type_init(Util_change_type& _ctx) {
   _ctx.pre_x = 0.0f;
}

static_inline void Util_dcblock_type_init(Util_dcblock_type& _ctx) {
   _ctx.x1 = 0.0f;
   _ctx.y1 = 0.0f;
}

static_inline void Util_smooth_type_init(Util_smooth_type& _ctx) {
   _ctx.x = 0.0f;
}

static_inline void Util_average2_type_init(Util_average2_type& _ctx) {
   _ctx.x0 = 0.0f;
}

void Monocv_mono_noteOn_type_init(Monocv_mono_noteOn_type& _ctx);

static_inline void Monocv_mono_noteOff_type_init(Monocv_mono_noteOff_type& _ctx) {
   Monocv_mono_noteOn_type_init(_ctx);
}

static_inline void Monocv_mono_isGateOn_type_init(Monocv_mono_isGateOn_type& _ctx) {
   Monocv_mono_noteOn_type_init(_ctx);
}

void Monocv_process_type_init(Monocv_process_type& _ctx);

static_inline void Monocv_noteOn_type_init(Monocv_noteOn_type& _ctx) {
   Monocv_process_type_init(_ctx);
}

static_inline void Monocv_noteOff_type_init(Monocv_noteOff_type& _ctx) {
   Monocv_process_type_init(_ctx);
}

static_inline void Monocv_controlChange_type_init(Monocv_controlChange_type& _ctx) {
   Monocv_process_type_init(_ctx);
}

static_inline void Monocv_default_type_init(Monocv_default_type& _ctx) {
   Monocv_process_type_init(_ctx);
}

static_inline bool Util_edge(Util_edge_type& _ctx, bool x) {
   bool ret = (x && (_ctx.pre == false));
   _ctx.pre = x;
   return ret;
}

static_inline bool Util_change(Util_change_type& _ctx, float x) {
   bool v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline float Util_map(float x, float x0, float x1, float y0, float y1) {
   return (y0 + (((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))));
}

static_inline float Util_dcblock(Util_dcblock_type& _ctx, float x0) {
   float y0 = (x0 + ((- _ctx.x1) + (0.995f * _ctx.y1)));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

static_inline float Util_smooth(Util_smooth_type& _ctx, float input) {
   _ctx.x = ((0.005f * (input + (- _ctx.x))) + _ctx.x);
   return _ctx.x;
}

static_inline float Util_average2(Util_average2_type& _ctx, float x1) {
   float result = (0.5f * (x1 + _ctx.x0));
   _ctx.x0 = x1;
   return result;
}

static_inline float Util_cubic_clipper(float x) {
   if (x <= -0.666666666667f) {
      return -0.666666666667f;
   }
   else {
      if (x >= 0.666666666667f) {
         return 0.666666666667f;
      }
      else {
         return (x + (-0.333333333333f * (x * (x * x))));
      }
   }
}

static_inline float Util_pitchToRate_1024_raw_c0(int32_t index) {
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_1024_raw_c1(int32_t index) {
   return Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_1024_raw_c2(int32_t index) {
   return Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_1024(float pitch) {
   int32_t index = int_clip(float_to_int((pitch * 0.244094488189f)), 0, 31);
   return (Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)] + (pitch * (Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)] + (Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)] * pitch))));
}

static_inline float Util_pitchToRate_raw_c0(int32_t index) {
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_raw_c1(int32_t index) {
   return Util_pitchToRate_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_raw_c2(int32_t index) {
   return Util_pitchToRate_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate(float pitch) {
   int32_t index = int_clip(float_to_int((pitch * 0.244094488189f)), 0, 31);
   return (Util_pitchToRate_c0[static_cast<uint32_t>(index)] + (pitch * (Util_pitchToRate_c1[static_cast<uint32_t>(index)] + (Util_pitchToRate_c2[static_cast<uint32_t>(index)] * pitch))));
}

static_inline float Util_cvToPitch(float cv) {
   return (24.0f + (120.0f * cv));
}

static_inline float Util_cvToRate_1024_raw_c0(int32_t index) {
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_1024_raw_c1(int32_t index) {
   return Util_cvToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_1024_raw_c2(int32_t index) {
   return Util_cvToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_1024(float cv) {
   int32_t index = int_clip(float_to_int((cv * 34.4444444444f)), 0, 31);
   return (Util_cvToRate_1024_c0[static_cast<uint32_t>(index)] + (cv * (Util_cvToRate_1024_c1[static_cast<uint32_t>(index)] + (Util_cvToRate_1024_c2[static_cast<uint32_t>(index)] * cv))));
}

static_inline float Util_cvToRate_raw_c0(int32_t index) {
   return Util_cvToRate_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_raw_c1(int32_t index) {
   return Util_cvToRate_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_raw_c2(int32_t index) {
   return Util_cvToRate_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate(float cv) {
   int32_t index = int_clip(float_to_int((cv * 141.111111111f)), 0, 127);
   return (Util_cvToRate_c0[static_cast<uint32_t>(index)] + (cv * (Util_cvToRate_c1[static_cast<uint32_t>(index)] + (Util_cvToRate_c2[static_cast<uint32_t>(index)] * cv))));
}

static_inline float Util_pitchToCv(float pitch) {
   return (0.00833333333333f * (-24.0f + pitch));
}

static_inline float Util_cvToperiod_raw_c0(int32_t index) {
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToperiod_raw_c1(int32_t index) {
   return Util_cvToperiod_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToperiod_raw_c2(int32_t index) {
   return Util_cvToperiod_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToperiod(float cv) {
   int32_t index = int_clip(float_to_int((cv * 31.0f)), 0, 31);
   return (Util_cvToperiod_c0[static_cast<uint32_t>(index)] + (cv * (Util_cvToperiod_c1[static_cast<uint32_t>(index)] + (Util_cvToperiod_c2[static_cast<uint32_t>(index)] * cv))));
}

static_inline float Util_cvTokHz_raw_c0(int32_t index) {
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_cvTokHz_raw_c1(int32_t index) {
   return Util_cvTokHz_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_cvTokHz_raw_c2(int32_t index) {
   return Util_cvTokHz_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_cvTokHz(float cv) {
   int32_t index = int_clip(float_to_int((cv * 31.0f)), 0, 31);
   return (Util_cvTokHz_c0[static_cast<uint32_t>(index)] + (cv * (Util_cvTokHz_c1[static_cast<uint32_t>(index)] + (Util_cvTokHz_c2[static_cast<uint32_t>(index)] * cv))));
}

int32_t Monocv_mono_noteOn(Monocv_mono_noteOn_type& _ctx, int32_t n);

int32_t Monocv_mono_noteOff(Monocv_mono_noteOn_type& _ctx, int32_t n);

static_inline bool Monocv_mono_isGateOn(Monocv_mono_noteOn_type& _ctx) {
   return (_ctx.count > 0);
}

void Monocv_process(Monocv_process_type& _ctx, int32_t c);

void Monocv_noteOn(Monocv_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel);

static_inline void Monocv_noteOff(Monocv_process_type& _ctx, int32_t note, int32_t channel) {
   if (_ctx.channel_in == channel) {
      _ctx.active_note = Monocv_mono_noteOff(_ctx.notes_a7d6, note);
   }
}

static_inline void Monocv_controlChange(Monocv_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Monocv_default(Monocv_process_type& _ctx) {
}


#endif // MONOCV_H
