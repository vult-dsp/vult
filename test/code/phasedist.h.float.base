/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef PHASEDIST_H
#define PHASEDIST_H

#include "vultin.h"
#include "phasedist.tables.h"

typedef struct Phasedist_smooth_type {
   float x;
} Phasedist_smooth_type;

typedef struct Phasedist_change_type {
   float pre_x;
} Phasedist_change_type;

typedef struct Phasedist_phasor_type {
   Phasedist_change_type inst_1e817;
   float phase;
   float rate;
} Phasedist_phasor_type;

typedef struct Phasedist_process_type {
   float detune;
   Phasedist_phasor_type inst_117e9;
   Phasedist_smooth_type inst_275e9;
   Phasedist_phasor_type inst_317e9;
   Phasedist_smooth_type inst_475e9;
   float pitch;
   float pre_phase1;
   float volume;
} Phasedist_process_type;

typedef struct Phasedist_process_type Phasedist_noteOn_type;

typedef struct Phasedist_process_type Phasedist_noteOff_type;

typedef struct Phasedist_process_type Phasedist_controlChange_type;

typedef struct Phasedist_process_type Phasedist_default_type;

static_inline void Phasedist_smooth_type_init(Phasedist_smooth_type& _ctx) {
   _ctx.x = 0.0f;
}

static_inline void Phasedist_change_type_init(Phasedist_change_type& _ctx) {
   _ctx.pre_x = 0.0f;
}

static_inline void Phasedist_phasor_type_init(Phasedist_phasor_type& _ctx) {
   Phasedist_change_type_init(_ctx.inst_1e817);
   _ctx.phase = 0.0f;
   _ctx.rate = 0.0f;
}

void Phasedist_process_type_init(Phasedist_process_type& _ctx);

static_inline void Phasedist_noteOn_type_init(Phasedist_noteOn_type& _ctx) {
   Phasedist_process_type_init(_ctx);
}

static_inline void Phasedist_noteOff_type_init(Phasedist_noteOff_type& _ctx) {
   Phasedist_process_type_init(_ctx);
}

static_inline void Phasedist_controlChange_type_init(Phasedist_controlChange_type& _ctx) {
   Phasedist_process_type_init(_ctx);
}

static_inline void Phasedist_default_type_init(Phasedist_default_type& _ctx) {
   Phasedist_process_type_init(_ctx);
}

static_inline float Phasedist_smooth(Phasedist_smooth_type& _ctx, float input) {
   _ctx.x = 0.005f * (input + (- _ctx.x)) + _ctx.x;
   return _ctx.x;
}

static_inline bool Phasedist_change(Phasedist_change_type& _ctx, float x) {
   bool v = _ctx.pre_x != x;
   _ctx.pre_x = x;
   return v;
}

static_inline float Phasedist_pitchToRate(float d) {
   return 0.000185f * expf(0.057762f * d);
}

float Phasedist_phasor(Phasedist_phasor_type& _ctx, float pitch, bool reset);

static_inline float Phasedist_process(Phasedist_process_type& _ctx, float input) {
   float phase1 = Phasedist_phasor(_ctx.inst_117e9, _ctx.pitch, false);
   float comp = 1.0f + (- phase1);
   bool reset = (- phase1) + _ctx.pre_phase1 > 0.5f;
   _ctx.pre_phase1 = phase1;
   float phase2 = Phasedist_phasor(_ctx.inst_317e9, 32.0f * Phasedist_smooth(_ctx.inst_275e9, _ctx.detune) + _ctx.pitch, reset);
   float sine = sinf(6.283185f * phase2);
   return comp * sine * Phasedist_smooth(_ctx.inst_475e9, _ctx.volume);
}

static_inline void Phasedist_noteOn(Phasedist_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
   _ctx.pitch = int_to_float(note);
}

static_inline void Phasedist_noteOff(Phasedist_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Phasedist_controlChange(Phasedist_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
   if (control == 30) {
      _ctx.volume = 0.007874f * int_to_float(value);
   }
   if (control == 31) {
      _ctx.detune = 0.007874f * int_to_float(value);
   }
}

static_inline void Phasedist_default(Phasedist_process_type& _ctx) {
   _ctx.volume = 1.0f;
   _ctx.pitch = 45.0f;
   _ctx.detune = 0.0f;
}


#endif // PHASEDIST_H
