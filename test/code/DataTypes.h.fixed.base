/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef DATATYPES_H
#define DATATYPES_H

#include "vultin.h"
#include "DataTypes.tables.h"

typedef struct DataTypes_point {
   fix16_t x;
   fix16_t y;
} DataTypes_point;

typedef struct DataTypes_test2_type {
   DataTypes_point p2;
   DataTypes_point result;
} DataTypes_test2_type;

static_inline void DataTypes_point_init(DataTypes_point& _ctx) {
   _ctx.x = 0x0 /* 0.000000 */;
   _ctx.y = 0x0 /* 0.000000 */;
}

static_inline void DataTypes_test2_type_init(DataTypes_test2_type& _ctx) {
   DataTypes_point_init(_ctx.p2);
   DataTypes_point_init(_ctx.result);
}

static_inline DataTypes_point DataTypes_addPoint1(const DataTypes_point& p1, const DataTypes_point& p2) {
   DataTypes_point p3;
   DataTypes_point_init(p3);
   p3.x = p1.x + p2.x;
   p3.y = p1.y + p2.y;
   return p3;
}

static_inline void DataTypes_addPoint2(const DataTypes_point& p1, const DataTypes_point& p2, DataTypes_point& result) {
   result.x = p1.x + p2.x;
   result.y = p1.y + p2.y;
}

static_inline void DataTypes_test1() {
   DataTypes_point p1;
   DataTypes_point_init(p1);
   DataTypes_point p2;
   DataTypes_point_init(p2);
   DataTypes_point result = DataTypes_addPoint1(p1, p2);
   DataTypes_addPoint2(p1, p2, result);
}

static_inline void DataTypes_test2(DataTypes_test2_type& _ctx) {
   DataTypes_point p1;
   DataTypes_point_init(p1);
   _ctx.result = DataTypes_addPoint1(p1, _ctx.p2);
}


#endif // DATATYPES_H
