/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */

#include "tricore.h"

void Tricore_process_type_init(Tricore_process_type& _ctx) {
   _ctx.direction = false;
   Util_change_type_init(_ctx.inst_1b03c);
   Util_edge_type_init(_ctx.inst_2043c);
   Util_edge_type_init(_ctx.inst_3043c);
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.reset_phase = 0x0 /* 0.000000 */;
   _ctx.reset_state = false;
}

fix16_t Tricore_process(Tricore_process_type& _ctx, fix16_t cv, fix16_t reset, fix16_t disable) {
   fix16_t out = 0x0 /* 0.000000 */;
   if (Util_change(_ctx.inst_1b03c, cv)) {
      _ctx.rate = fix_mul(0x40000 /* 4.000000 */, Util_cvToRate_1024(cv));
   }
   fix16_t new_phase = 0.0f;
   fix16_t _if_temp_0 = 0.0f;
   if (_ctx.direction) {
      _if_temp_0 = _ctx.rate;
   }
   else {
      _if_temp_0 = (- _ctx.rate);
   }
   new_phase = (_if_temp_0 + _ctx.phase);
   bool bdisable = (disable > 0x8000 /* 0.500000 */);
   if (Util_edge(_ctx.inst_2043c, (reset > 0x0 /* 0.000000 */)) || Util_edge(_ctx.inst_3043c, bdisable)) {
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0x0 /* 0.000000 */;
   }
   if (new_phase > 0x4000000 /* 1024.000000 */) {
      new_phase = (0x8000000 /* 2048.000000 */ + (- new_phase));
      _ctx.direction = false;
   }
   else {
      if (new_phase < -0x4000000 /* -1024.000000 */) {
         _ctx.direction = true;
         new_phase = (0x0 /* 0.000000 */ + new_phase);
      }
   }
   if (bdisable) {
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else {
      _ctx.phase = new_phase;
   }
   if (_ctx.reset_state) {
      if ((fix_abs(_ctx.reset_phase) > 0xa0000 /* 10.000000 */) || bdisable) {
         fix16_t reset_speed = 0.0f;
         if (bdisable) {
            reset_speed = 0x28f /* 0.010000 */;
         }
         else {
            reset_speed = 0x8000 /* 0.500000 */;
         }
         _ctx.reset_phase = ((- fix_mul(reset_speed, _ctx.reset_phase)) + _ctx.reset_phase);
      }
      else {
         if (_ctx.reset_phase > 0xa0000 /* 10.000000 */) {
            _ctx.reset_phase = _ctx.reset_phase;
         }
         else {
            _ctx.reset_phase = 0x0 /* 0.000000 */;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = (out + _ctx.phase);
   return fix_mul(0x40 /* 0.000977 */, out);
}

