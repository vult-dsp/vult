/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef ARRAY_DEFINED_TYPE_H
#define ARRAY_DEFINED_TYPE_H

#include "vultin.h"
#include "array_defined_type.tables.h"

typedef struct Array_defined_type_dot {
   float x;
   float y;
} Array_defined_type_dot;

typedef struct Array_defined_type_foo_type {
   std::array<Array_defined_type_dot, 12> p1;
} Array_defined_type_foo_type;

typedef struct Array_defined_type_process_type {
   Array_defined_type_foo_type inst_1c76a;
} Array_defined_type_process_type;

typedef struct Array_defined_type_process_type Array_defined_type_noteOn_type;

typedef struct Array_defined_type_process_type Array_defined_type_noteOff_type;

typedef struct Array_defined_type_process_type Array_defined_type_controlChange_type;

typedef struct Array_defined_type_process_type Array_defined_type_default_type;

static_inline void Array_defined_type_dot_init(Array_defined_type_dot& _ctx) {
   _ctx.x = 0.0f;
   _ctx.y = 0.0f;
}

static_inline void Array_defined_type_foo_type_init(Array_defined_type_foo_type& _ctx) {
   int32_t i_0 = 0;
   while (i_0 < 12) {
      Array_defined_type_dot_init(_ctx.p1[static_cast<uint32_t>(i_0)]);
      i_0 = 1 + i_0;
   }
}

static_inline void Array_defined_type_process_type_init(Array_defined_type_process_type& _ctx) {
   Array_defined_type_foo_type_init(_ctx.inst_1c76a);
}

static_inline void Array_defined_type_noteOn_type_init(Array_defined_type_noteOn_type& _ctx) {
   Array_defined_type_process_type_init(_ctx);
}

static_inline void Array_defined_type_noteOff_type_init(Array_defined_type_noteOff_type& _ctx) {
   Array_defined_type_process_type_init(_ctx);
}

static_inline void Array_defined_type_controlChange_type_init(Array_defined_type_controlChange_type& _ctx) {
   Array_defined_type_process_type_init(_ctx);
}

static_inline void Array_defined_type_default_type_init(Array_defined_type_default_type& _ctx) {
   Array_defined_type_process_type_init(_ctx);
}

static_inline void Array_defined_type_foo(Array_defined_type_foo_type& _ctx) {
}

static_inline float Array_defined_type_process(Array_defined_type_process_type& _ctx, float input) {
   Array_defined_type_foo(_ctx.inst_1c76a);
   return input;
}

static_inline void Array_defined_type_noteOn(Array_defined_type_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Array_defined_type_noteOff(Array_defined_type_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Array_defined_type_controlChange(Array_defined_type_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Array_defined_type_default(Array_defined_type_process_type& _ctx) {
}


#endif // ARRAY_DEFINED_TYPE_H
