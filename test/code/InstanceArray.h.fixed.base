/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef INSTANCEARRAY_H
#define INSTANCEARRAY_H

#include "vultin.h"
#include "InstanceArray.tables.h"

typedef struct InstanceArray_counter_type {
   fix16_t total;
} InstanceArray_counter_type;

typedef struct InstanceArray_test1_type {
   std::array<InstanceArray_counter_type, 4> instances;
} InstanceArray_test1_type;

typedef struct InstanceArray_test2_type {
   InstanceArray_counter_type case1;
   InstanceArray_counter_type case2;
} InstanceArray_test2_type;

static_inline void InstanceArray_counter_type_init(InstanceArray_counter_type& _ctx) {
   _ctx.total = 0x0 /* 0.000000 */;
}

static_inline void InstanceArray_test1_type_init(InstanceArray_test1_type& _ctx) {
   int32_t i_0 = 0;
   while (i_0 < 4) {
      InstanceArray_counter_type_init(_ctx.instances[static_cast<uint32_t>(i_0)]);
      i_0 = 1 + i_0;
   }
}

static_inline void InstanceArray_test2_type_init(InstanceArray_test2_type& _ctx) {
   InstanceArray_counter_type_init(_ctx.case1);
   InstanceArray_counter_type_init(_ctx.case2);
}

static_inline fix16_t InstanceArray_counter(InstanceArray_counter_type& _ctx) {
   _ctx.total = 0x10000 /* 1.000000 */ + _ctx.total;
   return _ctx.total;
}

fix16_t InstanceArray_test1(InstanceArray_test1_type& _ctx);

static_inline void InstanceArray_test2(InstanceArray_test2_type& _ctx) {
   InstanceArray_counter(_ctx.case1);
   InstanceArray_counter(_ctx.case2);
}


#endif // INSTANCEARRAY_H
