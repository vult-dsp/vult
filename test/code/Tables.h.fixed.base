/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef TABLES_H
#define TABLES_H

#include "vultin.h"
#include "Tables.tables.h"

static_inline fix16_t Tables_sineTable1_raw_c0(int32_t index) {
   return Tables_sineTable1_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable1_raw_c1(int32_t index) {
   return Tables_sineTable1_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable1_raw_c2(int32_t index) {
   return Tables_sineTable1_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable1(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul(x, 0x1f0000 /* 31.000000 */)), 0, 31);
   return Tables_sineTable1_c0[static_cast<uint32_t>(index)] + fix_mul(x, Tables_sineTable1_c1[static_cast<uint32_t>(index)] + fix_mul(Tables_sineTable1_c2[static_cast<uint32_t>(index)], x));
}

static_inline fix16_t Tables_sineTable2_raw_c0(int32_t index) {
   return Tables_sineTable2_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable2_raw_c1(int32_t index) {
   return Tables_sineTable2_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable2(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul(x, 0x1f0000 /* 31.000000 */)), 0, 31);
   return Tables_sineTable2_c0[static_cast<uint32_t>(index)] + fix_mul(x, Tables_sineTable2_c1[static_cast<uint32_t>(index)]);
}

static_inline fix16_t Tables_sineTable3_raw_c0(int32_t index) {
   return Tables_sineTable3_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable3_raw_c1(int32_t index) {
   return Tables_sineTable3_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable3(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul(x, 0x1f0000 /* 31.000000 */)), 0, 31);
   return Tables_sineTable3_c0[static_cast<uint32_t>(index)] + fix_mul(x, Tables_sineTable3_c1[static_cast<uint32_t>(index)]);
}

static_inline fix16_t Tables_power2(int32_t x) {
   return Tables_power2_table[static_cast<uint32_t>(int_clip(x, -4, 4) + 4)];
}

static_inline int32_t Tables_square(int32_t x) {
   return Tables_square_table[static_cast<uint32_t>(int_clip(x, -4, 4) + 4)];
}


#endif // TABLES_H
