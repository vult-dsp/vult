/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef TABLES_H
#define TABLES_H

#include "vultin.h"
#include "Tables.tables.h"

static_inline fix16_t Tables_sineTable1_raw_c0(int32_t index) {
   return Tables_sineTable1_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable1_raw_c1(int32_t index) {
   return Tables_sineTable1_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable1(fix16_t x) {
   fix16_t value = fix_clip((x << 5), 0x0 /* 0.000000 */, 0x200000 /* 32.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Tables_sineTable1_c0[static_cast<uint32_t>(index)] + fix_mul(Tables_sineTable1_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline fix16_t Tables_sineTable2_raw_c0(int32_t index) {
   return Tables_sineTable2_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable2_raw_c1(int32_t index) {
   return Tables_sineTable2_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable2(fix16_t x) {
   fix16_t value = fix_clip((x << 5), 0x0 /* 0.000000 */, 0x200000 /* 32.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Tables_sineTable2_c0[static_cast<uint32_t>(index)] + fix_mul(Tables_sineTable2_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline fix16_t Tables_sineTable3_raw_c0(int32_t index) {
   return Tables_sineTable3_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable3_raw_c1(int32_t index) {
   return Tables_sineTable3_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_sineTable3(fix16_t x) {
   fix16_t value = fix_clip((x << 5), 0x0 /* 0.000000 */, 0x200000 /* 32.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Tables_sineTable3_c0[static_cast<uint32_t>(index)] + fix_mul(Tables_sineTable3_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline fix16_t Tables_power2(int32_t x) {
   return Tables_power2_table[static_cast<uint32_t>(int_clip(x, -4, 4) + 4)];
}

static_inline int32_t Tables_square(int32_t x) {
   return Tables_square_table[static_cast<uint32_t>(int_clip(x, -4, 4) + 4)];
}


#endif // TABLES_H
