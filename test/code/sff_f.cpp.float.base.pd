/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */

#include "sff_f.h"


extern "C" {

static t_class *Sff_f_process_tilde_class;

typedef struct _Sff_f_process_tilde {
   t_object  x_obj;
   float dummy;
   float data;
} t_Sff_f_process_tilde;

t_int *Sff_f_process_tilde_perform(t_int *w)
{
   t_Sff_f_process_tilde *x = (t_Sff_f_process_tilde *)(w[1]);

   t_sample *in_0 = (t_sample *)(w[2]);
   t_sample *in_1 = (t_sample *)(w[3]);
   t_sample *out_0 = (t_sample *)(w[4]);

   int n = (int)(w[5]);

   while (n--) {
   float ret =  Sff_f_process(*(in_0++), *(in_1++));
   *(out_0++) = ret;
   }

   return (w+6);
}

void Sff_f_process_tilde_dsp(t_Sff_f_process_tilde *x, t_signal **sp)
{
   dsp_add(Sff_f_process_tilde_perform, 5,
   x,
   sp[0]->s_vec,
   sp[1]->s_vec,
   sp[2]->s_vec,

   sp[0]->s_n);
}

void *Sff_f_process_tilde_new()
{
   t_Sff_f_process_tilde *x = (t_Sff_f_process_tilde *)pd_new(Sff_f_process_tilde_class);

   

   inlet_new(&x->x_obj, &x->x_obj.ob_pd, &s_signal, &s_signal);

   outlet_new(&x->x_obj, &s_signal);

   return (void *)x;
}

void Sff_f_process_tilde_delete(t_Sff_f_process_tilde *x){

}

void Sff_f_process_tilde_setup(void) {
   Sff_f_process_tilde_class = class_new(gensym("Sff_f_process~"),
      (t_newmethod)Sff_f_process_tilde_new, // constructor function
      (t_method)Sff_f_process_tilde_delete, // destructor function
      sizeof(t_Sff_f_process_tilde), // size of the object
      CLASS_DEFAULT, // type of object
      A_NULL); // arguments passed

   class_addmethod(Sff_f_process_tilde_class, (t_method)Sff_f_process_tilde_dsp, gensym("dsp"), A_NULL);
   CLASS_MAINSIGNALIN(Sff_f_process_tilde_class, t_Sff_f_process_tilde, dummy);
}

} // extern "C"

void sff_f_setup() {

   Sff_f_process_tilde_setup();
}