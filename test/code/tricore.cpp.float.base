/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */

#include "tricore.h"

void Tricore_process_type_init(Tricore_process_type& _ctx) {
   _ctx.direction = false;
   Util_change_type_init(_ctx.inst_1b03c);
   Util_edge_type_init(_ctx.inst_2043c);
   Util_edge_type_init(_ctx.inst_3043c);
   _ctx.phase = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.reset_phase = 0.0f;
   _ctx.reset_state = false;
   Tricore_default(_ctx);
}

float Tricore_process(Tricore_process_type& _ctx, float cv, float reset, float disable) {
   float out = 0.0f;
   if (Util_change(_ctx.inst_1b03c, cv)) {
      _ctx.rate = 4.0f * Util_cvToRate_1024(cv);
   }
   float new_phase = 0.0f;
   float _if_temp_0 = 0.0f;
   if (_ctx.direction) {
      _if_temp_0 = _ctx.rate;
   }
   else {
      _if_temp_0 = (- _ctx.rate);
   }
   new_phase = _if_temp_0 + _ctx.phase;
   bool bdisable = disable > 0.5f;
   if (Util_edge(_ctx.inst_2043c, reset > 0.0f) || Util_edge(_ctx.inst_3043c, bdisable)) {
      _ctx.reset_phase = _ctx.phase;
      _ctx.reset_state = true;
      new_phase = 0.0f;
   }
   if (new_phase > 1024.0f) {
      new_phase = 2048.0f + (- new_phase);
      _ctx.direction = false;
   }
   else {
      if (new_phase < -1024.0f) {
         _ctx.direction = true;
         new_phase = new_phase;
      }
   }
   if (bdisable) {
      _ctx.phase = 0.0f;
   }
   else {
      _ctx.phase = new_phase;
   }
   if (_ctx.reset_state) {
      if (fabsf(_ctx.reset_phase) > 10.0f || bdisable) {
         float reset_speed = 0.0f;
         if (bdisable) {
            reset_speed = 0.01f;
         }
         else {
            reset_speed = 0.5f;
         }
         _ctx.reset_phase = (- reset_speed * _ctx.reset_phase) + _ctx.reset_phase;
      }
      else {
         if (_ctx.reset_phase > 10.0f) {
            _ctx.reset_phase = _ctx.reset_phase;
         }
         else {
            _ctx.reset_phase = 0.0f;
         }
         _ctx.reset_state = false;
         _ctx.direction = true;
      }
      out = _ctx.reset_phase;
   }
   out = out + _ctx.phase;
   return 0.00098f * out;
}

