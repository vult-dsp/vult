/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef SATURATE_SOFT_H
#define SATURATE_SOFT_H

#include "vultin.h"
#include "saturate_soft.tables.h"

static_inline fix16_t Saturate_soft_tanh_table_raw_c0(int32_t index) {
   return Saturate_soft_tanh_table_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_soft_tanh_table_raw_c1(int32_t index) {
   return Saturate_soft_tanh_table_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_soft_tanh_table_raw_c2(int32_t index) {
   return Saturate_soft_tanh_table_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_soft_tanh_table(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul((x - -1572864), 327680)), 0, 240);
   return Saturate_soft_tanh_table_c0[static_cast<uint32_t>(index)] + fix_mul(x, (Saturate_soft_tanh_table_c1[static_cast<uint32_t>(index)] + fix_mul(Saturate_soft_tanh_table_c2[static_cast<uint32_t>(index)], x)));
}

static_inline fix16_t Saturate_soft_process(fix16_t x) {
   return Saturate_soft_tanh_table(x);
}

static_inline void Saturate_soft_noteOn(int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Saturate_soft_noteOff(int32_t note, int32_t channel) {
}

static_inline void Saturate_soft_controlChange(int32_t control, int32_t value, int32_t channel) {
}

static_inline void Saturate_soft_default() {
}


#endif // SATURATE_SOFT_H
