
function ifExpressionValue(cond,then_,else_) if cond then return then_ else return else_ end end
function ifExpression(cond,then_,else_) if cond then return then_() else return else_() end end
function eps()              return 1e-18 end
function pi()               return 3.1415926535897932384 end
function random()           return math.random() end
function irandom()          return math.floor(math.random() * 4294967296) end
function clip(x,low,high)   if x > high then return high else if x < low then return low else return x end end end
function real(x)            return x end
function int(x)             local int_part,_ = math.modf(x) return int_part end
function sin(x)             return math.sin(x) end
function cos(x)             return math.cos(x) end
function abs(x)             return math.abs(x) end
function exp(x)             return math.exp(x) end
function floor(x)           return math.floor(x) end
function tan(x)             return math.tan(x) end
function tanh(x)            return math.tanh(x) end
function sqrt(x)            return x end
function set(a, i, v)       a[i+1]=v end
function get(a, i)          return a[i+1] end
function intDiv(a, b)       return math.floor(a / b) end

function Gates_gates_noteOn_type_alloc()
   local _ctx = {};
   _ctx.Gates_gates_state_ret_0 = 0.
   _ctx.Gates_gates_state_ret_1 = 0.
   _ctx.Gates_gates_state_ret_2 = 0.
   _ctx.Gates_gates_state_ret_3 = 0.
   _ctx.Gates_gates_state_ret_4 = 0.
   _ctx.Gates_gates_state_ret_5 = 0.
   _ctx.Gates_gates_state_ret_6 = 0.
   _ctx.Gates_gates_state_ret_7 = 0.
   local i_0 = 0
   local temp = {0, 0, 0, 0, 0, 0, 0, 0}
   while (i_0 < 8) do
      do
         temp[i_0 + 1] = 0
         i_0 = (1 + i_0)
      end
   end
   _ctx.vel = temp
   return _ctx
end

function Gates_gates_noteOff_type_alloc(_ctx)
   return Gates_gates_noteOn_type_alloc()
end

function Gates_gates_state_type_alloc(_ctx)
   return Gates_gates_noteOn_type_alloc()
end

function Gates_process_type_alloc()
   local _ctx = {};
   _ctx.Gates_process_ret_0 = 0.
   _ctx.Gates_process_ret_1 = 0.
   _ctx.Gates_process_ret_2 = 0.
   _ctx.Gates_process_ret_3 = 0.
   _ctx.Gates_process_ret_4 = 0.
   _ctx.Gates_process_ret_5 = 0.
   _ctx.Gates_process_ret_6 = 0.
   _ctx.Gates_process_ret_7 = 0.
   _ctx.channel_in = 0
   _ctx.gates = Gates_gates_noteOn_type_alloc()
   return _ctx
end

function Gates_noteOn_type_alloc(_ctx)
   return Gates_process_type_alloc()
end

function Gates_noteOff_type_alloc(_ctx)
   return Gates_process_type_alloc()
end

function Gates_controlChange_type_alloc(_ctx)
   return Gates_process_type_alloc()
end

function Gates_default_type_alloc(_ctx)
   return Gates_process_type_alloc()
end

function Gates_velToCV(vel)
   return (0.007874 * real(vel))
end

function Gates_gates_noteOn(_ctx, note, velocity)
   if ((note >= 36) and (note <= 43)) then
      do
         local n = (-36 + note)
         _ctx.vel[n + 1] = velocity
      end
   end
end

function Gates_gates_noteOff(_ctx, note)
   if ((note >= 36) and (note <= 43)) then
      do
         local n = (-36 + note)
         _ctx.vel[n + 1] = 0
      end
   end
end

function Gates_gates_state(_ctx)
   local vel1 = Gates_velToCV(_ctx.vel[0 + 1])
   local vel2 = Gates_velToCV(_ctx.vel[1 + 1])
   local vel3 = Gates_velToCV(_ctx.vel[2 + 1])
   local vel4 = Gates_velToCV(_ctx.vel[3 + 1])
   local vel5 = Gates_velToCV(_ctx.vel[4 + 1])
   local vel6 = Gates_velToCV(_ctx.vel[5 + 1])
   local vel7 = Gates_velToCV(_ctx.vel[6 + 1])
   local vel8 = Gates_velToCV(_ctx.vel[7 + 1])
   _ctx.Gates_gates_state_ret_0 = vel1
   _ctx.Gates_gates_state_ret_1 = vel2
   _ctx.Gates_gates_state_ret_2 = vel3
   _ctx.Gates_gates_state_ret_3 = vel4
   _ctx.Gates_gates_state_ret_4 = vel5
   _ctx.Gates_gates_state_ret_5 = vel6
   _ctx.Gates_gates_state_ret_6 = vel7
   _ctx.Gates_gates_state_ret_7 = vel8
   return 
end

function Gates_process(_ctx, c)
   _ctx.channel_in = c
   Gates_gates_state(_ctx.gates)
   local _call_temp_0 = _ctx.gates.Gates_gates_state_ret_0
   local _call_temp_1 = _ctx.gates.Gates_gates_state_ret_1
   local _call_temp_2 = _ctx.gates.Gates_gates_state_ret_2
   local _call_temp_3 = _ctx.gates.Gates_gates_state_ret_3
   local _call_temp_4 = _ctx.gates.Gates_gates_state_ret_4
   local _call_temp_5 = _ctx.gates.Gates_gates_state_ret_5
   local _call_temp_6 = _ctx.gates.Gates_gates_state_ret_6
   local _call_temp_7 = _ctx.gates.Gates_gates_state_ret_7
   _ctx.Gates_process_ret_0 = _call_temp_0
   _ctx.Gates_process_ret_1 = _call_temp_1
   _ctx.Gates_process_ret_2 = _call_temp_2
   _ctx.Gates_process_ret_3 = _call_temp_3
   _ctx.Gates_process_ret_4 = _call_temp_4
   _ctx.Gates_process_ret_5 = _call_temp_5
   _ctx.Gates_process_ret_6 = _call_temp_6
   _ctx.Gates_process_ret_7 = _call_temp_7
   return 
end

function Gates_noteOn(_ctx, note, velocity, channel)
   if (_ctx.channel_in == channel) then
      Gates_gates_noteOn(_ctx.gates, note, velocity)
   end
end

function Gates_noteOff(_ctx, note, channel)
   if (_ctx.channel_in == channel) then
      Gates_gates_noteOff(_ctx.gates, note)
   end
end

function Gates_controlChange(_ctx, control, value, channel)
end

function Gates_default(_ctx)
end

