/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */

#include "polycv.h"

void Polycv_poly_noteOn_type_init(Polycv_poly_noteOn_type& _ctx) {
   _ctx.Polycv_polyState_ret_0 = 0.0f;
   _ctx.Polycv_polyState_ret_1 = 0.0f;
   _ctx.Polycv_polyState_ret_10 = 0.0f;
   _ctx.Polycv_polyState_ret_11 = 0.0f;
   _ctx.Polycv_polyState_ret_2 = 0.0f;
   _ctx.Polycv_polyState_ret_3 = 0.0f;
   _ctx.Polycv_polyState_ret_4 = 0.0f;
   _ctx.Polycv_polyState_ret_5 = 0.0f;
   _ctx.Polycv_polyState_ret_6 = 0.0f;
   _ctx.Polycv_polyState_ret_7 = 0.0f;
   _ctx.Polycv_polyState_ret_8 = 0.0f;
   _ctx.Polycv_polyState_ret_9 = 0.0f;
   int32_t i_0 = 0;
   while ((i_0 < 4)) {
      _ctx.notes[i_0] = 0;
      i_0 = (1 + i_0);
   }
   int32_t i_1 = 0;
   while ((i_1 < 4)) {
      _ctx.vel[i_1] = 0;
      i_1 = (1 + i_1);
   }
}

void Polycv_process_type_init(Polycv_process_type& _ctx) {
   _ctx.Polycv_process_ret_0 = 0.0f;
   _ctx.Polycv_process_ret_1 = 0.0f;
   _ctx.Polycv_process_ret_10 = 0.0f;
   _ctx.Polycv_process_ret_11 = 0.0f;
   _ctx.Polycv_process_ret_2 = 0.0f;
   _ctx.Polycv_process_ret_3 = 0.0f;
   _ctx.Polycv_process_ret_4 = 0.0f;
   _ctx.Polycv_process_ret_5 = 0.0f;
   _ctx.Polycv_process_ret_6 = 0.0f;
   _ctx.Polycv_process_ret_7 = 0.0f;
   _ctx.Polycv_process_ret_8 = 0.0f;
   _ctx.Polycv_process_ret_9 = 0.0f;
   _ctx.channel_in = 0;
   Polycv_poly_noteOn_type_init(_ctx.poly_a0e8);
}

void Polycv_poly_noteOn(Polycv_poly_noteOn_type& _ctx, int32_t note, int32_t velocity) {
   int32_t i = 0;
   bool found = false;
   while (((i < 4) && (found == false))) {
      if (int_get(_ctx.vel, i) == 0) {
         int_set(_ctx.notes, i, note);
         int_set(_ctx.vel, i, velocity);
         found = true;
      }
      i = (1 + i);
   }
}

void Polycv_poly_noteOff(Polycv_poly_noteOn_type& _ctx, int32_t note) {
   int32_t i = 0;
   bool found = false;
   while (((i < 4) && (found == false))) {
      if (int_get(_ctx.notes, i) == note) {
         int_set(_ctx.vel, i, 0);
         found = true;
      }
      i = (1 + i);
   }
}

void Polycv_polyState(Polycv_poly_noteOn_type& _ctx) {
   float note1 = Util_pitchToCv(int_to_float(int_get(_ctx.notes, 0)));
   float note2 = Util_pitchToCv(int_to_float(int_get(_ctx.notes, 1)));
   float note3 = Util_pitchToCv(int_to_float(int_get(_ctx.notes, 2)));
   float note4 = Util_pitchToCv(int_to_float(int_get(_ctx.notes, 3)));
   float vel1 = Polycv_velToCV(int_get(_ctx.vel, 0));
   float vel2 = Polycv_velToCV(int_get(_ctx.vel, 1));
   float vel3 = Polycv_velToCV(int_get(_ctx.vel, 2));
   float vel4 = Polycv_velToCV(int_get(_ctx.vel, 3));
   float gate1 = Polycv_velToGate(int_get(_ctx.vel, 0));
   float gate2 = Polycv_velToGate(int_get(_ctx.vel, 1));
   float gate3 = Polycv_velToGate(int_get(_ctx.vel, 2));
   float gate4 = Polycv_velToGate(int_get(_ctx.vel, 3));
   _ctx.Polycv_polyState_ret_0 = note1;
   _ctx.Polycv_polyState_ret_1 = vel1;
   _ctx.Polycv_polyState_ret_2 = gate1;
   _ctx.Polycv_polyState_ret_3 = note2;
   _ctx.Polycv_polyState_ret_4 = vel2;
   _ctx.Polycv_polyState_ret_5 = gate2;
   _ctx.Polycv_polyState_ret_6 = note3;
   _ctx.Polycv_polyState_ret_7 = vel3;
   _ctx.Polycv_polyState_ret_8 = gate3;
   _ctx.Polycv_polyState_ret_9 = note4;
   _ctx.Polycv_polyState_ret_10 = vel4;
   _ctx.Polycv_polyState_ret_11 = gate4;
   return ;
}

void Polycv_process(Polycv_process_type& _ctx, int32_t c) {
   _ctx.channel_in = c;
   float _call_temp_9 = 0.0f;
   float _call_temp_8 = 0.0f;
   float _call_temp_7 = 0.0f;
   float _call_temp_6 = 0.0f;
   float _call_temp_5 = 0.0f;
   float _call_temp_4 = 0.0f;
   float _call_temp_3 = 0.0f;
   float _call_temp_2 = 0.0f;
   float _call_temp_11 = 0.0f;
   float _call_temp_10 = 0.0f;
   float _call_temp_1 = 0.0f;
   float _call_temp_0 = 0.0f;
   Polycv_polyState(_ctx.poly_a0e8);
   _call_temp_0 = _ctx.poly_a0e8.Polycv_polyState_ret_0;
   _call_temp_1 = _ctx.poly_a0e8.Polycv_polyState_ret_1;
   _call_temp_2 = _ctx.poly_a0e8.Polycv_polyState_ret_2;
   _call_temp_3 = _ctx.poly_a0e8.Polycv_polyState_ret_3;
   _call_temp_4 = _ctx.poly_a0e8.Polycv_polyState_ret_4;
   _call_temp_5 = _ctx.poly_a0e8.Polycv_polyState_ret_5;
   _call_temp_6 = _ctx.poly_a0e8.Polycv_polyState_ret_6;
   _call_temp_7 = _ctx.poly_a0e8.Polycv_polyState_ret_7;
   _call_temp_8 = _ctx.poly_a0e8.Polycv_polyState_ret_8;
   _call_temp_9 = _ctx.poly_a0e8.Polycv_polyState_ret_9;
   _call_temp_10 = _ctx.poly_a0e8.Polycv_polyState_ret_10;
   _call_temp_11 = _ctx.poly_a0e8.Polycv_polyState_ret_11;
   _ctx.Polycv_process_ret_0 = _call_temp_0;
   _ctx.Polycv_process_ret_1 = _call_temp_1;
   _ctx.Polycv_process_ret_2 = _call_temp_2;
   _ctx.Polycv_process_ret_3 = _call_temp_3;
   _ctx.Polycv_process_ret_4 = _call_temp_4;
   _ctx.Polycv_process_ret_5 = _call_temp_5;
   _ctx.Polycv_process_ret_6 = _call_temp_6;
   _ctx.Polycv_process_ret_7 = _call_temp_7;
   _ctx.Polycv_process_ret_8 = _call_temp_8;
   _ctx.Polycv_process_ret_9 = _call_temp_9;
   _ctx.Polycv_process_ret_10 = _call_temp_10;
   _ctx.Polycv_process_ret_11 = _call_temp_11;
   return ;
}

