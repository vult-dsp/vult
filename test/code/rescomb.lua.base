
function ifExpressionValue(cond,then_,else_) if cond then return then_ else return else_ end end
function ifExpression(cond,then_,else_) if cond then return then_() else return else_() end end
function eps()              return 1e-18 end
function pi()               return 3.1415926535897932384 end
function random()           return math.random() end
function irandom()          return math.floor(math.random() * 4294967296) end
function clip(x,low,high)   if x > high then return high else if x < low then return low else return x end end end
function real(x)            return x end
function int(x)             local int_part,_ = math.modf(x) return int_part end
function sin(x)             return math.sin(x) end
function cos(x)             return math.cos(x) end
function abs(x)             return math.abs(x) end
function exp(x)             return math.exp(x) end
function floor(x)           return math.floor(x) end
function tan(x)             return math.tan(x) end
function tanh(x)            return math.tanh(x) end
function sqrt(x)            return x end
function set(a, i, v)       a[i+1]=v end
function get(a, i)          return a[i+1] end
function intDiv(a, b)       return math.floor(a / b) end

function Util_edge_type_alloc()
   local _ctx = {};
   _ctx.pre = false
   return _ctx
end

function Util_change_type_alloc()
   local _ctx = {};
   _ctx.pre_x = 0.
   return _ctx
end

function Util_dcblock_type_alloc()
   local _ctx = {};
   _ctx.x1 = 0.
   _ctx.y1 = 0.
   return _ctx
end

function Util_smooth_type_alloc()
   local _ctx = {};
   _ctx.x = 0.
   return _ctx
end

function Util_average2_type_alloc()
   local _ctx = {};
   _ctx.x0 = 0.
   return _ctx
end

function Rescomb_delay_type_alloc()
   local i_0 = 0
   local temp = {}
   local _ctx = {};
   while (i_0 < 675) do
      do
         temp[i_0 + 1] = 0.
         i_0 = (1 + i_0)
      end
   end
   _ctx.buffer = temp
   _ctx.write_pos = 0
   return _ctx
end

function Rescomb_do_type_alloc()
   local _ctx = {};
   _ctx.inst_1b000 = Util_change_type_alloc()
   _ctx.inst_26400 = Util_dcblock_type_alloc()
   _ctx.inst_3a900 = Rescomb_delay_type_alloc()
   _ctx.output = 0.
   _ctx.stone = 0.
   return _ctx
end

function Rescomb_process_type_alloc()
   local _ctx = {};
   _ctx.inst_100b6 = Rescomb_do_type_alloc()
   return _ctx
end

function Rescomb_noteOn_type_alloc(_ctx)
   return Rescomb_process_type_alloc()
end

function Rescomb_noteOff_type_alloc(_ctx)
   return Rescomb_process_type_alloc()
end

function Rescomb_controlChange_type_alloc(_ctx)
   return Rescomb_process_type_alloc()
end

function Rescomb_default_type_alloc(_ctx)
   return Rescomb_process_type_alloc()
end

local Saturate_soft_tanh_table_c0 = {-4.197917, -4.080174, -3.962795, -3.845833, -3.729342, -3.613374, -3.497986, -3.383231, -3.269167, -3.15585, -3.043337, -2.931687, -2.820957, -2.711207, -2.602495, -2.49488, -2.388423, -2.283182, -2.179218, -2.076589, -1.975354, -1.875573, -1.777303, -1.680603, -1.58553, -1.492139, -1.400488, -1.31063, -1.222618, -1.136505, -1.05234, -0.970175, -0.890055, -0.812026, -0.736133, -0.662416, -0.590915, -0.521666, -0.454705, -0.390063, -0.327768, -0.267847, -0.210323, -0.155216, -0.102541, -0.052312, -0.004539, 0.040774, 0.083623, 0.124011, 0.161943, 0.197429, 0.230482, 0.261122, 0.289369, 0.315249, 0.338794, 0.360037, 0.379017, 0.395777, 0.410364, 0.422828, 0.433225, 0.441614, 0.448055, 0.452616, 0.455366, 0.456378, 0.455726, 0.453491, 0.449753, 0.444597, 0.438107, 0.430373, 0.421483, 0.411528, 0.400601, 0.388794, 0.3762, 0.362912, 0.349023, 0.334626, 0.319811, 0.304668, 0.289285, 0.273749, 0.258143, 0.242548, 0.227041, 0.211699, 0.19659, 0.181782, 0.167337, 0.153314, 0.139765, 0.126737, 0.114275, 0.102416, 0.091191, 0.080627, 0.070745, 0.061559, 0.053079, 0.045308, 0.038244, 0.031879, 0.026199, 0.021186, 0.016816, 0.01306, 0.009885, 0.007253, 0.005122, 0.003447, 0.002177, 0.001261, 0.000644, 0.000269, 7.7e-05, 7e-06, 0., -8e-06, -7.8e-05, -0.00027, -0.000645, -0.001262, -0.002178, -0.003448, -0.005123, -0.007254, -0.009886, -0.013061, -0.016817, -0.021187, -0.0262, -0.03188, -0.038245, -0.045309, -0.05308, -0.06156, -0.070746, -0.080628, -0.091192, -0.102417, -0.114276, -0.126738, -0.139766, -0.153315, -0.167338, -0.181783, -0.196591, -0.2117, -0.227042, -0.242549, -0.258144, -0.27375, -0.289286, -0.304669, -0.319812, -0.334627, -0.349024, -0.362913, -0.376201, -0.388795, -0.400602, -0.411529, -0.421484, -0.430374, -0.438108, -0.444598, -0.449754, -0.453492, -0.455727, -0.456379, -0.455367, -0.452617, -0.448056, -0.441615, -0.433226, -0.422829, -0.410365, -0.395778, -0.379018, -0.360038, -0.338795, -0.31525, -0.28937, -0.261123, -0.230483, -0.19743, -0.161944, -0.124012, -0.083624, -0.040775, 0.004538, 0.052311, 0.10254, 0.155215, 0.210322, 0.267846, 0.327767, 0.390062, 0.454704, 0.521665, 0.590914, 0.662415, 0.736132, 0.812025, 0.890054, 0.970174, 1.052339, 1.136504, 1.222617, 1.310629, 1.400487, 1.492138, 1.585529, 1.680602, 1.777302, 1.875572, 1.975353, 2.076588, 2.179217, 2.283181, 2.388422, 2.494879, 2.602494, 2.711206, 2.820956, 2.931686, 3.043336, 3.155849, 3.269166, 3.38323, 3.497985, 3.613373, 3.729341, 3.845832, 3.962794, 4.080173, 4.197916}
local Saturate_soft_tanh_table_c1 = {0.676338, 0.686232, 0.696179, 0.706174, 0.716215, 0.726298, 0.736417, 0.74657, 0.756751, 0.766957, 0.777181, 0.78742, 0.797668, 0.80792, 0.818171, 0.828414, 0.838643, 0.848854, 0.859039, 0.869193, 0.879308, 0.889378, 0.899396, 0.909355, 0.919249, 0.929068, 0.938807, 0.948458, 0.958012, 0.967463, 0.976801, 0.98602, 0.995111, 1.004066, 1.012876, 1.021534, 1.030031, 1.038358, 1.046509, 1.054473, 1.062244, 1.069812, 1.077171, 1.084311, 1.091225, 1.097905, 1.104345, 1.110535, 1.11647, 1.122142, 1.127545, 1.132672, 1.137517, 1.142075, 1.14634, 1.150307, 1.153973, 1.157332, 1.160381, 1.163117, 1.165538, 1.167641, 1.169426, 1.17089, 1.172035, 1.17286, 1.173366, 1.173555, 1.17343, 1.172994, 1.172251, 1.171204, 1.16986, 1.168224, 1.166304, 1.164107, 1.161641, 1.158915, 1.155939, 1.152723, 1.149279, 1.145618, 1.141754, 1.137698, 1.133466, 1.12907, 1.124528, 1.119853, 1.115061, 1.110169, 1.105195, 1.100154, 1.095064, 1.089943, 1.084808, 1.079677, 1.074569, 1.069501, 1.064491, 1.059557, 1.054716, 1.049985, 1.045382, 1.040922, 1.036623, 1.032499, 1.028565, 1.024836, 1.021325, 1.018045, 1.015009, 1.012227, 1.009709, 1.007465, 1.005503, 1.003831, 1.002454, 1.001377, 1.000606, 1.000141, 0.999987, 1.000141, 1.000606, 1.001377, 1.002454, 1.003831, 1.005503, 1.007465, 1.009709, 1.012227, 1.015009, 1.018045, 1.021325, 1.024836, 1.028565, 1.032499, 1.036623, 1.040922, 1.045382, 1.049985, 1.054716, 1.059557, 1.064491, 1.069501, 1.074569, 1.079677, 1.084808, 1.089943, 1.095064, 1.100154, 1.105195, 1.110169, 1.115061, 1.119853, 1.124528, 1.12907, 1.133466, 1.137698, 1.141754, 1.145618, 1.149279, 1.152723, 1.155939, 1.158915, 1.161641, 1.164107, 1.166304, 1.168224, 1.16986, 1.171204, 1.172251, 1.172994, 1.17343, 1.173555, 1.173366, 1.17286, 1.172035, 1.17089, 1.169426, 1.167641, 1.165538, 1.163117, 1.160381, 1.157332, 1.153973, 1.150307, 1.14634, 1.142075, 1.137517, 1.132672, 1.127545, 1.122142, 1.11647, 1.110535, 1.104345, 1.097905, 1.091225, 1.084311, 1.077171, 1.069812, 1.062244, 1.054473, 1.046509, 1.038358, 1.030031, 1.021534, 1.012876, 1.004066, 0.995111, 0.98602, 0.976801, 0.967463, 0.958012, 0.948458, 0.938807, 0.929068, 0.919249, 0.909355, 0.899396, 0.889378, 0.879308, 0.869193, 0.859039, 0.848854, 0.838643, 0.828414, 0.818171, 0.80792, 0.797668, 0.78742, 0.777181, 0.766957, 0.756751, 0.74657, 0.736417, 0.726298, 0.716215, 0.706174, 0.696179, 0.686232, 0.676338}
local Saturate_soft_tanh_table_c2 = {0.010325, 0.010533, 0.010744, 0.010957, 0.011174, 0.011393, 0.011615, 0.011839, 0.012067, 0.012296, 0.012529, 0.012763, 0.013001, 0.01324, 0.013482, 0.013725, 0.013971, 0.014219, 0.014468, 0.014719, 0.014972, 0.015226, 0.015481, 0.015738, 0.015995, 0.016253, 0.016512, 0.016771, 0.01703, 0.01729, 0.017549, 0.017807, 0.018065, 0.018322, 0.018578, 0.018832, 0.019084, 0.019335, 0.019583, 0.019828, 0.02007, 0.020309, 0.020545, 0.020776, 0.021003, 0.021225, 0.021442, 0.021653, 0.021859, 0.022058, 0.022251, 0.022436, 0.022613, 0.022783, 0.022944, 0.023096, 0.023238, 0.023371, 0.023494, 0.023605, 0.023706, 0.023795, 0.023871, 0.023935, 0.023986, 0.024023, 0.024046, 0.024055, 0.024049, 0.024028, 0.023991, 0.023938, 0.023868, 0.023782, 0.023678, 0.023557, 0.023418, 0.023261, 0.023085, 0.02289, 0.022677, 0.022444, 0.022192, 0.02192, 0.021629, 0.021318, 0.020988, 0.020637, 0.020267, 0.019877, 0.019468, 0.019039, 0.01859, 0.018123, 0.017636, 0.017131, 0.016608, 0.016066, 0.015507, 0.014931, 0.014338, 0.013729, 0.013105, 0.012465, 0.011811, 0.011143, 0.010461, 0.009768, 0.009063, 0.008347, 0.007621, 0.006885, 0.006142, 0.005391, 0.004633, 0.003869, 0.003101, 0.002329, 0.001554, 0.000777, 0., -0.000778, -0.001555, -0.00233, -0.003102, -0.00387, -0.004634, -0.005392, -0.006143, -0.006886, -0.007622, -0.008348, -0.009064, -0.009769, -0.010462, -0.011144, -0.011812, -0.012466, -0.013106, -0.01373, -0.014339, -0.014932, -0.015508, -0.016067, -0.016609, -0.017132, -0.017637, -0.018124, -0.018591, -0.01904, -0.019469, -0.019878, -0.020268, -0.020638, -0.020989, -0.021319, -0.02163, -0.021921, -0.022193, -0.022445, -0.022678, -0.022891, -0.023086, -0.023262, -0.023419, -0.023558, -0.023679, -0.023783, -0.023869, -0.023939, -0.023992, -0.024029, -0.02405, -0.024056, -0.024047, -0.024024, -0.023987, -0.023936, -0.023872, -0.023796, -0.023707, -0.023606, -0.023495, -0.023372, -0.023239, -0.023097, -0.022945, -0.022784, -0.022614, -0.022437, -0.022252, -0.022059, -0.02186, -0.021654, -0.021443, -0.021226, -0.021004, -0.020777, -0.020546, -0.02031, -0.020071, -0.019829, -0.019584, -0.019336, -0.019085, -0.018833, -0.018579, -0.018323, -0.018066, -0.017808, -0.01755, -0.017291, -0.017031, -0.016772, -0.016513, -0.016254, -0.015996, -0.015739, -0.015482, -0.015227, -0.014973, -0.01472, -0.014469, -0.01422, -0.013972, -0.013726, -0.013483, -0.013241, -0.013002, -0.012764, -0.01253, -0.012297, -0.012068, -0.01184, -0.011616, -0.011394, -0.011175, -0.010958, -0.010745, -0.010534, -0.010326}
function Saturate_soft_tanh_table_raw_c0(index)
   return Saturate_soft_tanh_table_c0[index + 1]
end

function Saturate_soft_tanh_table_raw_c1(index)
   return Saturate_soft_tanh_table_c1[index + 1]
end

function Saturate_soft_tanh_table_raw_c2(index)
   return Saturate_soft_tanh_table_c2[index + 1]
end

function Saturate_soft_tanh_table(x)
   local index = int_clip(float_to_int(((x - -24.) * 5.)), 0, 240)
   return (Saturate_soft_tanh_table_c0[index + 1] + (x * (Saturate_soft_tanh_table_c1[index + 1] + (Saturate_soft_tanh_table_c2[index + 1] * x))))
end

function Saturate_soft_process(x)
   return Saturate_soft_tanh_table(x)
end

function Saturate_soft_noteOn(note, velocity, channel)
end

function Saturate_soft_noteOff(note, channel)
end

function Saturate_soft_controlChange(control, value, channel)
end

function Saturate_soft_default()
end

function Util_edge(_ctx, x)
   local ret = (x and (_ctx.pre == false))
   _ctx.pre = x
   return ret
end

function Util_change(_ctx, x)
   local v = (_ctx.pre_x ~= x)
   _ctx.pre_x = x
   return v
end

function Util_map(x, x0, x1, y0, y1)
   return (y0 + (((x + (-x0)) * (y1 + (-y0))) / (x1 + (-x0))))
end

function Util_dcblock(_ctx, x0)
   local y0 = (x0 + ((-_ctx.x1) + (0.995 * _ctx.y1)))
   _ctx.x1 = x0
   _ctx.y1 = y0
   return y0
end

function Util_smooth(_ctx, input)
   _ctx.x = ((0.005 * (input + (-_ctx.x))) + _ctx.x)
   return _ctx.x
end

function Util_average2(_ctx, x1)
   local result = (0.5 * (x1 + _ctx.x0))
   _ctx.x0 = x1
   return result
end

function Util_cubic_clipper(x)
   if (x <= -0.666667) then
      return -0.666667
   else
      if (x >= 0.666666) then
         return 0.666666
      else
         return (x + (-0.333334 * (x * (x * x))))
      end
   end
end

local Util_pitchToRate_1024_c0 = {0.189841, 0.191325, 0.198688, 0.219424, 0.265677, 0.356437, 0.52065, 0.801559, 1.262758, 1.996562, 3.135543, 4.868345, 7.461279, 11.287725, 16.868007, 24.923329, 36.448518, 52.80989, 75.876603, 108.196579, 153.231618, 215.671056, 301.849428, 420.301717, 582.500345, 803.831941, 1104.890092, 1513.184031, 2065.394252, 2810.346575, 3812.929069, 5159.245172}
local Util_pitchToRate_1024_c1 = {0.010913, 0.010175, 0.008333, 0.004866, -0.00094, -0.010061, -0.023821, -0.044003, -0.073003, -0.114025, -0.171341, -0.250622, -0.359382, -0.507549, -0.708209, -0.978576, -1.34125, -1.825848, -2.471123, -3.327701, -4.461631, -5.958971, -7.93171, -10.525422, -13.929139, -18.388075, -24.220034, -31.836533, -41.77, -54.708757, -71.542011, -93.417674}
local Util_pitchToRate_1024_c2 = {0.000355, 0.000447, 0.000562, 0.000707, 0.000889, 0.001118, 0.001406, 0.001769, 0.002225, 0.002798, 0.003519, 0.004426, 0.005566, 0.007001, 0.008805, 0.011073, 0.013926, 0.017515, 0.022027, 0.027703, 0.034841, 0.043817, 0.055107, 0.069306, 0.087162, 0.10962, 0.137863, 0.173383, 0.218056, 0.274238, 0.344895, 0.433757}
function Util_pitchToRate_1024_raw_c0(index)
   return Util_pitchToRate_1024_c0[index + 1]
end

function Util_pitchToRate_1024_raw_c1(index)
   return Util_pitchToRate_1024_c1[index + 1]
end

function Util_pitchToRate_1024_raw_c2(index)
   return Util_pitchToRate_1024_c2[index + 1]
end

function Util_pitchToRate_1024(pitch)
   local index = int_clip(float_to_int((pitch * 0.244094)), 0, 31)
   return (Util_pitchToRate_1024_c0[index + 1] + (pitch * (Util_pitchToRate_1024_c1[index + 1] + (Util_pitchToRate_1024_c2[index + 1] * pitch))))
end

local Util_pitchToRate_c0 = {0.000185, 0.000186, 0.000194, 0.000214, 0.000259, 0.000348, 0.000508, 0.000782, 0.001233, 0.001949, 0.003062, 0.004754, 0.007286, 0.011023, 0.016472, 0.024339, 0.035594, 0.051572, 0.074098, 0.10566, 0.14964, 0.210616, 0.294774, 0.41045, 0.568847, 0.784992, 1.078994, 1.477718, 2.016986, 2.744479, 3.723563, 5.038325}
local Util_pitchToRate_c1 = {1e-05, 9e-06, 8e-06, 4e-06, -1e-06, -1e-05, -2.4e-05, -4.3e-05, -7.2e-05, -0.000112, -0.000168, -0.000245, -0.000351, -0.000496, -0.000692, -0.000956, -0.00131, -0.001784, -0.002414, -0.00325, -0.004358, -0.00582, -0.007746, -0.010279, -0.013603, -0.017958, -0.023653, -0.031091, -0.040792, -0.053427, -0.069866, -0.091229}
local Util_pitchToRate_c2 = {0., 0., 0., 0., 0., 1e-06, 1e-06, 1e-06, 2e-06, 2e-06, 3e-06, 4e-06, 5e-06, 6e-06, 8e-06, 1e-05, 1.3e-05, 1.7e-05, 2.1e-05, 2.7e-05, 3.4e-05, 4.2e-05, 5.3e-05, 6.7e-05, 8.5e-05, 0.000107, 0.000134, 0.000169, 0.000212, 0.000267, 0.000336, 0.000423}
function Util_pitchToRate_raw_c0(index)
   return Util_pitchToRate_c0[index + 1]
end

function Util_pitchToRate_raw_c1(index)
   return Util_pitchToRate_c1[index + 1]
end

function Util_pitchToRate_raw_c2(index)
   return Util_pitchToRate_c2[index + 1]
end

function Util_pitchToRate(pitch)
   local index = int_clip(float_to_int((pitch * 0.244094)), 0, 31)
   return (Util_pitchToRate_c0[index + 1] + (pitch * (Util_pitchToRate_c1[index + 1] + (Util_pitchToRate_c2[index + 1] * pitch))))
end

function Util_cvToPitch(cv)
   return (24. + (120. * cv))
end

local Util_cvToRate_1024_c0 = {0.759366, 0.762876, 0.779736, 0.825651, 0.924648, 1.112398, 1.440687, 1.983392, 2.844434, 4.16831, 6.153993, 9.073194, 13.294297, 19.313614, 27.796101, 39.628263, 55.986716, 78.426877, 108.997432, 150.387803, 206.117798, 280.78109, 380.357332, 512.611648, 687.605267, 918.34736, 1221.62608, 1619.066842, 2138.478452, 2815.563557, 3696.089822, 4838.64325}
local Util_cvToRate_1024_c1 = {5.245583, 4.998942, 4.403089, 3.319116, 1.564496, -1.099257, -4.982227, -10.485865, -18.127956, -28.574103, -42.677366, -61.52813, -86.516747, -119.412144, -162.460392, -218.508149, -291.157147, -384.957362, -505.648348, -660.460542, -858.491161, -1111.172835, -1432.857517, -1841.543535, -2359.780392, -3015.794143, -3844.886359, -4891.172353, -6209.739876, -7869.328766, -9955.655806, -12575.538398}
local Util_cvToRate_1024_c2 = {20.125591, 24.457572, 29.722, 36.119582, 43.894227, 53.342343, 64.824142, 78.777367, 95.733987, 116.340476, 141.382456, 171.814656, 208.797308, 253.740377, 308.357324, 374.730423, 455.390158, 553.411687, 672.532092, 817.292849, 993.212978, 1206.999449, 1466.802894, 1782.528345, 2166.212865, 2632.484466, 3199.119798, 3887.721888, 4724.543761, 5741.489333, 6977.329754, 8479.181564}
function Util_cvToRate_1024_raw_c0(index)
   return Util_cvToRate_1024_c0[index + 1]
end

function Util_cvToRate_1024_raw_c1(index)
   return Util_cvToRate_1024_c1[index + 1]
end

function Util_cvToRate_1024_raw_c2(index)
   return Util_cvToRate_1024_c2[index + 1]
end

function Util_cvToRate_1024(cv)
   local index = int_clip(float_to_int((cv * 34.444444)), 0, 31)
   return (Util_cvToRate_1024_c0[index + 1] + (cv * (Util_cvToRate_1024_c1[index + 1] + (Util_cvToRate_1024_c2[index + 1] * cv))))
end

local Util_cvToRate_c0 = {0.000741, 0.000741, 0.000741, 0.000742, 0.000743, 0.000744, 0.000746, 0.000749, 0.000753, 0.000758, 0.000765, 0.000774, 0.000785, 0.000799, 0.000816, 0.000836, 0.00086, 0.000888, 0.000922, 0.000961, 0.001006, 0.001059, 0.00112, 0.001189, 0.001269, 0.00136, 0.001463, 0.00158, 0.001711, 0.00186, 0.002027, 0.002214, 0.002423, 0.002656, 0.002917, 0.003206, 0.003528, 0.003885, 0.00428, 0.004717, 0.005199, 0.005732, 0.006318, 0.006964, 0.007673, 0.008453, 0.009308, 0.010245, 0.011271, 0.012394, 0.013622, 0.014963, 0.016426, 0.018023, 0.019763, 0.021658, 0.023721, 0.025965, 0.028405, 0.031055, 0.033933, 0.037056, 0.040444, 0.044116, 0.048095, 0.052405, 0.05707, 0.062118, 0.067577, 0.073478, 0.079855, 0.086744, 0.094181, 0.102208, 0.110869, 0.12021, 0.13028, 0.141134, 0.152827, 0.165422, 0.178982, 0.193578, 0.209283, 0.226177, 0.244345, 0.263878, 0.284871, 0.307428, 0.331659, 0.357682, 0.385623, 0.415614, 0.447799, 0.48233, 0.519369, 0.55909, 0.601678, 0.647329, 0.696253, 0.748674, 0.804831, 0.864978, 0.929385, 0.998342, 1.072155, 1.151153, 1.235683, 1.326117, 1.422851, 1.526305, 1.636929, 1.755199, 1.881624, 2.016743, 2.161133, 2.315405, 2.480212, 2.656246, 2.844245, 3.044992, 3.259323, 3.488125, 3.732341, 3.992975, 4.271094, 4.567832, 4.884394, 5.222064}
local Util_cvToRate_c1 = {0.005139, 0.005126, 0.005099, 0.005056, 0.004997, 0.004919, 0.004821, 0.004701, 0.004556, 0.004386, 0.004187, 0.003957, 0.003694, 0.003395, 0.003057, 0.002676, 0.00225, 0.001774, 0.001246, 0.00066, 1.3e-05, -0.000701, -0.001486, -0.002348, -0.003292, -0.004324, -0.005452, -0.006681, -0.00802, -0.009475, -0.011056, -0.012771, -0.01463, -0.016643, -0.01882, -0.021174, -0.023715, -0.026458, -0.029415, -0.032602, -0.036033, -0.039726, -0.043698, -0.047968, -0.052555, -0.057481, -0.062768, -0.068439, -0.074521, -0.081039, -0.088022, -0.095501, -0.103507, -0.112075, -0.12124, -0.131041, -0.141519, -0.152717, -0.16468, -0.177457, -0.1911, -0.205663, -0.221204, -0.237784, -0.255468, -0.274326, -0.294431, -0.315859, -0.338693, -0.36302, -0.388932, -0.416528, -0.445909, -0.477186, -0.510476, -0.5459, -0.583589, -0.623681, -0.666322, -0.711667, -0.75988, -0.811133, -0.86561, -0.923505, -0.985024, -1.050385, -1.119817, -1.193565, -1.271886, -1.355053, -1.443355, -1.537097, -1.636603, -1.742214, -1.854292, -1.973219, -2.0994, -2.233264, -2.375261, -2.525873, -2.685603, -2.854988, -3.034594, -3.225019, -3.426895, -3.640892, -3.867717, -4.108116, -4.362881, -4.632847, -4.918897, -5.221963, -5.543032, -5.883147, -6.243408, -6.62498, -7.029093, -7.457047, -7.910214, -8.390047, -8.898079, -9.435928, -10.005306, -10.608022, -11.245985, -11.921211, -12.635833, -13.392101}
local Util_cvToRate_c2 = {0.018254, 0.019166, 0.020123, 0.021128, 0.022184, 0.023292, 0.024455, 0.025676, 0.026959, 0.028305, 0.029719, 0.031203, 0.032762, 0.034398, 0.036116, 0.03792, 0.039814, 0.041802, 0.04389, 0.046082, 0.048383, 0.0508, 0.053337, 0.056001, 0.058798, 0.061734, 0.064818, 0.068055, 0.071454, 0.075023, 0.07877, 0.082704, 0.086834, 0.091171, 0.095725, 0.100506, 0.105525, 0.110796, 0.116329, 0.122139, 0.12824, 0.134644, 0.141369, 0.14843, 0.155843, 0.163626, 0.171799, 0.180379, 0.189388, 0.198847, 0.208778, 0.219205, 0.230153, 0.241648, 0.253717, 0.266389, 0.279693, 0.293662, 0.308329, 0.323728, 0.339897, 0.356872, 0.374696, 0.39341, 0.413058, 0.433688, 0.455349, 0.478091, 0.501968, 0.527039, 0.553361, 0.580998, 0.610016, 0.640483, 0.672471, 0.706057, 0.74132, 0.778345, 0.817219, 0.858034, 0.900888, 0.945882, 0.993123, 1.042723, 1.094801, 1.14948, 1.20689, 1.267167, 1.330455, 1.396903, 1.46667, 1.539921, 1.616831, 1.697583, 1.782367, 1.871386, 1.96485, 2.062983, 2.166017, 2.274197, 2.387779, 2.507035, 2.632246, 2.763711, 2.901743, 3.046667, 3.19883, 3.358593, 3.526335, 3.702455, 3.88737, 4.081522, 4.285369, 4.499398, 4.724117, 4.960058, 5.207784, 5.467882, 5.74097, 6.027698, 6.328746, 6.644829, 6.976699, 7.325144, 7.690992, 8.075111, 8.478416, 8.901862}
function Util_cvToRate_raw_c0(index)
   return Util_cvToRate_c0[index + 1]
end

function Util_cvToRate_raw_c1(index)
   return Util_cvToRate_c1[index + 1]
end

function Util_cvToRate_raw_c2(index)
   return Util_cvToRate_c2[index + 1]
end

function Util_cvToRate(cv)
   local index = int_clip(float_to_int((cv * 141.111111)), 0, 127)
   return (Util_cvToRate_c0[index + 1] + (cv * (Util_cvToRate_c1[index + 1] + (Util_cvToRate_c2[index + 1] * cv))))
end

function Util_pitchToCv(pitch)
   return (-0.2 + (0.008333 * pitch))
end

local Util_cvToperiod_c0 = {674.246034, 671.553837, 662.761781, 646.759521, 623.799427, 594.871801, 561.298276, 524.476942, 485.731369, 446.229382, 406.94744, 368.663774, 331.968683, 297.284155, 264.887666, 234.936856, 207.493124, 182.543015, 160.016906, 139.804831, 121.769556, 105.757116, 91.605115, 79.149088, 68.227248, 58.683894, 50.371733, 43.153354, 36.902032, 31.502024, 26.848494, 22.847165}
local Util_cvToperiod_c1 = {-4656.656311, -4481.96058, -4198.686133, -3855.751543, -3487.139455, -3115.858822, -2756.930319, -2419.625142, -2109.134754, -1827.808334, -1576.062964, -1353.047092, -1157.118865, -986.186251, -837.944665, -710.039113, -600.171234, -506.166566, -426.013463, -357.882152, -300.13019, -251.298905, -210.104105, -175.423451, -146.282114, -121.837896, -101.366537, -84.247727, -69.952082, -58.02926, -48.097248, -39.832834}
local Util_cvToperiod_c2 = {14548.823162, 11715.369521, 9433.744675, 7596.477296, 6117.026621, 4925.706117, 3966.401039, 3193.925263, 2571.892879, 2071.004308, 1667.666207, 1342.880152, 1081.347751, 870.750049, 701.167268, 564.611553, 454.650723, 366.105297, 294.804521, 237.389915, 191.157081, 153.928316, 123.950032, 99.810164, 80.371652, 64.718884, 52.114568, 41.965004, 33.792117, 27.210939, 21.911477, 17.644111}
function Util_cvToperiod_raw_c0(index)
   return Util_cvToperiod_c0[index + 1]
end

function Util_cvToperiod_raw_c1(index)
   return Util_cvToperiod_c1[index + 1]
end

function Util_cvToperiod_raw_c2(index)
   return Util_cvToperiod_c2[index + 1]
end

function Util_cvToperiod(cv)
   local index = int_clip(float_to_int((cv * 31.)), 0, 31)
   return (Util_cvToperiod_c0[index + 1] + (cv * (Util_cvToperiod_c1[index + 1] + (Util_cvToperiod_c2[index + 1] * cv))))
end

local Util_cvTokHz_c0 = {0.032703, 0.032915, 0.033957, 0.036856, 0.043242, 0.055615, 0.077723, 0.115068, 0.175614, 0.270739, 0.416537, 0.635566, 0.959207, 1.430817, 2.109959, 3.07802, 4.445697, 6.362908, 9.031921, 12.724676, 17.805618, 24.761734, 34.24199, 47.109042, 64.506927, 87.949557, 119.436233, 161.602273, 217.915147, 292.929618, 392.619239, 524.806644}
local Util_cvTokHz_c1 = {0.225719, 0.212293, 0.179169, 0.117604, 0.01578, -0.142179, -0.377467, -0.718251, -1.201797, -1.877229, -2.809078, -4.081868, -5.806009, -8.125374, -11.227028, -15.353706, -20.819795, -28.031799, -37.514503, -49.944415, -66.19245, -87.378405, -114.940397, -150.723338, -197.091584, -257.072284, -334.537674, -434.436789, -563.089817, -728.561858, -941.137258, -1213.921329}
local Util_cvTokHz_c2 = {0.876337, 1.088286, 1.351497, 1.678367, 2.084294, 2.588397, 3.214421, 3.991853, 4.957315, 6.15628, 7.645224, 9.494282, 11.790548, 14.642184, 18.183511, 22.581336, 28.042808, 34.825181, 43.247923, 53.707771, 66.697415, 82.828706, 102.861475, 127.739327, 158.634081, 197.000973, 244.647197, 303.817033, 377.297556, 468.549917, 581.872375, 722.602755}
function Util_cvTokHz_raw_c0(index)
   return Util_cvTokHz_c0[index + 1]
end

function Util_cvTokHz_raw_c1(index)
   return Util_cvTokHz_c1[index + 1]
end

function Util_cvTokHz_raw_c2(index)
   return Util_cvTokHz_c2[index + 1]
end

function Util_cvTokHz(cv)
   local index = int_clip(float_to_int((cv * 31.)), 0, 31)
   return (Util_cvTokHz_c0[index + 1] + (cv * (Util_cvTokHz_c1[index + 1] + (Util_cvTokHz_c2[index + 1] * cv))))
end

function Rescomb_delay(_ctx, x, cv)
   _ctx.write_pos = ((1 + _ctx.write_pos) % 675)
   _ctx.buffer[_ctx.write_pos + 1] = x
   local r_size = 675.
   local r_index = (((-Util_cvToperiod(cv)) + real(_ctx.write_pos)) % r_size)
   if (r_index < 0.) then
      r_index = (r_index + r_size)
   else
      r_index = r_index
   end
   local t1 = (int(floor(r_index)) % 675)
   local t2 = ((1 + t1) % 675)
   local decimal = (r_index + (-real(t1)))
   local x1 = _ctx.buffer[t1 + 1]
   local x2 = _ctx.buffer[t2 + 1]
   local ret = (x1 + (decimal * (x2 + (-x1))))
   return ret
end

local Rescomb_toneCurve_c0 = {-0.407543, -0.40102, -0.394389, -0.387645, -0.380781, -0.373791, -0.366667, -0.359403, -0.351988, -0.344414, -0.336669, -0.328741, -0.320618, -0.312282, -0.303718, -0.294905, -0.285819, -0.276434, -0.266718, -0.256634, -0.246135, -0.235166, -0.223657, -0.211519, -0.198634, -0.184844, -0.169923, -0.153529, -0.135099, -0.113552, -0.086113, 0., 0., 0.086112, 0.113551, 0.135098, 0.153528, 0.169922, 0.184843, 0.198633, 0.211518, 0.223656, 0.235165, 0.246134, 0.256633, 0.266717, 0.276433, 0.285818, 0.294904, 0.303717, 0.312281, 0.320617, 0.32874, 0.336668, 0.344413, 0.351987, 0.359402, 0.366666, 0.37379, 0.38078, 0.387644, 0.394388, 0.401019, 0.407542}
local Rescomb_toneCurve_c1 = {0.690098, 0.701322, 0.713112, 0.725518, 0.738594, 0.752405, 0.76702, 0.782521, 0.799003, 0.816572, 0.835353, 0.855494, 0.877166, 0.900573, 0.925961, 0.953626, 0.98393, 1.017322, 1.054363, 1.095774, 1.142485, 1.195737, 1.257215, 1.329285, 1.415394, 1.520799, 1.654015, 1.829993, 2.078197, 2.468227, 3.231982, 9.441957, 9.441957, 3.231982, 2.468227, 2.078197, 1.829993, 1.654015, 1.520799, 1.415394, 1.329285, 1.257215, 1.195737, 1.142485, 1.095774, 1.054363, 1.017322, 0.98393, 0.953626, 0.925961, 0.900573, 0.877166, 0.855494, 0.835353, 0.816572, 0.799003, 0.782521, 0.76702, 0.752405, 0.738594, 0.725518, 0.713112, 0.701322, 0.690098}
local Rescomb_toneCurve_c2 = {0.097371, 0.102199, 0.10744, 0.113145, 0.119373, 0.126195, 0.133691, 0.141961, 0.15112, 0.161308, 0.172694, 0.185486, 0.19994, 0.216373, 0.235188, 0.256898, 0.282167, 0.311869, 0.347175, 0.389686, 0.441644, 0.506275, 0.588374, 0.695352, 0.839219, 1.040633, 1.337963, 1.810204, 2.645768, 4.410254, 9.715488, 114.079447, -114.079448, -9.715489, -4.410255, -2.645769, -1.810205, -1.337964, -1.040634, -0.83922, -0.695353, -0.588375, -0.506276, -0.441645, -0.389687, -0.347176, -0.31187, -0.282168, -0.256899, -0.235189, -0.216374, -0.199941, -0.185487, -0.172695, -0.161309, -0.151121, -0.141962, -0.133692, -0.126196, -0.119374, -0.113146, -0.107441, -0.1022, -0.097372}
function Rescomb_toneCurve_raw_c0(index)
   return Rescomb_toneCurve_c0[index + 1]
end

function Rescomb_toneCurve_raw_c1(index)
   return Rescomb_toneCurve_c1[index + 1]
end

function Rescomb_toneCurve_raw_c2(index)
   return Rescomb_toneCurve_c2[index + 1]
end

function Rescomb_toneCurve(tone)
   local index = int_clip(float_to_int(((tone - -1.2) * 26.25)), 0, 63)
   return (Rescomb_toneCurve_c0[index + 1] + (tone * (Rescomb_toneCurve_c1[index + 1] + (Rescomb_toneCurve_c2[index + 1] * tone))))
end

function Rescomb_do(_ctx, in_, cv, tone, res)
   if Util_change(_ctx.inst_1b000, tone) then
      _ctx.stone = Rescomb_toneCurve(tone)
   end
   local feedback = Util_dcblock(_ctx.inst_26400, (res * _ctx.output))
   local saturated_input = Saturate_soft_process((feedback + in_))
   _ctx.output = (in_ + (Rescomb_delay(_ctx.inst_3a900, saturated_input, cv) * _ctx.stone))
   return Saturate_soft_process(_ctx.output)
end

function Rescomb_process(_ctx, in_, cv, tone, res)
   return Rescomb_do(_ctx.inst_100b6, in_, cv, tone, res)
end

function Rescomb_noteOn(_ctx, note, velocity, channel)
end

function Rescomb_noteOff(_ctx, note, channel)
end

function Rescomb_controlChange(_ctx, control, value, channel)
end

function Rescomb_default(_ctx)
end

