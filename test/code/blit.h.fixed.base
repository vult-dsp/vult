/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef BLIT_H
#define BLIT_H

#include "vultin.h"
#include "blit.tables.h"

typedef struct Util_edge_type {
   bool pre;
} Util_edge_type;

typedef struct Util_change_type {
   fix16_t pre_x;
} Util_change_type;

typedef struct Util_dcblock_type {
   fix16_t x1;
   fix16_t y1;
} Util_dcblock_type;

typedef struct Util_smooth_type {
   fix16_t x;
} Util_smooth_type;

typedef struct Util_average2_type {
   fix16_t x0;
} Util_average2_type;

typedef struct Phase_process_type {
   Util_change_type inst_1b08a;
   Util_edge_type inst_2048a;
   fix16_t phase;
   fix16_t rate;
} Phase_process_type;

typedef struct Phase_process_type Phase_noteOn_type;

typedef struct Phase_process_type Phase_noteOff_type;

typedef struct Phase_process_type Phase_controlChange_type;

typedef struct Phase_process_type Phase_default_type;

typedef struct Blit_pulse_train_type {
   Util_change_type inst_1b05e;
   int32_t m;
   fix16_t scale;
} Blit_pulse_train_type;

typedef struct Blit_pulse_train_type Blit_pulse_start_type;

typedef struct Blit_osc_blit_type {
   Util_change_type inst_1b026;
   Phase_process_type inst_28a26;
   Blit_pulse_train_type inst_35e26;
   Blit_pulse_train_type inst_45e26;
   Util_dcblock_type inst_56426;
   fix16_t output;
   fix16_t rate;
   fix16_t state_pulse;
   fix16_t state_saw;
} Blit_osc_blit_type;

typedef struct Blit_osc_blit_type Blit_init_type;

typedef struct Blit_process_type {
   Blit_osc_blit_type inst_1268b;
} Blit_process_type;

typedef struct Blit_process_type Blit_noteOn_type;

typedef struct Blit_process_type Blit_noteOff_type;

typedef struct Blit_process_type Blit_controlChange_type;

typedef struct Blit_process_type Blit_default_type;

static_inline void Util_edge_type_init(Util_edge_type& _ctx) {
   _ctx.pre = false;
}

static_inline void Util_change_type_init(Util_change_type& _ctx) {
   _ctx.pre_x = 0x0 /* 0.000000 */;
}

static_inline void Util_dcblock_type_init(Util_dcblock_type& _ctx) {
   _ctx.x1 = 0x0 /* 0.000000 */;
   _ctx.y1 = 0x0 /* 0.000000 */;
}

static_inline void Util_smooth_type_init(Util_smooth_type& _ctx) {
   _ctx.x = 0x0 /* 0.000000 */;
}

static_inline void Util_average2_type_init(Util_average2_type& _ctx) {
   _ctx.x0 = 0x0 /* 0.000000 */;
}

static_inline fix16_t Util_cvToPitch(fix16_t cv) {
   return 0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */, cv);
}

static_inline fix16_t Util_pitchToRate_1024_raw_c0(int32_t index) {
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024_raw_c1(int32_t index) {
   return Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024_raw_c2(int32_t index) {
   return Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024(fix16_t pitch) {
   int32_t index = int_clip(fix_to_int(fix_mul(pitch, 0x3e7c /* 0.244094 */)), 0, 31);
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(pitch, (Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)], pitch)));
}

static_inline fix16_t Util_cvToRate_1024_raw_c0(int32_t index) {
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024_raw_c1(int32_t index) {
   return Util_cvToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024_raw_c2(int32_t index) {
   return Util_cvToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 0x2271c7 /* 34.444444 */)), 0, 31);
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToRate_1024_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_1024_c2[static_cast<uint32_t>(index)], cv)));
}

static_inline void Phase_default(Phase_process_type& _ctx) {
   _ctx.rate = Util_cvToRate_1024(0x0 /* 0.000000 */);
}

void Phase_process_type_init(Phase_process_type& _ctx);

static_inline void Phase_noteOn_type_init(Phase_noteOn_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline void Phase_noteOff_type_init(Phase_noteOff_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline void Phase_controlChange_type_init(Phase_controlChange_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline void Phase_default_type_init(Phase_default_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline fix16_t Util_cvToperiod_raw_c0(int32_t index) {
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod_raw_c1(int32_t index) {
   return Util_cvToperiod_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod_raw_c2(int32_t index) {
   return Util_cvToperiod_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 0x1f0000 /* 31.000000 */)), 0, 31);
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToperiod_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToperiod_c2[static_cast<uint32_t>(index)], cv)));
}

static_inline void Blit_pulse_start(Blit_pulse_train_type& _ctx) {
   _ctx.m = 1 + 2 * fix_to_int(Util_cvToperiod(0x0 /* 0.000000 */));
   _ctx.scale = 0x10000 /* 1.000000 */ + fix_mul(0x20000 /* 2.000000 */, Util_cvToperiod(0x0 /* 0.000000 */));
}

static_inline void Blit_pulse_train_type_init(Blit_pulse_train_type& _ctx) {
   Util_change_type_init(_ctx.inst_1b05e);
   _ctx.m = 0;
   _ctx.scale = 0x0 /* 0.000000 */;
   Blit_pulse_start(_ctx);
}

static_inline void Blit_pulse_start_type_init(Blit_pulse_start_type& _ctx) {
   Blit_pulse_train_type_init(_ctx);
}

static_inline fix16_t Util_pitchToRate_raw_c0(int32_t index) {
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_raw_c1(int32_t index) {
   return Util_pitchToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_raw_c2(int32_t index) {
   return Util_pitchToRate_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate(fix16_t pitch) {
   int32_t index = int_clip(fix_to_int(fix_mul(pitch, 0x3e7c /* 0.244094 */)), 0, 31);
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)] + fix_mul(pitch, (Util_pitchToRate_c1[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_c2[static_cast<uint32_t>(index)], pitch)));
}

static_inline fix16_t Util_cvToRate_raw_c0(int32_t index) {
   return Util_cvToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_raw_c1(int32_t index) {
   return Util_cvToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_raw_c2(int32_t index) {
   return Util_cvToRate_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 0x8d1c71 /* 141.111111 */)), 0, 127);
   return Util_cvToRate_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToRate_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_c2[static_cast<uint32_t>(index)], cv)));
}

static_inline void Blit_init(Blit_osc_blit_type& _ctx) {
   _ctx.rate = Util_cvToRate(0x0 /* 0.000000 */);
}

void Blit_osc_blit_type_init(Blit_osc_blit_type& _ctx);

static_inline void Blit_init_type_init(Blit_init_type& _ctx) {
   Blit_osc_blit_type_init(_ctx);
}

static_inline void Blit_process_type_init(Blit_process_type& _ctx) {
   Blit_osc_blit_type_init(_ctx.inst_1268b);
}

static_inline void Blit_noteOn_type_init(Blit_noteOn_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline void Blit_noteOff_type_init(Blit_noteOff_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline void Blit_controlChange_type_init(Blit_controlChange_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline void Blit_default_type_init(Blit_default_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline bool Util_edge(Util_edge_type& _ctx, bool x) {
   bool ret = x && (_ctx.pre == false);
   _ctx.pre = x;
   return ret;
}

static_inline bool Util_change(Util_change_type& _ctx, fix16_t x) {
   bool v = _ctx.pre_x != x;
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1) {
   return y0 + fix_div(fix_mul((x + (- x0)), (y1 + (- y0))), (x1 + (- x0)));
}

static_inline fix16_t Util_dcblock(Util_dcblock_type& _ctx, fix16_t x0) {
   fix16_t y0 = x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */, _ctx.y1);
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

static_inline fix16_t Util_smooth(Util_smooth_type& _ctx, fix16_t input) {
   _ctx.x = fix_mul(0x147 /* 0.005000 */, (input + (- _ctx.x))) + _ctx.x;
   return _ctx.x;
}

static_inline fix16_t Util_average2(Util_average2_type& _ctx, fix16_t x1) {
   fix16_t result = fix_mul(0x8000 /* 0.500000 */, (x1 + _ctx.x0));
   _ctx.x0 = x1;
   return result;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x) {
   if (x <= -0xaaaa /* -0.666667 */) {
      return -0xaaaa /* -0.666667 */;
   }
   else {
      if (x >= 0xaaaa /* 0.666667 */) {
         return 0xaaaa /* 0.666667 */;
      }
      else {
         return x + fix_mul(-0x5555 /* -0.333333 */, fix_mul(x, fix_mul(x, x)));
      }
   }
}

static_inline fix16_t Util_pitchToCv(fix16_t pitch) {
   return -0x3333 /* -0.200000 */ + fix_mul(0x222 /* 0.008333 */, pitch);
}

static_inline fix16_t Util_cvTokHz_raw_c0(int32_t index) {
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz_raw_c1(int32_t index) {
   return Util_cvTokHz_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz_raw_c2(int32_t index) {
   return Util_cvTokHz_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 0x1f0000 /* 31.000000 */)), 0, 31);
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvTokHz_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvTokHz_c2[static_cast<uint32_t>(index)], cv)));
}

fix16_t Phase_process(Phase_process_type& _ctx, fix16_t cv, fix16_t reset);

static_inline void Phase_noteOn(Phase_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Phase_noteOff(Phase_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Phase_controlChange(Phase_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline fix16_t Tables_nsine_raw_c0(int32_t index) {
   return Tables_nsine_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_nsine_raw_c1(int32_t index) {
   return Tables_nsine_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_nsine_raw_c2(int32_t index) {
   return Tables_nsine_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Tables_nsine(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul(x, 0x7f0000 /* 127.000000 */)), 0, 127);
   return Tables_nsine_c0[static_cast<uint32_t>(index)] + fix_mul(x, (Tables_nsine_c1[static_cast<uint32_t>(index)] + fix_mul(Tables_nsine_c2[static_cast<uint32_t>(index)], x)));
}

fix16_t Blit_pulse_train(Blit_pulse_train_type& _ctx, fix16_t cv, fix16_t phase);

fix16_t Blit_osc_blit(Blit_osc_blit_type& _ctx, fix16_t cv, fix16_t pw, fix16_t wave);

static_inline fix16_t Blit_process(Blit_process_type& _ctx, fix16_t cv, fix16_t pw, fix16_t wave) {
   return Blit_osc_blit(_ctx.inst_1268b, cv, pw, wave);
}

static_inline void Blit_noteOn(Blit_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Blit_noteOff(Blit_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Blit_controlChange(Blit_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Blit_default(Blit_process_type& _ctx) {
}


#endif // BLIT_H
