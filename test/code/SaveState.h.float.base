/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef SAVESTATE_H
#define SAVESTATE_H

#include "vultin.h"
#include "SaveState.tables.h"

typedef struct SaveState_counter_type {
   int32_t count;
} SaveState_counter_type;

typedef struct SaveState_counter_type SaveState_reset_type;

typedef struct SaveState_nosave_type {
   int32_t x;
} SaveState_nosave_type;

typedef struct SaveState_point {
   float x;
   float y;
} SaveState_point;

typedef struct SaveState_main_type {
   SaveState_counter_type c1;
   SaveState_counter_type inst_19fb0;
   SaveState_nosave_type inst_21bb0;
   SaveState_point p1;
   SaveState_point p2;
   std::array<SaveState_point, 3> point_array;
   std::string str;
   float x;
} SaveState_main_type;

static_inline void SaveState_counter_type_init(SaveState_counter_type& _ctx) {
   _ctx.count = 0;
}

static_inline void SaveState_reset_type_init(SaveState_reset_type& _ctx) {
   SaveState_counter_type_init(_ctx);
}

static_inline void SaveState_nosave_type_init(SaveState_nosave_type& _ctx) {
   _ctx.x = 0;
}

static_inline void SaveState_point_init(SaveState_point& _ctx) {
   _ctx.x = 0.0f;
   _ctx.y = 0.0f;
}

void SaveState_main_type_init(SaveState_main_type& _ctx);

static_inline int32_t SaveState_counter_type_serialize_data(CustomBuffer& buffer, int32_t index, SaveState_counter_type& _ctx) {
   int32_t start = index;
   index = push_block_header(buffer, index);
   index = push_int(buffer, index, _ctx.count);
   update_size(buffer, start, index + (- start));
   return index;
}

static_inline int32_t SaveState_reset_type_serialize_data(CustomBuffer& buffer, int32_t index, SaveState_reset_type& _ctx) {
   return SaveState_counter_type_serialize_data(buffer, index, _ctx);
}

int32_t SaveState_point_serialize_data(CustomBuffer& buffer, int32_t index, SaveState_point& _ctx);

int32_t SaveState_main_type_serialize_data(CustomBuffer& buffer, int32_t index, SaveState_main_type& _ctx);

static_inline int32_t SaveState_counter_type_serialize_type_descr(CustomBuffer& buffer, int32_t index, std::array<bool, 4>& marks) {
   if (marks[static_cast<uint32_t>(0)]) {
      return index;
   }
   marks[static_cast<uint32_t>(0)] = true;
   std::array<std::string, 1> _array_0 = { "count" };
   return serialize_type_descr(buffer, index, "SaveState_counter_type", _array_0);
}

static_inline int32_t SaveState_point_serialize_type_descr(CustomBuffer& buffer, int32_t index, std::array<bool, 4>& marks) {
   if (marks[static_cast<uint32_t>(2)]) {
      return index;
   }
   marks[static_cast<uint32_t>(2)] = true;
   std::array<std::string, 2> _array_0 = { "x", "y" };
   return serialize_type_descr(buffer, index, "SaveState_point", _array_0);
}

int32_t SaveState_main_type_serialize_type_descr(CustomBuffer& buffer, int32_t index, std::array<bool, 4>& marks);

static_inline void SaveState_counter_type_deserialize_data(CustomBuffer& buffer, CustomTypeDescr& type_descr, int32_t index, SaveState_counter_type& _ctx) {
   int32_t field_index = search_field_name(buffer, type_descr, index, "count");
   if (field_index >= 0) {
      _ctx.count = deserialize_int(buffer, field_index);
   }
}

void SaveState_point_deserialize_data(CustomBuffer& buffer, CustomTypeDescr& type_descr, int32_t index, SaveState_point& _ctx);

void SaveState_main_type_deserialize_data(CustomBuffer& buffer, CustomTypeDescr& type_descr, int32_t index, SaveState_main_type& _ctx);

static_inline int32_t SaveState_counter(SaveState_counter_type& _ctx) {
   _ctx.count = 1 + _ctx.count;
   return _ctx.count;
}

static_inline void SaveState_reset(SaveState_counter_type& _ctx) {
   _ctx.count = 0;
}

static_inline void SaveState_nosave(SaveState_nosave_type& _ctx) {
   _ctx.x = 0;
}

void SaveState_main(SaveState_main_type& _ctx);


#endif // SAVESTATE_H
