
function ifExpressionValue(cond,then_,else_) if cond then return then_ else return else_ end end
function ifExpression(cond,then_,else_) if cond then return then_() else return else_() end end
function eps()              return 1e-18 end
function pi()               return 3.1415926535897932384 end
function random()           return math.random() end
function irandom()          return math.floor(math.random() * 4294967296) end
function clip(x,low,high)   if x > high then return high else if x < low then return low else return x end end end
function real(x)            return x end
function int(x)             local int_part,_ = math.modf(x) return int_part end
function sin(x)             return math.sin(x) end
function cos(x)             return math.cos(x) end
function abs(x)             return math.abs(x) end
function exp(x)             return math.exp(x) end
function floor(x)           return math.floor(x) end
function tan(x)             return math.tan(x) end
function tanh(x)            return math.tanh(x) end
function sqrt(x)            return x end
function set(a, i, v)       a[i+1]=v end
function get(a, i)          return a[i+1] end
function intDiv(a, b)       return math.floor(a / b) end

function FixedAndFloat_test1()
   local fixed_value = 0.
   local real_value = 0.
   local int_value = 0
   local bool_value = false
   local result = (fixed_value + fix16(real_value))
   local from_int = fix16(int_value)
   local from_real = fix16(real_value)
   local from_bool = fix16(bool_value)
   local to_int = int(fixed_value)
   local to_real = real(fixed_value)
   local to_bool = bool(fixed_value)
   from_int = 0.
   from_real = 0.
   from_bool = 0.
   to_int = 0
   to_real = 0.
   to_bool = false
end

local FixedAndFloat_take_fix_return_fixed_c0 = {0., 0.195084, 0.382672, 0.555555, 0.70709, 0.831453, 0.923866, 0.980777, 0.999999, 0.980795, 0.923901, 0.831505, 0.707155, 0.555632, 0.382758, 0.195175, 9.2e-05, -0.194994, -0.382588, -0.555479, -0.707025, -0.831403, -0.923831, -0.98076, -1., -0.980814, -0.923938, -0.831557, -0.707222, -0.55571, -0.382844, -0.195267, -0.000186}
local FixedAndFloat_take_fix_return_fixed_c1 = {0.195084, 0.187588, 0.172883, 0.151534, 0.124363, 0.092412, 0.056911, 0.019222, -0.019205, -0.056894, -0.092397, -0.12435, -0.151524, -0.172875, -0.187583, -0.195083, -0.195087, -0.187594, -0.172892, -0.151547, -0.124378, -0.092429, -0.056929, -0.019241, 0.019186, 0.056876, 0.09238, 0.124335, 0.151511, 0.172865, 0.187577, 0.195081, 0.}
function FixedAndFloat_take_fix_return_fixed_raw_c0(index)
   return FixedAndFloat_take_fix_return_fixed_c0[index + 1]
end

function FixedAndFloat_take_fix_return_fixed_raw_c1(index)
   return FixedAndFloat_take_fix_return_fixed_c1[index + 1]
end

function FixedAndFloat_take_fix_return_fixed(x)
   local value = clip((x * 31.), 0., 31.)
   local index = int(value)
   local decimal = (value - floor(value))
   return (FixedAndFloat_take_fix_return_fixed_c0[index + 1] + (FixedAndFloat_take_fix_return_fixed_c1[index + 1] * decimal))
end

local FixedAndFloat_take_fix_return_real_c0 = {0., -0.003685, -0.017567, -0.045666, -0.088119, -0.140175, -0.191679, -0.227141, -0.22641, -0.165946, -0.020627, 0.234001, 0.619196, 1.150366, 1.834509, 2.667932, 3.63446, 4.704328, 5.833885, 6.966246, 8.032931, 8.956503, 9.654127, 10.041938, 10.040014, 9.577723, 8.599151, 7.068308, 4.97378, 2.332503, -0.807634, -4.366608}
local FixedAndFloat_take_fix_return_real_c1 = {6.303116, 6.539527, 6.984871, 7.585958, 8.267315, 8.936094, 9.488211, 9.815348, 9.81247, 9.38541, 8.458111, 6.979105, 4.926833, 2.313489, -0.812886, -4.368242, -8.234355, -12.262671, -16.28001, -20.095927, -23.511418, -26.328579, -28.360772, -29.442809, -29.440648, -28.260093, -25.854042, -22.227846, -17.442452, -11.615075, -4.917253, 2.429729}
local FixedAndFloat_take_fix_return_real_c2 = {-1.933057, -5.724888, -9.296728, -12.511321, -15.245139, -17.393129, -18.872751, -19.627146, -19.627325, -18.873281, -17.393991, -15.246298, -12.512733, -9.29834, -5.726637, -1.934876, 1.931237, 5.723139, 9.295115, 12.509907, 15.243979, 17.392267, 18.872219, 19.626966, 19.627503, 18.873811, 17.394851, 15.247456, 12.514145, 9.29995, 5.728384, 1.936693}
function FixedAndFloat_take_fix_return_real_raw_c0(index)
   return FixedAndFloat_take_fix_return_real_c0[index + 1]
end

function FixedAndFloat_take_fix_return_real_raw_c1(index)
   return FixedAndFloat_take_fix_return_real_c1[index + 1]
end

function FixedAndFloat_take_fix_return_real_raw_c2(index)
   return FixedAndFloat_take_fix_return_real_c2[index + 1]
end

function FixedAndFloat_take_fix_return_real(x)
   local index = clip(fix_to_int((x * 31.)), 0, 31)
   return (FixedAndFloat_take_fix_return_real_c0[index + 1] + (fix_to_float(x) * (FixedAndFloat_take_fix_return_real_c1[index + 1] + (FixedAndFloat_take_fix_return_real_c2[index + 1] * fix_to_float(x)))))
end

local FixedAndFloat_take_real_return_fixed_c0 = {0., -0.003685, -0.017567, -0.045666, -0.088119, -0.140175, -0.191679, -0.227141, -0.22641, -0.165946, -0.020627, 0.234001, 0.619196, 1.150366, 1.834509, 2.667932, 3.63446, 4.704328, 5.833885, 6.966246, 8.032931, 8.956503, 9.654127, 10.041938, 10.040014, 9.577723, 8.599151, 7.068308, 4.97378, 2.332503, -0.807634, -4.366608}
local FixedAndFloat_take_real_return_fixed_c1 = {6.303116, 6.539527, 6.984871, 7.585958, 8.267315, 8.936094, 9.488211, 9.815348, 9.81247, 9.38541, 8.458111, 6.979105, 4.926833, 2.313489, -0.812886, -4.368242, -8.234355, -12.262671, -16.28001, -20.095927, -23.511418, -26.328579, -28.360772, -29.442809, -29.440648, -28.260093, -25.854042, -22.227846, -17.442452, -11.615075, -4.917253, 2.429729}
local FixedAndFloat_take_real_return_fixed_c2 = {-1.933057, -5.724888, -9.296728, -12.511321, -15.245139, -17.393129, -18.872751, -19.627146, -19.627325, -18.873281, -17.393991, -15.246298, -12.512733, -9.29834, -5.726637, -1.934876, 1.931237, 5.723139, 9.295115, 12.509907, 15.243979, 17.392267, 18.872219, 19.626966, 19.627503, 18.873811, 17.394851, 15.247456, 12.514145, 9.29995, 5.728384, 1.936693}
function FixedAndFloat_take_real_return_fixed_raw_c0(index)
   return FixedAndFloat_take_real_return_fixed_c0[index + 1]
end

function FixedAndFloat_take_real_return_fixed_raw_c1(index)
   return FixedAndFloat_take_real_return_fixed_c1[index + 1]
end

function FixedAndFloat_take_real_return_fixed_raw_c2(index)
   return FixedAndFloat_take_real_return_fixed_c2[index + 1]
end

function FixedAndFloat_take_real_return_fixed(x)
   local index = clip(math.floor((x * 31.)), 0, 31)
   return (FixedAndFloat_take_real_return_fixed_c0[index + 1] + (float_to_fix(x) * (FixedAndFloat_take_real_return_fixed_c1[index + 1] + (FixedAndFloat_take_real_return_fixed_c2[index + 1] * float_to_fix(x)))))
end

