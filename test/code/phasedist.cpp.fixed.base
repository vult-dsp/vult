/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */

#include "phasedist.h"

void Phasedist_process_type_init(Phasedist_process_type& _ctx) {
   _ctx.detune = 0x0 /* 0.000000 */;
   Phasedist_phasor_type_init(_ctx.inst_117e9);
   Phasedist_smooth_type_init(_ctx.inst_275e9);
   Phasedist_phasor_type_init(_ctx.inst_317e9);
   Phasedist_smooth_type_init(_ctx.inst_475e9);
   _ctx.pitch = 0x0 /* 0.000000 */;
   _ctx.pre_phase1 = 0x0 /* 0.000000 */;
   _ctx.volume = 0x0 /* 0.000000 */;
}

fix16_t Phasedist_phasor(Phasedist_phasor_type& _ctx, fix16_t pitch, bool reset) {
   if (Phasedist_change(_ctx.inst_1e817, pitch)) {
      _ctx.rate = Phasedist_pitchToRate(pitch);
   }
   if (reset) {
      _ctx.phase = 0x0 /* 0.000000 */;
   }
   else {
      _ctx.phase = _ctx.phase + _ctx.rate;
   }
   if (_ctx.phase > 0x10000 /* 1.000000 */) {
      _ctx.phase = -0x10000 /* -1.000000 */ + _ctx.phase;
   }
   else {
      _ctx.phase = _ctx.phase;
   }
   return _ctx.phase;
}

fix16_t Phasedist_process(Phasedist_process_type& _ctx, fix16_t input) {
   fix16_t phase1 = Phasedist_phasor(_ctx.inst_117e9, _ctx.pitch, false);
   fix16_t comp = 0x10000 /* 1.000000 */ + (- phase1);
   bool reset = ((- phase1) + _ctx.pre_phase1) > 0x8000 /* 0.500000 */;
   _ctx.pre_phase1 = phase1;
   fix16_t phase2 = Phasedist_phasor(_ctx.inst_317e9, fix_mul(0x200000 /* 32.000000 */, Phasedist_smooth(_ctx.inst_275e9, _ctx.detune)) + _ctx.pitch, reset);
   fix16_t sine = fix_sin(fix_mul(0x6487e /* 6.283185 */, phase2));
   return fix_mul(comp, fix_mul(sine, Phasedist_smooth(_ctx.inst_475e9, _ctx.volume)));
}

