/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef VOICE_4_H
#define VOICE_4_H

#include "vultin.h"
#include "voice_4.tables.h"

typedef struct Util_edge_type {
   bool pre;
} Util_edge_type;

typedef struct Util_change_type {
   float pre_x;
} Util_change_type;

typedef struct Util_dcblock_type {
   float x1;
   float y1;
} Util_dcblock_type;

typedef struct Util_smooth_type {
   float x;
} Util_smooth_type;

typedef struct Util_average2_type {
   float x0;
} Util_average2_type;

typedef struct Tricore_process_type {
   bool direction;
   Util_change_type inst_1b03c;
   Util_edge_type inst_2043c;
   Util_edge_type inst_3043c;
   float phase;
   float rate;
   float reset_phase;
   bool reset_state;
} Tricore_process_type;

typedef struct Tricore_process_type Tricore_noteOn_type;

typedef struct Tricore_process_type Tricore_noteOff_type;

typedef struct Tricore_process_type Tricore_controlChange_type;

typedef struct Tricore_process_type Tricore_default_type;

typedef struct Svf_process_type {
   float g;
   Util_change_type inst_1b0a2;
   Util_change_type inst_2b0a2;
   float inv_den;
   float r;
   float z1;
   float z2;
} Svf_process_type;

typedef struct Svf_process_type Svf_noteOn_type;

typedef struct Svf_process_type Svf_noteOff_type;

typedef struct Svf_process_type Svf_controlChange_type;

typedef struct Svf_process_type Svf_default_type;

typedef struct Lfo_soft_type {
   float x2;
   float x3;
   float x4;
} Lfo_soft_type;

typedef struct Lfo_process_type {
   Util_change_type inst_1b0d6;
   Util_edge_type inst_204d6;
   Lfo_soft_type inst_337d6;
   float phase;
   float rate;
} Lfo_process_type;

typedef struct Lfo_process_type Lfo_noteOn_type;

typedef struct Lfo_process_type Lfo_noteOff_type;

typedef struct Lfo_process_type Lfo_controlChange_type;

typedef struct Lfo_process_type Lfo_default_type;

typedef struct Phase_process_type {
   Util_change_type inst_1b08a;
   Util_edge_type inst_2048a;
   float phase;
   float rate;
} Phase_process_type;

typedef struct Phase_process_type Phase_noteOn_type;

typedef struct Phase_process_type Phase_noteOff_type;

typedef struct Phase_process_type Phase_controlChange_type;

typedef struct Phase_process_type Phase_default_type;

typedef struct Blit_pulse_train_type {
   Util_change_type inst_1b05e;
   int32_t m;
   float scale;
} Blit_pulse_train_type;

typedef struct Blit_pulse_train_type Blit_pulse_start_type;

typedef struct Blit_osc_blit_type {
   Util_change_type inst_1b026;
   Phase_process_type inst_28a26;
   Blit_pulse_train_type inst_35e26;
   Blit_pulse_train_type inst_45e26;
   Util_dcblock_type inst_56426;
   float output;
   float rate;
   float state_pulse;
   float state_saw;
} Blit_osc_blit_type;

typedef struct Blit_osc_blit_type Blit_init_type;

typedef struct Blit_process_type {
   Blit_osc_blit_type inst_1268b;
} Blit_process_type;

typedef struct Blit_process_type Blit_noteOn_type;

typedef struct Blit_process_type Blit_noteOff_type;

typedef struct Blit_process_type Blit_controlChange_type;

typedef struct Blit_process_type Blit_default_type;

typedef struct Adsr_do_type {
   Util_edge_type inst_104a0;
   Util_smooth_type inst_295a0;
   float out;
   float rate;
   float scale;
   int32_t state;
   float target;
} Adsr_do_type;

typedef struct Adsr_process_type {
   Adsr_do_type inst_1a025;
   float knob1;
   float knob2;
   float knob3;
   float knob4;
} Adsr_process_type;

typedef struct Adsr_process_type Adsr_noteOn_type;

typedef struct Adsr_process_type Adsr_noteOff_type;

typedef struct Adsr_process_type Adsr_controlChange_type;

typedef struct Adsr_process_type Adsr_default_type;

typedef struct Voice_4_process_type {
   float attack;
   float decay;
   float flt_cut;
   float flt_res;
   int32_t flt_shape;
   Lfo_process_type inst_1d695;
   Blit_process_type inst_28b95;
   Blit_process_type inst_38b95;
   Blit_process_type inst_48b95;
   Tricore_process_type inst_53c95;
   Svf_process_type inst_6a295;
   Adsr_do_type inst_7a095;
   float level1;
   float level2;
   float level3;
   float level4;
   float lfo_cv;
   float lfo_flt;
   float lfo_pw;
   float lfo_rate;
   float lfo_reset;
   float lfo_shape;
   float pw1;
   float pw2;
   float pw3;
   float pw4;
   float release;
   float sustain;
} Voice_4_process_type;

typedef struct Voice_4_process_type Voice_4_noteOn_type;

typedef struct Voice_4_process_type Voice_4_noteOff_type;

typedef struct Voice_4_process_type Voice_4_controlChange_type;

typedef struct Voice_4_process_type Voice_4_default_type;

static_inline void Util_edge_type_init(Util_edge_type& _ctx) {
   _ctx.pre = false;
}

static_inline void Util_change_type_init(Util_change_type& _ctx) {
   _ctx.pre_x = 0.0f;
}

static_inline void Util_dcblock_type_init(Util_dcblock_type& _ctx) {
   _ctx.x1 = 0.0f;
   _ctx.y1 = 0.0f;
}

static_inline void Util_smooth_type_init(Util_smooth_type& _ctx) {
   _ctx.x = 0.0f;
}

static_inline void Util_average2_type_init(Util_average2_type& _ctx) {
   _ctx.x0 = 0.0f;
}

static_inline float Util_cvToPitch(float cv) {
   return 24.0f + 120.0f * cv;
}

static_inline float Util_pitchToRate_1024_raw_c0(int32_t index) {
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_1024_raw_c1(int32_t index) {
   return Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_1024_raw_c2(int32_t index) {
   return Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_1024(float pitch) {
   int32_t index = int_clip(float_to_int(pitch * 0.2440945f), 0, 31);
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)] + pitch * (Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)] + Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)] * pitch);
}

static_inline float Util_cvToRate_1024_raw_c0(int32_t index) {
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_1024_raw_c1(int32_t index) {
   return Util_cvToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_1024_raw_c2(int32_t index) {
   return Util_cvToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_1024(float cv) {
   int32_t index = int_clip(float_to_int(cv * 34.4444445f), 0, 31);
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)] + cv * (Util_cvToRate_1024_c1[static_cast<uint32_t>(index)] + Util_cvToRate_1024_c2[static_cast<uint32_t>(index)] * cv);
}

static_inline void Tricore_default(Tricore_process_type& _ctx) {
   _ctx.rate = Util_cvToRate_1024(0.0f);
}

void Tricore_process_type_init(Tricore_process_type& _ctx);

static_inline void Tricore_noteOn_type_init(Tricore_noteOn_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Tricore_noteOff_type_init(Tricore_noteOff_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Tricore_controlChange_type_init(Tricore_controlChange_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline void Tricore_default_type_init(Tricore_default_type& _ctx) {
   Tricore_process_type_init(_ctx);
}

static_inline float Svf_calc_g_raw_c0(int32_t index) {
   return Svf_calc_g_c0[static_cast<uint32_t>(index)];
}

static_inline float Svf_calc_g_raw_c1(int32_t index) {
   return Svf_calc_g_c1[static_cast<uint32_t>(index)];
}

static_inline float Svf_calc_g_raw_c2(int32_t index) {
   return Svf_calc_g_c2[static_cast<uint32_t>(index)];
}

static_inline float Svf_calc_g(float cv) {
   int32_t index = int_clip(float_to_int(cv * 141.1111112f), 0, 127);
   return Svf_calc_g_c0[static_cast<uint32_t>(index)] + cv * (Svf_calc_g_c1[static_cast<uint32_t>(index)] + Svf_calc_g_c2[static_cast<uint32_t>(index)] * cv);
}

static_inline void Svf_default(Svf_process_type& _ctx) {
   _ctx.g = Svf_calc_g(0.0f);
   _ctx.r = 1.0f;
   _ctx.inv_den = 1.0f / (1.0f + 0.0f * _ctx.g + _ctx.g * _ctx.g);
}

void Svf_process_type_init(Svf_process_type& _ctx);

static_inline void Svf_noteOn_type_init(Svf_noteOn_type& _ctx) {
   Svf_process_type_init(_ctx);
}

static_inline void Svf_noteOff_type_init(Svf_noteOff_type& _ctx) {
   Svf_process_type_init(_ctx);
}

static_inline void Svf_controlChange_type_init(Svf_controlChange_type& _ctx) {
   Svf_process_type_init(_ctx);
}

static_inline void Svf_default_type_init(Svf_default_type& _ctx) {
   Svf_process_type_init(_ctx);
}

static_inline void Lfo_soft_type_init(Lfo_soft_type& _ctx) {
   _ctx.x2 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x4 = 0.0f;
}

void Lfo_process_type_init(Lfo_process_type& _ctx);

static_inline void Lfo_noteOn_type_init(Lfo_noteOn_type& _ctx) {
   Lfo_process_type_init(_ctx);
}

static_inline void Lfo_noteOff_type_init(Lfo_noteOff_type& _ctx) {
   Lfo_process_type_init(_ctx);
}

static_inline void Lfo_controlChange_type_init(Lfo_controlChange_type& _ctx) {
   Lfo_process_type_init(_ctx);
}

static_inline void Lfo_default_type_init(Lfo_default_type& _ctx) {
   Lfo_process_type_init(_ctx);
}

static_inline void Phase_default(Phase_process_type& _ctx) {
   _ctx.rate = Util_cvToRate_1024(0.0f);
}

void Phase_process_type_init(Phase_process_type& _ctx);

static_inline void Phase_noteOn_type_init(Phase_noteOn_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline void Phase_noteOff_type_init(Phase_noteOff_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline void Phase_controlChange_type_init(Phase_controlChange_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline void Phase_default_type_init(Phase_default_type& _ctx) {
   Phase_process_type_init(_ctx);
}

static_inline float Util_cvToperiod_raw_c0(int32_t index) {
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToperiod_raw_c1(int32_t index) {
   return Util_cvToperiod_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToperiod_raw_c2(int32_t index) {
   return Util_cvToperiod_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToperiod(float cv) {
   int32_t index = int_clip(float_to_int(cv * 31.0f), 0, 31);
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)] + cv * (Util_cvToperiod_c1[static_cast<uint32_t>(index)] + Util_cvToperiod_c2[static_cast<uint32_t>(index)] * cv);
}

static_inline void Blit_pulse_start(Blit_pulse_train_type& _ctx) {
   _ctx.m = 1 + 2 * float_to_int(Util_cvToperiod(0.0f));
   _ctx.scale = 1.0f + 2.0f * Util_cvToperiod(0.0f);
}

static_inline void Blit_pulse_train_type_init(Blit_pulse_train_type& _ctx) {
   Util_change_type_init(_ctx.inst_1b05e);
   _ctx.m = 0;
   _ctx.scale = 0.0f;
   Blit_pulse_start(_ctx);
}

static_inline void Blit_pulse_start_type_init(Blit_pulse_start_type& _ctx) {
   Blit_pulse_train_type_init(_ctx);
}

static_inline float Util_pitchToRate_raw_c0(int32_t index) {
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_raw_c1(int32_t index) {
   return Util_pitchToRate_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate_raw_c2(int32_t index) {
   return Util_pitchToRate_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_pitchToRate(float pitch) {
   int32_t index = int_clip(float_to_int(pitch * 0.2440945f), 0, 31);
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)] + pitch * (Util_pitchToRate_c1[static_cast<uint32_t>(index)] + Util_pitchToRate_c2[static_cast<uint32_t>(index)] * pitch);
}

static_inline float Util_cvToRate_raw_c0(int32_t index) {
   return Util_cvToRate_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_raw_c1(int32_t index) {
   return Util_cvToRate_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate_raw_c2(int32_t index) {
   return Util_cvToRate_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_cvToRate(float cv) {
   int32_t index = int_clip(float_to_int(cv * 141.1111112f), 0, 127);
   return Util_cvToRate_c0[static_cast<uint32_t>(index)] + cv * (Util_cvToRate_c1[static_cast<uint32_t>(index)] + Util_cvToRate_c2[static_cast<uint32_t>(index)] * cv);
}

static_inline void Blit_init(Blit_osc_blit_type& _ctx) {
   _ctx.rate = Util_cvToRate(0.0f);
}

void Blit_osc_blit_type_init(Blit_osc_blit_type& _ctx);

static_inline void Blit_init_type_init(Blit_init_type& _ctx) {
   Blit_osc_blit_type_init(_ctx);
}

static_inline void Blit_process_type_init(Blit_process_type& _ctx) {
   Blit_osc_blit_type_init(_ctx.inst_1268b);
}

static_inline void Blit_noteOn_type_init(Blit_noteOn_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline void Blit_noteOff_type_init(Blit_noteOff_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline void Blit_controlChange_type_init(Blit_controlChange_type& _ctx) {
   Blit_process_type_init(_ctx);
}

static_inline void Blit_default_type_init(Blit_default_type& _ctx) {
   Blit_process_type_init(_ctx);
}

void Adsr_do_type_init(Adsr_do_type& _ctx);

void Adsr_process_type_init(Adsr_process_type& _ctx);

static_inline void Adsr_noteOn_type_init(Adsr_noteOn_type& _ctx) {
   Adsr_process_type_init(_ctx);
}

static_inline void Adsr_noteOff_type_init(Adsr_noteOff_type& _ctx) {
   Adsr_process_type_init(_ctx);
}

static_inline void Adsr_controlChange_type_init(Adsr_controlChange_type& _ctx) {
   Adsr_process_type_init(_ctx);
}

static_inline void Adsr_default_type_init(Adsr_default_type& _ctx) {
   Adsr_process_type_init(_ctx);
}

void Voice_4_process_type_init(Voice_4_process_type& _ctx);

static_inline void Voice_4_noteOn_type_init(Voice_4_noteOn_type& _ctx) {
   Voice_4_process_type_init(_ctx);
}

static_inline void Voice_4_noteOff_type_init(Voice_4_noteOff_type& _ctx) {
   Voice_4_process_type_init(_ctx);
}

static_inline void Voice_4_controlChange_type_init(Voice_4_controlChange_type& _ctx) {
   Voice_4_process_type_init(_ctx);
}

static_inline void Voice_4_default_type_init(Voice_4_default_type& _ctx) {
   Voice_4_process_type_init(_ctx);
}

static_inline bool Util_edge(Util_edge_type& _ctx, bool x) {
   bool ret = x && (_ctx.pre == false);
   _ctx.pre = x;
   return ret;
}

static_inline bool Util_change(Util_change_type& _ctx, float x) {
   bool v = _ctx.pre_x != x;
   _ctx.pre_x = x;
   return v;
}

static_inline float Util_map(float x, float x0, float x1, float y0, float y1) {
   return y0 + ((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0));
}

static_inline float Util_dcblock(Util_dcblock_type& _ctx, float x0) {
   float y0 = x0 + (- _ctx.x1) + 0.995f * _ctx.y1;
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

static_inline float Util_smooth(Util_smooth_type& _ctx, float input) {
   _ctx.x = 0.005f * (input + (- _ctx.x)) + _ctx.x;
   return _ctx.x;
}

static_inline float Util_average2(Util_average2_type& _ctx, float x1) {
   float result = 0.5f * (x1 + _ctx.x0);
   _ctx.x0 = x1;
   return result;
}

static_inline float Util_cubic_clipper(float x) {
   if (x <= -0.6666666f) {
      return -0.6666666f;
   }
   else {
      if (x >= 0.6666667f) {
         return 0.6666667f;
      }
      else {
         return x + -0.3333333f * x * x * x;
      }
   }
}

static_inline float Util_pitchToCv(float pitch) {
   return -0.2f + 0.0083334f * pitch;
}

static_inline float Util_cvTokHz_raw_c0(int32_t index) {
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)];
}

static_inline float Util_cvTokHz_raw_c1(int32_t index) {
   return Util_cvTokHz_c1[static_cast<uint32_t>(index)];
}

static_inline float Util_cvTokHz_raw_c2(int32_t index) {
   return Util_cvTokHz_c2[static_cast<uint32_t>(index)];
}

static_inline float Util_cvTokHz(float cv) {
   int32_t index = int_clip(float_to_int(cv * 31.0f), 0, 31);
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)] + cv * (Util_cvTokHz_c1[static_cast<uint32_t>(index)] + Util_cvTokHz_c2[static_cast<uint32_t>(index)] * cv);
}

float Tricore_process(Tricore_process_type& _ctx, float cv, float reset, float disable);

static_inline void Tricore_noteOn(Tricore_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Tricore_noteOff(Tricore_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Tricore_controlChange(Tricore_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline float Saturate_soft_tanh_table_raw_c0(int32_t index) {
   return Saturate_soft_tanh_table_c0[static_cast<uint32_t>(index)];
}

static_inline float Saturate_soft_tanh_table_raw_c1(int32_t index) {
   return Saturate_soft_tanh_table_c1[static_cast<uint32_t>(index)];
}

static_inline float Saturate_soft_tanh_table_raw_c2(int32_t index) {
   return Saturate_soft_tanh_table_c2[static_cast<uint32_t>(index)];
}

static_inline float Saturate_soft_tanh_table(float x) {
   int32_t index = int_clip(float_to_int((x - -24.0f) * 5.0f), 0, 240);
   return Saturate_soft_tanh_table_c0[static_cast<uint32_t>(index)] + x * (Saturate_soft_tanh_table_c1[static_cast<uint32_t>(index)] + Saturate_soft_tanh_table_c2[static_cast<uint32_t>(index)] * x);
}

static_inline float Saturate_soft_process(float x) {
   return Saturate_soft_tanh_table(x);
}

static_inline void Saturate_soft_noteOn(int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Saturate_soft_noteOff(int32_t note, int32_t channel) {
}

static_inline void Saturate_soft_controlChange(int32_t control, int32_t value, int32_t channel) {
}

static_inline void Saturate_soft_default() {
}

float Svf_process(Svf_process_type& _ctx, float x, float cv, float q, int32_t sel);

static_inline void Svf_noteOn(Svf_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Svf_noteOff(Svf_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Svf_controlChange(Svf_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline float Saturate_tanh_table_raw_c0(int32_t index) {
   return Saturate_tanh_table_c0[static_cast<uint32_t>(index)];
}

static_inline float Saturate_tanh_table_raw_c1(int32_t index) {
   return Saturate_tanh_table_c1[static_cast<uint32_t>(index)];
}

static_inline float Saturate_tanh_table_raw_c2(int32_t index) {
   return Saturate_tanh_table_c2[static_cast<uint32_t>(index)];
}

static_inline float Saturate_tanh_table(float x) {
   int32_t index = int_clip(float_to_int((x - -24.0f) * 5.0f), 0, 240);
   return Saturate_tanh_table_c0[static_cast<uint32_t>(index)] + x * (Saturate_tanh_table_c1[static_cast<uint32_t>(index)] + Saturate_tanh_table_c2[static_cast<uint32_t>(index)] * x);
}

static_inline float Saturate_process(float x) {
   return Saturate_tanh_table(x);
}

static_inline void Saturate_noteOn(int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Saturate_noteOff(int32_t note, int32_t channel) {
}

static_inline void Saturate_controlChange(int32_t control, int32_t value, int32_t channel) {
}

static_inline void Saturate_default() {
}

static_inline float Lfo_soft(Lfo_soft_type& _ctx, float x1) {
   float o = 0.25f * (x1 + _ctx.x2 + _ctx.x3 + _ctx.x4);
   float _t_temp_0 = x1;
   float _t_temp_1 = _ctx.x2;
   float _t_temp_2 = _ctx.x3;
   _ctx.x2 = _t_temp_0;
   _ctx.x3 = _t_temp_1;
   _ctx.x4 = _t_temp_2;
   return o;
}

float Lfo_process(Lfo_process_type& _ctx, float cv, float shape, float reset);

static_inline void Lfo_noteOn(Lfo_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Lfo_noteOff(Lfo_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Lfo_controlChange(Lfo_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Lfo_default(Lfo_process_type& _ctx) {
}

static_inline float Tables_nsine_raw_c0(int32_t index) {
   return Tables_nsine_c0[static_cast<uint32_t>(index)];
}

static_inline float Tables_nsine_raw_c1(int32_t index) {
   return Tables_nsine_c1[static_cast<uint32_t>(index)];
}

static_inline float Tables_nsine_raw_c2(int32_t index) {
   return Tables_nsine_c2[static_cast<uint32_t>(index)];
}

static_inline float Tables_nsine(float x) {
   int32_t index = int_clip(float_to_int(x * 127.0f), 0, 127);
   return Tables_nsine_c0[static_cast<uint32_t>(index)] + x * (Tables_nsine_c1[static_cast<uint32_t>(index)] + Tables_nsine_c2[static_cast<uint32_t>(index)] * x);
}

float Phase_process(Phase_process_type& _ctx, float cv, float reset);

static_inline void Phase_noteOn(Phase_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Phase_noteOff(Phase_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Phase_controlChange(Phase_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

float Blit_pulse_train(Blit_pulse_train_type& _ctx, float cv, float phase);

float Blit_osc_blit(Blit_osc_blit_type& _ctx, float cv, float pw, float wave);

static_inline float Blit_process(Blit_process_type& _ctx, float cv, float pw, float wave) {
   return Blit_osc_blit(_ctx.inst_1268b, cv, pw, wave);
}

static_inline void Blit_noteOn(Blit_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Blit_noteOff(Blit_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Blit_controlChange(Blit_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Blit_default(Blit_process_type& _ctx) {
}

float Adsr_do(Adsr_do_type& _ctx, float gate, float a, float d, float s, float r);

static_inline float Adsr_process(Adsr_process_type& _ctx, float gate) {
   return Adsr_do(_ctx.inst_1a025, gate, _ctx.knob1, _ctx.knob2, _ctx.knob3, _ctx.knob4);
}

static_inline void Adsr_noteOn(Adsr_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Adsr_noteOff(Adsr_process_type& _ctx, int32_t note, int32_t channel) {
}

void Adsr_controlChange(Adsr_process_type& _ctx, int32_t control, int32_t value, int32_t channel);

static_inline void Adsr_default(Adsr_process_type& _ctx) {
   _ctx.knob1 = 0.0f;
   _ctx.knob2 = 0.5f;
   _ctx.knob3 = 1.0f;
   _ctx.knob4 = 0.5f;
}

static_inline float Voice_4_process(Voice_4_process_type& _ctx, float cv, float vel, float gate) {
   float lfo = Lfo_process(_ctx.inst_1d695, _ctx.lfo_rate, _ctx.lfo_shape, gate * _ctx.lfo_reset);
   float mod_pw = lfo * _ctx.lfo_pw;
   float mod_cv = lfo * _ctx.lfo_cv;
   float mod_flt = lfo * _ctx.lfo_flt;
   float o1 = Blit_process(_ctx.inst_28b95, 0.0001f + cv + mod_cv, mod_pw + _ctx.pw1, 0.0f);
   float o2 = Blit_process(_ctx.inst_38b95, 0.0002f + cv + mod_cv, mod_pw + _ctx.pw2, 1.0f);
   float o3 = Blit_process(_ctx.inst_48b95, cv + mod_cv + _ctx.pw3, mod_pw + _ctx.pw1, 0.0f);
   float sub = Saturate_process((2.0f + 5.0f * _ctx.pw4) * Tricore_process(_ctx.inst_53c95, (cv + mod_cv), 0.0f, 1.0f));
   float o = o1 * _ctx.level1 + o2 * _ctx.level2 + o3 * _ctx.level3 + sub * _ctx.level4;
   float f = Svf_process(_ctx.inst_6a295, o, mod_flt + _ctx.flt_cut, _ctx.flt_res, _ctx.flt_shape);
   float env = Adsr_do(_ctx.inst_7a095, gate, _ctx.attack, _ctx.decay, _ctx.sustain, _ctx.release);
   return env * f;
}

static_inline void Voice_4_noteOn(Voice_4_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Voice_4_noteOff(Voice_4_process_type& _ctx, int32_t note, int32_t channel) {
}

void Voice_4_controlChange(Voice_4_process_type& _ctx, int32_t control, int32_t value, int32_t channel);

static_inline void Voice_4_default(Voice_4_process_type& _ctx) {
}


#endif // VOICE_4_H
