/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */

#include "svf.h"

void Svf_process_type_init(Svf_process_type& _ctx) {
   _ctx.g = 0.0f;
   Util_change_type_init(_ctx.inst_1b0a2);
   Util_change_type_init(_ctx.inst_2b0a2);
   _ctx.inv_den = 0.0f;
   _ctx.r = 0.0f;
   _ctx.z1 = 0.0f;
   _ctx.z2 = 0.0f;
}

float Svf_process(Svf_process_type& _ctx, float x, float cv, float q, int32_t sel) {
   q = (0.5f + q);
   if (Util_change(_ctx.inst_1b0a2, cv) || Util_change(_ctx.inst_2b0a2, q)) {
      _ctx.g = Svf_calc_g(cv);
      _ctx.r = (1.0f / (2.0f * (q + float_eps())));
      _ctx.inv_den = (1.0f / (1.0f + ((2.0f * (_ctx.r * _ctx.g)) + (_ctx.g * _ctx.g))));
   }
   float high = ((x + ((- (((2.0f * _ctx.r) + _ctx.g) * _ctx.z1)) + (- _ctx.z2))) * _ctx.inv_den);
   float band = ((high * _ctx.g) + _ctx.z1);
   float low = ((band * _ctx.g) + _ctx.z2);
   float notch = (high + low);
   _ctx.z1 = (band + (high * _ctx.g));
   _ctx.z2 = (low + (band * _ctx.g));
   float output = 0.0f;
   if (sel == 0) {
      output = low;
   }
   else {
      if (sel == 1) {
         output = high;
      }
      else {
         if (sel == 2) {
            output = band;
         }
         else {
            output = notch;
         }
      }
   }
   return Saturate_soft_process(output);
}

