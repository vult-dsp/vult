/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */

#include "sawcore.h"

void Sawcore_process_type_init(Sawcore_process_type& _ctx) {
   Util_change_type_init(_ctx.inst_1b0dd);
   Util_edge_type_init(_ctx.inst_204dd);
   Sawcore_ptr_w2_type_init(_ctx.inst_324dd);
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.reset_phase = 0x0 /* 0.000000 */;
   _ctx.reset_state = false;
   Sawcore_default(_ctx);
}

void Sawcore_ptr_w2(Sawcore_ptr_w2_type& _ctx, fix16_t phase, fix16_t rate) {
   fix16_t s1 = rate;
   fix16_t s2 = (rate + s1);
   fix16_t out2 = 0.0f;
   bool out1 = false;
   if (phase < s1) {
      fix16_t d = fix_div(phase, rate);
      fix16_t t2 = fix_mul(0x40 /* 0.000977 */, s2);
      out1 = false;
      out2 = (0x10000 /* 1.000000 */ + fix_mul(d, (t2 + (- d))));
   }
   else {
      if (phase < s2) {
         fix16_t d = fix_div(phase, rate);
         fix16_t t2 = fix_mul(0x40 /* 0.000977 */, s2);
         out1 = false;
         out2 = (0x30000 /* 3.000000 */ + fix_mul(d, (-0x40000 /* -4.000000 */ + (d + t2))));
      }
      else {
         out1 = true;
         out2 = 0x0 /* 0.000000 */;
      }
   }
   _ctx.Sawcore_ptr_w2_ret_0 = out1;
   _ctx.Sawcore_ptr_w2_ret_1 = out2;
   return ;
}

fix16_t Sawcore_process(Sawcore_process_type& _ctx, fix16_t cv, fix16_t reset) {
   fix16_t transition = 0x0 /* 0.000000 */;
   fix16_t out = 0x0 /* 0.000000 */;
   if (Util_change(_ctx.inst_1b0dd, cv)) {
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   fix16_t new_phase = (_ctx.phase + _ctx.rate);
   bool do_reset = Util_edge(_ctx.inst_204dd, (reset > 0x0 /* 0.000000 */));
   bool do_wrap = (new_phase > 0x4000000 /* 1024.000000 */);
   if (do_reset || do_wrap) {
      _ctx.reset_phase = _ctx.phase;
      if (do_wrap) {
         new_phase = (-0x4000000 /* -1024.000000 */ + new_phase);
      }
      else {
         new_phase = 0x0 /* 0.000000 */;
      }
      _ctx.reset_state = true;
   }
   _ctx.phase = new_phase;
   out = _ctx.phase;
   if (_ctx.reset_state) {
      fix16_t ptr = 0.0f;
      bool done = false;
      Sawcore_ptr_w2(_ctx.inst_324dd, _ctx.phase, _ctx.rate);
      done = _ctx.inst_324dd.Sawcore_ptr_w2_ret_0;
      ptr = _ctx.inst_324dd.Sawcore_ptr_w2_ret_1;
      transition = fix_mul(0x8000 /* 0.500000 */, fix_mul((0x10000 /* 1.000000 */ + ptr), _ctx.reset_phase));
      if (done) {
         _ctx.reset_state = false;
      }
      else {
         out = transition;
      }
   }
   return (-0x10000 /* -1.000000 */ + fix_mul(0x80 /* 0.001953 */, out));
}

