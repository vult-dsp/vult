/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef FIXEDANDFLOAT_H
#define FIXEDANDFLOAT_H

#include "vultin.h"
#include "FixedAndFloat.tables.h"

void FixedAndFloat_test1();

static_inline fix16_t FixedAndFloat_take_fix_return_fixed_raw_c0(int32_t index) {
   return FixedAndFloat_take_fix_return_fixed_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t FixedAndFloat_take_fix_return_fixed_raw_c1(int32_t index) {
   return FixedAndFloat_take_fix_return_fixed_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t FixedAndFloat_take_fix_return_fixed(fix16_t x) {
   fix16_t value = fix_clip((x << 5), 0x0 /* 0.000000 */, 0x200000 /* 32.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return FixedAndFloat_take_fix_return_fixed_c0[static_cast<uint32_t>(index)] + fix_mul(FixedAndFloat_take_fix_return_fixed_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline float FixedAndFloat_take_fix_return_real_raw_c0(int32_t index) {
   return FixedAndFloat_take_fix_return_real_c0[static_cast<uint32_t>(index)];
}

static_inline float FixedAndFloat_take_fix_return_real_raw_c1(int32_t index) {
   return FixedAndFloat_take_fix_return_real_c1[static_cast<uint32_t>(index)];
}

static_inline float FixedAndFloat_take_fix_return_real_raw_c2(int32_t index) {
   return FixedAndFloat_take_fix_return_real_c2[static_cast<uint32_t>(index)];
}

static_inline float FixedAndFloat_take_fix_return_real(fix16_t x) {
   int32_t index = int_clip(fix_to_int(fix_mul(x, 0x1f0000 /* 31.000000 */)), 0, 31);
   return FixedAndFloat_take_fix_return_real_c0[static_cast<uint32_t>(index)] + fix_to_float(x) * (FixedAndFloat_take_fix_return_real_c1[static_cast<uint32_t>(index)] + FixedAndFloat_take_fix_return_real_c2[static_cast<uint32_t>(index)] * fix_to_float(x));
}

static_inline fix16_t FixedAndFloat_take_real_return_fixed_raw_c0(int32_t index) {
   return FixedAndFloat_take_real_return_fixed_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t FixedAndFloat_take_real_return_fixed_raw_c1(int32_t index) {
   return FixedAndFloat_take_real_return_fixed_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t FixedAndFloat_take_real_return_fixed_raw_c2(int32_t index) {
   return FixedAndFloat_take_real_return_fixed_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t FixedAndFloat_take_real_return_fixed(float x) {
   int32_t index = int_clip(float_to_int(x * 31.0f), 0, 31);
   return FixedAndFloat_take_real_return_fixed_c0[static_cast<uint32_t>(index)] + fix_mul(float_to_fix(x), FixedAndFloat_take_real_return_fixed_c1[static_cast<uint32_t>(index)] + fix_mul(FixedAndFloat_take_real_return_fixed_c2[static_cast<uint32_t>(index)], float_to_fix(x)));
}


#endif // FIXEDANDFLOAT_H
