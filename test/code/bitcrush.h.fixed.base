/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef BITCRUSH_H
#define BITCRUSH_H

#include "vultin.h"
#include "bitcrush.tables.h"

static_inline fix16_t Bitcrush_factor_raw_c0(int32_t index) {
   return Bitcrush_factor_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Bitcrush_factor_raw_c1(int32_t index) {
   return Bitcrush_factor_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Bitcrush_factor_raw_c2(int32_t index) {
   return Bitcrush_factor_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Bitcrush_factor(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 0x7f0000 /* 127.000000 */)), 0, 127);
   return Bitcrush_factor_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Bitcrush_factor_c1[static_cast<uint32_t>(index)] + fix_mul(Bitcrush_factor_c2[static_cast<uint32_t>(index)], cv)));
}

static_inline fix16_t Bitcrush_process(fix16_t i, fix16_t cv) {
   fix16_t out = i;
   if (cv == 0x0 /* 0.000000 */) {
      out = i;
   }
   else {
      fix16_t b = Bitcrush_factor(cv);
      int32_t x = fix_to_int(fix_mul(b, i));
      out = fix_div(int_to_fix(x), b);
   }
   return out;
}

static_inline void Bitcrush_noteOn(int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Bitcrush_noteOff(int32_t note, int32_t channel) {
}

static_inline void Bitcrush_controlChange(int32_t control, int32_t value, int32_t channel) {
}

static_inline void Bitcrush_default() {
}


#endif // BITCRUSH_H
