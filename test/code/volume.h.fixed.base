/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef VOLUME_H
#define VOLUME_H

#include "vultin.h"
#include "volume.tables.h"

typedef struct Volume_smooth_type {
   fix16_t x;
} Volume_smooth_type;

typedef struct Volume_process_type {
   Volume_smooth_type inst_1d7d3;
   fix16_t volume;
} Volume_process_type;

typedef struct Volume_process_type Volume_noteOn_type;

typedef struct Volume_process_type Volume_noteOff_type;

typedef struct Volume_process_type Volume_controlChange_type;

typedef struct Volume_process_type Volume_default_type;

static_inline void Volume_smooth_type_init(Volume_smooth_type& _ctx) {
   _ctx.x = 0x0 /* 0.000000 */;
}

static_inline void Volume_process_type_init(Volume_process_type& _ctx) {
   Volume_smooth_type_init(_ctx.inst_1d7d3);
   _ctx.volume = 0x0 /* 0.000000 */;
}

static_inline void Volume_noteOn_type_init(Volume_noteOn_type& _ctx) {
   Volume_process_type_init(_ctx);
}

static_inline void Volume_noteOff_type_init(Volume_noteOff_type& _ctx) {
   Volume_process_type_init(_ctx);
}

static_inline void Volume_controlChange_type_init(Volume_controlChange_type& _ctx) {
   Volume_process_type_init(_ctx);
}

static_inline void Volume_default_type_init(Volume_default_type& _ctx) {
   Volume_process_type_init(_ctx);
}

static_inline fix16_t Volume_smooth(Volume_smooth_type& _ctx, fix16_t input) {
   _ctx.x = (fix_mul(0x147 /* 0.005000 */, (input + (- _ctx.x))) + _ctx.x);
   return _ctx.x;
}

static_inline fix16_t Volume_process(Volume_process_type& _ctx, fix16_t input) {
   return fix_mul(input, Volume_smooth(_ctx.inst_1d7d3, _ctx.volume));
}

static_inline void Volume_noteOn(Volume_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Volume_noteOff(Volume_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Volume_controlChange(Volume_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
   if (control == 30) {
      _ctx.volume = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
}

static_inline void Volume_default(Volume_process_type& _ctx) {
   _ctx.volume = 0x0 /* 0.000000 */;
}


#endif // VOLUME_H
