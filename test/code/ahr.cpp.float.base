/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */

#include "ahr.h"

void Ahr_do_type_init(Ahr_do_type& _ctx) {
   _ctx.Ahr_do_ret_0 = 0.0f;
   _ctx.Ahr_do_ret_1 = 0.0f;
   _ctx.hold_phase = 0.0f;
   Util_edge_type_init(_ctx.inst_104d8);
   Util_edge_type_init(_ctx.inst_204d8);
   _ctx.out = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.state = 0;
   _ctx.target = 0.0f;
}

void Ahr_process_type_init(Ahr_process_type& _ctx) {
   _ctx.Ahr_process_ret_0 = 0.0f;
   _ctx.Ahr_process_ret_1 = 0.0f;
   Ahr_do_type_init(_ctx.inst_1d84b);
   _ctx.knob1 = 0.0f;
   _ctx.knob2 = 0.0f;
   _ctx.knob3 = 0.0f;
}

void Ahr_do(Ahr_do_type& _ctx, float gate, float a, float h, float r) {
   int32_t release = 0;
   int32_t attack = 1;
   int32_t hold = 2;
   int32_t reset = 3;
   bool bgate = gate > 0.0f;
   if (Util_edge(_ctx.inst_104d8, bgate)) {
      _ctx.state = reset;
   }
   float resetting = 0.0f;
   if (_ctx.state == reset) {
      resetting = 1.0f;
   }
   else {
      resetting = 0.0f;
   }
   if (Util_edge(_ctx.inst_204d8, _ctx.out > 1024.0f)) {
      _ctx.hold_phase = 0.0f;
      _ctx.state = hold;
   }
   if ((_ctx.out < 10.0f) && (_ctx.state == reset)) {
      _ctx.state = attack;
   }
   if ((_ctx.hold_phase > 100.0f) && (_ctx.state == hold)) {
      _ctx.state = release;
   }
   if (_ctx.state == reset) {
      _ctx.rate = 0.990099f;
      _ctx.target = 0.0f;
   }
   if (_ctx.state == attack) {
      _ctx.rate = 1.0f / (0.01f + 100.0f * a);
      _ctx.target = 1228.8f;
   }
   if (_ctx.state == hold) {
      float hrate = 1.0f / (0.01f + 100.0f * h);
      _ctx.hold_phase = hrate + _ctx.hold_phase;
   }
   if (_ctx.state == release) {
      _ctx.rate = 1.0f / (0.01f + 100.0f * r);
      _ctx.target = 0.0f;
   }
   _ctx.out = 0.005f * ((- _ctx.out) + _ctx.target) * _ctx.rate + _ctx.out;
   _ctx.Ahr_do_ret_0 = float_clip(0.000976f * _ctx.out, 0.0f, 1.0f);
   _ctx.Ahr_do_ret_1 = resetting;
   return ;
}

void Ahr_process(Ahr_process_type& _ctx, float gate) {
   Ahr_do(_ctx.inst_1d84b, gate, _ctx.knob1, _ctx.knob2, _ctx.knob3);
   float _call_temp_0 = _ctx.inst_1d84b.Ahr_do_ret_0;
   float _call_temp_1 = _ctx.inst_1d84b.Ahr_do_ret_1;
   _ctx.Ahr_process_ret_0 = _call_temp_0;
   _ctx.Ahr_process_ret_1 = _call_temp_1;
   return ;
}

void Ahr_controlChange(Ahr_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
   if (control == 1) {
      _ctx.knob1 = 0.007874f * int_to_float(value);
   }
   if (control == 2) {
      _ctx.knob2 = 0.007874f * int_to_float(value);
   }
   if (control == 3) {
      _ctx.knob3 = 0.007874f * int_to_float(value);
   }
}

