/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */

#include "sawcore.h"

void Sawcore_process_type_init(Sawcore_process_type& _ctx) {
   Util_change_type_init(_ctx.inst_1b0dd);
   Util_edge_type_init(_ctx.inst_204dd);
   Sawcore_ptr_w2_type_init(_ctx.inst_324dd);
   _ctx.phase = 0.0f;
   _ctx.rate = 0.0f;
   _ctx.reset_phase = 0.0f;
   _ctx.reset_state = false;
   Sawcore_default(_ctx);
}

void Sawcore_ptr_w2(Sawcore_ptr_w2_type& _ctx, float phase, float rate) {
   float s1 = rate;
   float s2 = rate + s1;
   float out2 = 0.0f;
   bool out1 = false;
   if (phase < s1) {
      float d = phase / rate;
      float t2 = 0.0009766f * s2;
      out1 = false;
      out2 = 1.0f + d * (t2 + (- d));
   }
   else {
      if (phase < s2) {
         float d = phase / rate;
         float t2 = 0.0009766f * s2;
         out1 = false;
         out2 = 3.0f + d * (-4.0f + d + t2);
      }
      else {
         out1 = true;
         out2 = 0.0f;
      }
   }
   _ctx.Sawcore_ptr_w2_ret_0 = out1;
   _ctx.Sawcore_ptr_w2_ret_1 = out2;
   return ;
}

float Sawcore_process(Sawcore_process_type& _ctx, float cv, float reset) {
   float transition = 0.0f;
   float out = 0.0f;
   if (Util_change(_ctx.inst_1b0dd, cv)) {
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   float new_phase = _ctx.phase + _ctx.rate;
   bool do_reset = Util_edge(_ctx.inst_204dd, reset > 0.0f);
   bool do_wrap = new_phase > 1024.0f;
   if (do_reset || do_wrap) {
      _ctx.reset_phase = _ctx.phase;
      if (do_wrap) {
         new_phase = -1024.0f + new_phase;
      }
      else {
         new_phase = 0.0f;
      }
      _ctx.reset_state = true;
   }
   _ctx.phase = new_phase;
   out = _ctx.phase;
   if (_ctx.reset_state) {
      float ptr = 0.0f;
      bool done = false;
      Sawcore_ptr_w2(_ctx.inst_324dd, _ctx.phase, _ctx.rate);
      done = _ctx.inst_324dd.Sawcore_ptr_w2_ret_0;
      ptr = _ctx.inst_324dd.Sawcore_ptr_w2_ret_1;
      transition = 0.5f * (1.0f + ptr) * _ctx.reset_phase;
      if (done) {
         _ctx.reset_state = false;
      }
      else {
         out = transition;
      }
   }
   return -1.0f + 0.0019532f * out;
}

