/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef PHASEDIST_H
#define PHASEDIST_H

#include "vultin.h"
#include "phasedist.tables.h"

typedef struct Phasedist_smooth_type {
   fix16_t x;
} Phasedist_smooth_type;

typedef struct Phasedist_change_type {
   fix16_t pre_x;
} Phasedist_change_type;

typedef struct Phasedist_phasor_type {
   Phasedist_change_type inst_1e817;
   fix16_t phase;
   fix16_t rate;
} Phasedist_phasor_type;

typedef struct Phasedist_process_type {
   fix16_t detune;
   Phasedist_phasor_type inst_117e9;
   Phasedist_smooth_type inst_275e9;
   Phasedist_phasor_type inst_317e9;
   Phasedist_smooth_type inst_475e9;
   fix16_t pitch;
   fix16_t pre_phase1;
   fix16_t volume;
} Phasedist_process_type;

typedef struct Phasedist_process_type Phasedist_noteOn_type;

typedef struct Phasedist_process_type Phasedist_noteOff_type;

typedef struct Phasedist_process_type Phasedist_controlChange_type;

typedef struct Phasedist_process_type Phasedist_default_type;

static_inline void Phasedist_smooth_type_init(Phasedist_smooth_type& _ctx) {
   _ctx.x = 0x0 /* 0.000000 */;
}

static_inline void Phasedist_change_type_init(Phasedist_change_type& _ctx) {
   _ctx.pre_x = 0x0 /* 0.000000 */;
}

static_inline void Phasedist_phasor_type_init(Phasedist_phasor_type& _ctx) {
   Phasedist_change_type_init(_ctx.inst_1e817);
   _ctx.phase = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
}

void Phasedist_process_type_init(Phasedist_process_type& _ctx);

static_inline void Phasedist_noteOn_type_init(Phasedist_noteOn_type& _ctx) {
   Phasedist_process_type_init(_ctx);
}

static_inline void Phasedist_noteOff_type_init(Phasedist_noteOff_type& _ctx) {
   Phasedist_process_type_init(_ctx);
}

static_inline void Phasedist_controlChange_type_init(Phasedist_controlChange_type& _ctx) {
   Phasedist_process_type_init(_ctx);
}

static_inline void Phasedist_default_type_init(Phasedist_default_type& _ctx) {
   Phasedist_process_type_init(_ctx);
}

static_inline fix16_t Phasedist_smooth(Phasedist_smooth_type& _ctx, fix16_t input) {
   _ctx.x = (fix_mul(0x147 /* 0.005000 */, (input + (- _ctx.x))) + _ctx.x);
   return _ctx.x;
}

static_inline bool Phasedist_change(Phasedist_change_type& _ctx, fix16_t x) {
   bool v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Phasedist_pitchToRate(fix16_t d) {
   return fix_mul(0xc /* 0.000185 */, fix_exp(fix_mul(0xec9 /* 0.057762 */, d)));
}

fix16_t Phasedist_phasor(Phasedist_phasor_type& _ctx, fix16_t pitch, bool reset);

static_inline fix16_t Phasedist_process(Phasedist_process_type& _ctx, fix16_t input) {
   fix16_t phase1 = Phasedist_phasor(_ctx.inst_117e9, _ctx.pitch, false);
   fix16_t comp = (0x10000 /* 1.000000 */ + (- phase1));
   bool reset = (((- phase1) + _ctx.pre_phase1) > 0x8000 /* 0.500000 */);
   _ctx.pre_phase1 = phase1;
   fix16_t phase2 = Phasedist_phasor(_ctx.inst_317e9, (fix_mul(0x200000 /* 32.000000 */, Phasedist_smooth(_ctx.inst_275e9, _ctx.detune)) + _ctx.pitch), reset);
   fix16_t sine = fix_sin(fix_mul(0x6487e /* 6.283185 */, phase2));
   return fix_mul(comp, fix_mul(sine, Phasedist_smooth(_ctx.inst_475e9, _ctx.volume)));
}

static_inline void Phasedist_noteOn(Phasedist_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
   _ctx.pitch = int_to_fix(note);
}

static_inline void Phasedist_noteOff(Phasedist_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Phasedist_controlChange(Phasedist_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
   if (control == 30) {
      _ctx.volume = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
   if (control == 31) {
      _ctx.detune = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
}

static_inline void Phasedist_default(Phasedist_process_type& _ctx) {
   _ctx.volume = 0x10000 /* 1.000000 */;
   _ctx.pitch = 0x2d0000 /* 45.000000 */;
   _ctx.detune = 0x0 /* 0.000000 */;
}


#endif // PHASEDIST_H
