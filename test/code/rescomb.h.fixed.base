/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef RESCOMB_H
#define RESCOMB_H

#include "vultin.h"
#include "rescomb.tables.h"

typedef struct Util_edge_type {
   bool pre;
} Util_edge_type;

typedef struct Util_change_type {
   fix16_t pre_x;
} Util_change_type;

typedef struct Util_dcblock_type {
   fix16_t x1;
   fix16_t y1;
} Util_dcblock_type;

typedef struct Util_smooth_type {
   fix16_t x;
} Util_smooth_type;

typedef struct Util_average2_type {
   fix16_t x0;
} Util_average2_type;

typedef struct Rescomb_delay_type {
   std::array<fix16_t, 675> buffer;
   int32_t write_pos;
} Rescomb_delay_type;

typedef struct Rescomb_do_type {
   Util_change_type inst_1b000;
   Util_dcblock_type inst_26400;
   Rescomb_delay_type inst_3a900;
   fix16_t output;
   fix16_t stone;
} Rescomb_do_type;

typedef struct Rescomb_process_type {
   Rescomb_do_type inst_100b6;
} Rescomb_process_type;

typedef struct Rescomb_process_type Rescomb_noteOn_type;

typedef struct Rescomb_process_type Rescomb_noteOff_type;

typedef struct Rescomb_process_type Rescomb_controlChange_type;

typedef struct Rescomb_process_type Rescomb_default_type;

static_inline void Util_edge_type_init(Util_edge_type& _ctx) {
   _ctx.pre = false;
}

static_inline void Util_change_type_init(Util_change_type& _ctx) {
   _ctx.pre_x = 0x0 /* 0.000000 */;
}

static_inline void Util_dcblock_type_init(Util_dcblock_type& _ctx) {
   _ctx.x1 = 0x0 /* 0.000000 */;
   _ctx.y1 = 0x0 /* 0.000000 */;
}

static_inline void Util_smooth_type_init(Util_smooth_type& _ctx) {
   _ctx.x = 0x0 /* 0.000000 */;
}

static_inline void Util_average2_type_init(Util_average2_type& _ctx) {
   _ctx.x0 = 0x0 /* 0.000000 */;
}

void Rescomb_delay_type_init(Rescomb_delay_type& _ctx);

void Rescomb_do_type_init(Rescomb_do_type& _ctx);

static_inline void Rescomb_process_type_init(Rescomb_process_type& _ctx) {
   Rescomb_do_type_init(_ctx.inst_100b6);
}

static_inline void Rescomb_noteOn_type_init(Rescomb_noteOn_type& _ctx) {
   Rescomb_process_type_init(_ctx);
}

static_inline void Rescomb_noteOff_type_init(Rescomb_noteOff_type& _ctx) {
   Rescomb_process_type_init(_ctx);
}

static_inline void Rescomb_controlChange_type_init(Rescomb_controlChange_type& _ctx) {
   Rescomb_process_type_init(_ctx);
}

static_inline void Rescomb_default_type_init(Rescomb_default_type& _ctx) {
   Rescomb_process_type_init(_ctx);
}

static_inline fix16_t Saturate_soft_tanh_table_raw_c0(int32_t index) {
   return Saturate_soft_tanh_table_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_soft_tanh_table_raw_c1(int32_t index) {
   return Saturate_soft_tanh_table_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Saturate_soft_tanh_table(fix16_t x) {
   fix16_t value = fix_clip(fix_mul(x - -0x180000 /* -24.000000 */, 0x50000 /* 5.000000 */), 0x0 /* 0.000000 */, 0xf00000 /* 240.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Saturate_soft_tanh_table_c0[static_cast<uint32_t>(index)] + fix_mul(Saturate_soft_tanh_table_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline fix16_t Saturate_soft_process(fix16_t x) {
   return Saturate_soft_tanh_table(x);
}

static_inline void Saturate_soft_noteOn(int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Saturate_soft_noteOff(int32_t note, int32_t channel) {
}

static_inline void Saturate_soft_controlChange(int32_t control, int32_t value, int32_t channel) {
}

static_inline void Saturate_soft_default() {
}

static_inline bool Util_edge(Util_edge_type& _ctx, bool x) {
   bool ret = x && (_ctx.pre == false);
   _ctx.pre = x;
   return ret;
}

static_inline bool Util_change(Util_change_type& _ctx, fix16_t x) {
   bool v = _ctx.pre_x != x;
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1) {
   return y0 + fix_div(fix_mul(x + (- x0), y1 + (- y0)), x1 + (- x0));
}

static_inline fix16_t Util_dcblock(Util_dcblock_type& _ctx, fix16_t x0) {
   fix16_t y0 = x0 + (- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */, _ctx.y1);
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

static_inline fix16_t Util_smooth(Util_smooth_type& _ctx, fix16_t input) {
   _ctx.x = fix_mul(0x147 /* 0.005000 */, input + (- _ctx.x)) + _ctx.x;
   return _ctx.x;
}

static_inline fix16_t Util_average2(Util_average2_type& _ctx, fix16_t x1) {
   fix16_t result = ((x1 + _ctx.x0) >> 1);
   _ctx.x0 = x1;
   return result;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x) {
   if (x <= -0xaaaa /* -0.666667 */) {
      return -0xaaaa /* -0.666667 */;
   }
   else {
      if (x >= 0xaaaa /* 0.666667 */) {
         return 0xaaaa /* 0.666667 */;
      }
      else {
         return x + fix_mul(-0x5555 /* -0.333333 */, fix_mul(x, fix_mul(x, x)));
      }
   }
}

static_inline fix16_t Util_pitchToRate_1024_raw_c0(int32_t index) {
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024_raw_c1(int32_t index) {
   return Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024(fix16_t pitch) {
   fix16_t value = fix_clip(fix_mul(pitch, 0x3e7c /* 0.244094 */), 0x0 /* 0.000000 */, 0x1f0000 /* 31.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline fix16_t Util_pitchToRate_raw_c0(int32_t index) {
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_raw_c1(int32_t index) {
   return Util_pitchToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate(fix16_t pitch) {
   fix16_t value = fix_clip(fix_mul(pitch, 0x3e7c /* 0.244094 */), 0x0 /* 0.000000 */, 0x1f0000 /* 31.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline fix16_t Util_cvToPitch(fix16_t cv) {
   return 0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */, cv);
}

static_inline fix16_t Util_cvToRate_1024_raw_c0(int32_t index) {
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024_raw_c1(int32_t index) {
   return Util_cvToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024(fix16_t cv) {
   fix16_t value = fix_clip(fix_mul(cv, 0x2271c7 /* 34.444444 */), 0x0 /* 0.000000 */, 0x1f0000 /* 31.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_1024_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline fix16_t Util_cvToRate_raw_c0(int32_t index) {
   return Util_cvToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_raw_c1(int32_t index) {
   return Util_cvToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate(fix16_t cv) {
   fix16_t value = fix_clip(fix_mul(cv, 0x8d1c71 /* 141.111111 */), 0x0 /* 0.000000 */, 0x7f0000 /* 127.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Util_cvToRate_c0[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline fix16_t Util_pitchToCv(fix16_t pitch) {
   return -0x3333 /* -0.200000 */ + fix_mul(0x222 /* 0.008333 */, pitch);
}

static_inline fix16_t Util_cvToperiod_raw_c0(int32_t index) {
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod_raw_c1(int32_t index) {
   return Util_cvToperiod_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod(fix16_t cv) {
   fix16_t value = fix_clip(fix_mul(cv, 0x1f0000 /* 31.000000 */), 0x0 /* 0.000000 */, 0x1f0000 /* 31.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)] + fix_mul(Util_cvToperiod_c1[static_cast<uint32_t>(index)], decimal);
}

static_inline fix16_t Util_cvTokHz_raw_c0(int32_t index) {
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz_raw_c1(int32_t index) {
   return Util_cvTokHz_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz(fix16_t cv) {
   fix16_t value = fix_clip(fix_mul(cv, 0x1f0000 /* 31.000000 */), 0x0 /* 0.000000 */, 0x1f0000 /* 31.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)] + fix_mul(Util_cvTokHz_c1[static_cast<uint32_t>(index)], decimal);
}

fix16_t Rescomb_delay(Rescomb_delay_type& _ctx, fix16_t x, fix16_t cv);

static_inline fix16_t Rescomb_toneCurve_raw_c0(int32_t index) {
   return Rescomb_toneCurve_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Rescomb_toneCurve_raw_c1(int32_t index) {
   return Rescomb_toneCurve_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Rescomb_toneCurve(fix16_t tone) {
   fix16_t value = fix_clip(fix_mul(tone - -0x13333 /* -1.200000 */, 0x1a4000 /* 26.250000 */), 0x0 /* 0.000000 */, 0x3f0000 /* 63.000000 */);
   int32_t index = fix_to_int(value);
   fix16_t decimal = value - fix_floor(value);
   return Rescomb_toneCurve_c0[static_cast<uint32_t>(index)] + fix_mul(Rescomb_toneCurve_c1[static_cast<uint32_t>(index)], decimal);
}

fix16_t Rescomb_do(Rescomb_do_type& _ctx, fix16_t in, fix16_t cv, fix16_t tone, fix16_t res);

static_inline fix16_t Rescomb_process(Rescomb_process_type& _ctx, fix16_t in, fix16_t cv, fix16_t tone, fix16_t res) {
   return Rescomb_do(_ctx.inst_100b6, in, cv, tone, res);
}

static_inline void Rescomb_noteOn(Rescomb_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Rescomb_noteOff(Rescomb_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Rescomb_controlChange(Rescomb_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Rescomb_default(Rescomb_process_type& _ctx) {
}


#endif // RESCOMB_H
