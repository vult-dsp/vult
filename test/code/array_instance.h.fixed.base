/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef ARRAY_INSTANCE_H
#define ARRAY_INSTANCE_H

#include "vultin.h"
#include "array_instance.tables.h"

typedef struct Array_instance_counter_type {
   int32_t x;
} Array_instance_counter_type;

typedef struct Array_instance_foo_type {
   std::array<Array_instance_counter_type, 2> x;
} Array_instance_foo_type;

static_inline void Array_instance_counter_type_init(Array_instance_counter_type& _ctx) {
   _ctx.x = 0;
}

static_inline void Array_instance_foo_type_init(Array_instance_foo_type& _ctx) {
   int32_t i_0 = 0;
   while (i_0 < 2) {
      Array_instance_counter_type_init(_ctx.x[static_cast<uint32_t>(i_0)]);
      i_0 = 1 + i_0;
   }
}

static_inline int32_t Array_instance_counter(Array_instance_counter_type& _ctx) {
   _ctx.x = 1 + _ctx.x;
   return _ctx.x;
}

static_inline int32_t Array_instance_incr(Array_instance_counter_type& ctx) {
   ctx.x = 1 + ctx.x;
   return ctx.x;
}

static_inline int32_t Array_instance_foo(Array_instance_foo_type& _ctx) {
   int32_t i = 0;
   while (i < 2) {
      Array_instance_counter(_ctx.x[static_cast<uint32_t>(i)]);
      i = 1 + i;
   }
   return _ctx.x[static_cast<uint32_t>(1)].x;
}


#endif // ARRAY_INSTANCE_H
