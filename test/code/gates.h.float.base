/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef GATES_H
#define GATES_H

#include "vultin.h"
#include "gates.tables.h"

typedef struct Gates_gates_noteOn_type {
   float Gates_gates_state_ret_0;
   float Gates_gates_state_ret_1;
   float Gates_gates_state_ret_2;
   float Gates_gates_state_ret_3;
   float Gates_gates_state_ret_4;
   float Gates_gates_state_ret_5;
   float Gates_gates_state_ret_6;
   float Gates_gates_state_ret_7;
   std::array<int32_t, 8> vel;
} Gates_gates_noteOn_type;

typedef struct Gates_gates_noteOn_type Gates_gates_noteOff_type;

typedef struct Gates_gates_noteOn_type Gates_gates_state_type;

typedef struct Gates_process_type {
   float Gates_process_ret_0;
   float Gates_process_ret_1;
   float Gates_process_ret_2;
   float Gates_process_ret_3;
   float Gates_process_ret_4;
   float Gates_process_ret_5;
   float Gates_process_ret_6;
   float Gates_process_ret_7;
   int32_t channel_in;
   Gates_gates_noteOn_type gates_dc3a;
} Gates_process_type;

typedef struct Gates_process_type Gates_noteOn_type;

typedef struct Gates_process_type Gates_noteOff_type;

typedef struct Gates_process_type Gates_controlChange_type;

typedef struct Gates_process_type Gates_default_type;

void Gates_gates_noteOn_type_init(Gates_gates_noteOn_type& _ctx);

static_inline void Gates_gates_noteOff_type_init(Gates_gates_noteOff_type& _ctx) {
   Gates_gates_noteOn_type_init(_ctx);
}

static_inline void Gates_gates_state_type_init(Gates_gates_state_type& _ctx) {
   Gates_gates_noteOn_type_init(_ctx);
}

void Gates_process_type_init(Gates_process_type& _ctx);

static_inline void Gates_noteOn_type_init(Gates_noteOn_type& _ctx) {
   Gates_process_type_init(_ctx);
}

static_inline void Gates_noteOff_type_init(Gates_noteOff_type& _ctx) {
   Gates_process_type_init(_ctx);
}

static_inline void Gates_controlChange_type_init(Gates_controlChange_type& _ctx) {
   Gates_process_type_init(_ctx);
}

static_inline void Gates_default_type_init(Gates_default_type& _ctx) {
   Gates_process_type_init(_ctx);
}

static_inline float Gates_velToCV(int32_t vel) {
   return (0.00787401574803f * int_to_float(vel));
}

static_inline void Gates_gates_noteOn(Gates_gates_noteOn_type& _ctx, int32_t note, int32_t velocity) {
   if ((note >= 36) && (note <= 43)) {
      int32_t n = (-36 + note);
      _ctx.vel[static_cast<uint32_t>(n)] = velocity;
   }
}

static_inline void Gates_gates_noteOff(Gates_gates_noteOn_type& _ctx, int32_t note) {
   if ((note >= 36) && (note <= 43)) {
      int32_t n = (-36 + note);
      _ctx.vel[static_cast<uint32_t>(n)] = 0;
   }
}

void Gates_gates_state(Gates_gates_noteOn_type& _ctx);

void Gates_process(Gates_process_type& _ctx, int32_t c);

static_inline void Gates_noteOn(Gates_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
   if (_ctx.channel_in == channel) {
      Gates_gates_noteOn(_ctx.gates_dc3a, note, velocity);
   }
}

static_inline void Gates_noteOff(Gates_process_type& _ctx, int32_t note, int32_t channel) {
   if (_ctx.channel_in == channel) {
      Gates_gates_noteOff(_ctx.gates_dc3a, note);
   }
}

static_inline void Gates_controlChange(Gates_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Gates_default(Gates_process_type& _ctx) {
}


#endif // GATES_H
