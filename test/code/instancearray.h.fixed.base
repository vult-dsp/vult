/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef INSTANCEARRAY_H
#define INSTANCEARRAY_H

#include "vultin.h"
#include "instancearray.tables.h"

typedef struct Instancearray_counter_type {
   fix16_t total;
} Instancearray_counter_type;

typedef struct Instancearray_test1_type {
   std::array<Instancearray_counter_type, 4> instances;
} Instancearray_test1_type;

typedef struct Instancearray_test2_type {
   Instancearray_counter_type case1;
   Instancearray_counter_type case2;
} Instancearray_test2_type;

static_inline void Instancearray_counter_type_init(Instancearray_counter_type& _ctx) {
   _ctx.total = 0x0 /* 0.000000 */;
}

static_inline void Instancearray_test1_type_init(Instancearray_test1_type& _ctx) {
   int32_t i_0 = 0;
   while (i_0 < 4) {
      Instancearray_counter_type_init(_ctx.instances[static_cast<uint32_t>(i_0)]);
      i_0 = 1 + i_0;
   }
}

static_inline void Instancearray_test2_type_init(Instancearray_test2_type& _ctx) {
   Instancearray_counter_type_init(_ctx.case1);
   Instancearray_counter_type_init(_ctx.case2);
}

static_inline fix16_t Instancearray_counter(Instancearray_counter_type& _ctx) {
   _ctx.total = 0x10000 /* 1.000000 */ + _ctx.total;
   return _ctx.total;
}

static_inline fix16_t Instancearray_test1(Instancearray_test1_type& _ctx) {
   fix16_t sum = 0x0 /* 0.000000 */;
   int32_t i = 0;
   while (i < 4) {
      sum = sum + Instancearray_counter(_ctx.instances[static_cast<uint32_t>(i)]);
      i = 1 + i;
   }
   return sum;
}

static_inline void Instancearray_test2(Instancearray_test2_type& _ctx) {
   Instancearray_counter(_ctx.case1);
   Instancearray_counter(_ctx.case2);
}


#endif // INSTANCEARRAY_H
