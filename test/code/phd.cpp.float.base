/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */

#include "phd.h"

void Phase_process_type_init(Phase_process_type& _ctx) {
   Util_change_type_init(_ctx.inst_1b08a);
   Util_edge_type_init(_ctx.inst_2048a);
   _ctx.phase = 0.0f;
   _ctx.rate = 0.0f;
   Phase_default(_ctx);
}

float Phase_process(Phase_process_type& _ctx, float cv, float reset) {
   if (Util_change(_ctx.inst_1b08a, cv)) {
      _ctx.rate = Util_cvToRate_1024(cv);
   }
   if (Util_edge(_ctx.inst_2048a, reset > 0.5f)) {
      _ctx.phase = 0.0f;
   }
   else {
      _ctx.phase = _ctx.phase + _ctx.rate;
   }
   if (_ctx.phase > 1024.0f) {
      _ctx.phase = -1024.0f + _ctx.phase;
   }
   else {
      _ctx.phase = _ctx.phase;
   }
   return 0.000976f * _ctx.phase;
}

float Phd_process(Phd_process_type& _ctx, float cv, float detune) {
   float phase1 = Phase_process(_ctx.inst_18aec, cv, 0.0f);
   float comp = 1.0f + (- phase1);
   float reset = (- phase1) + _ctx.pre_phase1;
   _ctx.pre_phase1 = phase1;
   float phase2 = Phase_process(_ctx.inst_38aec, cv + Util_smooth(_ctx.inst_295ec, 0.5f * detune), reset);
   float sine = Tables_nsine(phase2);
   return comp * sine;
}

