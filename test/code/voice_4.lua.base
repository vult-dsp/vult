
function ifExpressionValue(cond,then_,else_) if cond then return then_ else return else_ end end
function ifExpression(cond,then_,else_) if cond then return then_() else return else_() end end
function eps()              return 1e-18 end
function pi()               return 3.1415926535897932384 end
function random()           return math.random() end
function irandom()          return math.floor(math.random() * 4294967296) end
function clip(x,low,high)   if x > high then return high else if x < low then return low else return x end end end
function real(x)            return x end
function int(x)             local int_part,_ = math.modf(x) return int_part end
function sin(x)             return math.sin(x) end
function cos(x)             return math.cos(x) end
function abs(x)             return math.abs(x) end
function exp(x)             return math.exp(x) end
function floor(x)           return math.floor(x) end
function tan(x)             return math.tan(x) end
function tanh(x)            return math.tanh(x) end
function sqrt(x)            return x end
function set(a, i, v)       a[i+1]=v end
function get(a, i)          return a[i+1] end
function intDiv(a, b)       return math.floor(a / b) end

function Util_edge_type_alloc()
   local _ctx = {};
   _ctx.pre = false
   return _ctx
end

function Util_change_type_alloc()
   local _ctx = {};
   _ctx.pre_x = 0.
   return _ctx
end

function Util_dcblock_type_alloc()
   local _ctx = {};
   _ctx.x1 = 0.
   _ctx.y1 = 0.
   return _ctx
end

function Util_smooth_type_alloc()
   local _ctx = {};
   _ctx.x = 0.
   return _ctx
end

function Util_average2_type_alloc()
   local _ctx = {};
   _ctx.x0 = 0.
   return _ctx
end

function Util_cvToPitch(cv)
   return (24. + (120. * cv))
end

local Util_pitchToRate_1024_c0 = {0.18985, 0.19133, 0.19869, 0.21943, 0.26568, 0.35644, 0.52066, 0.80156, 1.26276, 1.99657, 3.13555, 4.86835, 7.46128, 11.28773, 16.86801, 24.92333, 36.44852, 52.8099, 75.87661, 108.19658, 153.23162, 215.67106, 301.84943, 420.30172, 582.50035, 803.83195, 1104.8901, 1513.18404, 2065.39426, 2810.34658, 3812.92907, 5159.24518}
local Util_pitchToRate_1024_c1 = {0.01092, 0.01018, 0.00834, 0.00487, -0.00093, -0.01006, -0.02382, -0.044, -0.073, -0.11402, -0.17134, -0.25062, -0.35938, -0.50754, -0.7082, -0.97857, -1.34124, -1.82584, -2.47112, -3.3277, -4.46163, -5.95897, -7.9317, -10.52542, -13.92913, -18.38807, -24.22003, -31.83653, -41.76999, -54.70875, -71.54201, -93.41767}
local Util_pitchToRate_1024_c2 = {0.00036, 0.00045, 0.00057, 0.00071, 0.00089, 0.00112, 0.00141, 0.00177, 0.00223, 0.0028, 0.00352, 0.00443, 0.00557, 0.00701, 0.00881, 0.01108, 0.01393, 0.01752, 0.02203, 0.02771, 0.03485, 0.04382, 0.05511, 0.06931, 0.08717, 0.10963, 0.13787, 0.17339, 0.21806, 0.27424, 0.3449, 0.43376}
function Util_pitchToRate_1024_raw_c0(index)
   return Util_pitchToRate_1024_c0[index + 1]
end

function Util_pitchToRate_1024_raw_c1(index)
   return Util_pitchToRate_1024_c1[index + 1]
end

function Util_pitchToRate_1024_raw_c2(index)
   return Util_pitchToRate_1024_c2[index + 1]
end

function Util_pitchToRate_1024(pitch)
   local index = int_clip(float_to_int((pitch * 0.2441)), 0, 31)
   return (Util_pitchToRate_1024_c0[index + 1] + (pitch * (Util_pitchToRate_1024_c1[index + 1] + (Util_pitchToRate_1024_c2[index + 1] * pitch))))
end

local Util_cvToRate_1024_c0 = {0.75937, 0.76288, 0.77974, 0.82566, 0.92465, 1.1124, 1.44069, 1.9834, 2.84444, 4.16832, 6.154, 9.0732, 13.2943, 19.31362, 27.79611, 39.62827, 55.98672, 78.42688, 108.99744, 150.38781, 206.1178, 280.7811, 380.35734, 512.61165, 687.60527, 918.34737, 1221.62609, 1619.06685, 2138.47846, 2815.56356, 3696.08983, 4838.64326}
local Util_cvToRate_1024_c1 = {5.24559, 4.99895, 4.40309, 3.31912, 1.5645, -1.09925, -4.98222, -10.48586, -18.12795, -28.5741, -42.67736, -61.52812, -86.51674, -119.41214, -162.46039, -218.50814, -291.15714, -384.95736, -505.64834, -660.46054, -858.49116, -1111.17283, -1432.85751, -1841.54353, -2359.78039, -3015.79414, -3844.88635, -4891.17235, -6209.73987, -7869.32876, -9955.6558, -12575.53839}
local Util_cvToRate_1024_c2 = {20.1256, 24.45758, 29.72201, 36.11959, 43.89423, 53.34235, 64.82415, 78.77737, 95.73399, 116.34048, 141.38246, 171.81466, 208.79731, 253.74038, 308.35733, 374.73043, 455.39016, 553.41169, 672.5321, 817.29285, 993.21298, 1206.99945, 1466.8029, 1782.52835, 2166.21287, 2632.48447, 3199.1198, 3887.72189, 4724.54377, 5741.48934, 6977.32976, 8479.18157}
function Util_cvToRate_1024_raw_c0(index)
   return Util_cvToRate_1024_c0[index + 1]
end

function Util_cvToRate_1024_raw_c1(index)
   return Util_cvToRate_1024_c1[index + 1]
end

function Util_cvToRate_1024_raw_c2(index)
   return Util_cvToRate_1024_c2[index + 1]
end

function Util_cvToRate_1024(cv)
   local index = int_clip(float_to_int((cv * 34.44445)), 0, 31)
   return (Util_cvToRate_1024_c0[index + 1] + (cv * (Util_cvToRate_1024_c1[index + 1] + (Util_cvToRate_1024_c2[index + 1] * cv))))
end

function Tricore_default(_ctx)
   _ctx.rate = Util_cvToRate_1024(0.)
end

function Tricore_process_type_alloc()
   local _ctx = {};
   _ctx.direction = false
   _ctx.inst_1b03c = Util_change_type_alloc()
   _ctx.inst_2043c = Util_edge_type_alloc()
   _ctx.inst_3043c = Util_edge_type_alloc()
   _ctx.phase = 0.
   _ctx.rate = 0.
   _ctx.reset_phase = 0.
   _ctx.reset_state = false
   Tricore_default(_ctx)
   return _ctx
end

function Tricore_noteOn_type_alloc(_ctx)
   return Tricore_process_type_alloc()
end

function Tricore_noteOff_type_alloc(_ctx)
   return Tricore_process_type_alloc()
end

function Tricore_controlChange_type_alloc(_ctx)
   return Tricore_process_type_alloc()
end

function Tricore_default_type_alloc(_ctx)
   return Tricore_process_type_alloc()
end

local Svf_calc_g_c0 = {0.00233, 0.00233, 0.00234, 0.00234, 0.00234, 0.00234, 0.00235, 0.00236, 0.00237, 0.00239, 0.00241, 0.00244, 0.00247, 0.00252, 0.00257, 0.00263, 0.00271, 0.0028, 0.0029, 0.00303, 0.00317, 0.00333, 0.00352, 0.00374, 0.00399, 0.00428, 0.0046, 0.00497, 0.00538, 0.00585, 0.00638, 0.00696, 0.00762, 0.00836, 0.00917, 0.01009, 0.0111, 0.01222, 0.01346, 0.01484, 0.01636, 0.01804, 0.01989, 0.02192, 0.02416, 0.02662, 0.02931, 0.03227, 0.03551, 0.03906, 0.04294, 0.04718, 0.05182, 0.05688, 0.0624, 0.06841, 0.07497, 0.08211, 0.08988, 0.09833, 0.10753, 0.11752, 0.12839, 0.14019, 0.153, 0.16692, 0.18202, 0.19842, 0.2162, 0.23551, 0.25645, 0.27917, 0.30383, 0.33059, 0.35963, 0.39115, 0.42538, 0.46257, 0.50298, 0.54692, 0.59472, 0.64676, 0.70346, 0.76529, 0.83278, 0.90653, 0.98722, 1.07562, 1.17262, 1.27922, 1.39659, 1.52606, 1.66919, 1.82777, 2.00392, 2.2001, 2.41921, 2.66469, 2.94062, 3.25185, 3.60423, 4.00478, 4.46201, 4.9863, 5.59037, 6.28992, 7.10441, 8.05824, 9.18213, 10.51517, 12.1075, 14.02409, 16.35005, 19.19819, 22.71993, 27.12151, 32.68825, 39.82187, 49.09921, 61.36714, 77.90073, 100.67585, 132.85851, 179.72409, 250.48135, 362.13463, 548.3403, 881.84522}
local Svf_calc_g_c1 = {0.01615, 0.01611, 0.01603, 0.01589, 0.01571, 0.01546, 0.01515, 0.01477, 0.01432, 0.01378, 0.01316, 0.01244, 0.01161, 0.01067, 0.00961, 0.00841, 0.00707, 0.00558, 0.00392, 0.00208, 4e-05, -0.0022, -0.00467, -0.00738, -0.01034, -0.01359, -0.01713, -0.021, -0.02521, -0.02978, -0.03475, -0.04015, -0.04599, -0.05232, -0.05917, -0.06658, -0.07458, -0.08321, -0.09252, -0.10255, -0.11336, -0.12499, -0.1375, -0.15096, -0.16542, -0.18096, -0.19764, -0.21554, -0.23475, -0.25535, -0.27742, -0.30109, -0.32643, -0.35358, -0.38265, -0.41376, -0.44706, -0.48268, -0.52079, -0.56155, -0.60514, -0.65175, -0.70158, -0.75486, -0.81182, -0.8727, -0.9378, -1.00739, -1.0818, -1.16137, -1.24647, -1.3375, -1.4349, -1.53915, -1.65077, -1.77033, -1.89844, -2.0358, -2.18316, -2.34136, -2.51131, -2.69405, -2.89072, -3.10261, -3.33113, -3.57792, -3.84479, -4.13381, -4.44732, -4.788, -5.15892, -5.56359, -6.00609, -6.4911, -7.02409, -7.61145, -8.26064, -8.98044, -9.78127, -10.67544, -11.67769, -12.80566, -14.08064, -15.52842, -17.18046, -19.07537, -21.26084, -23.79625, -26.75605, -30.23441, -34.35156, -39.26248, -45.16909, -52.33768, -61.12391, -72.00967, -85.65827, -102.99896, -125.35941, -154.67917, -193.86395, -247.39457, -322.41566, -430.77437, -593.05111, -847.06573, -1267.31534, -2014.05215}
local Svf_calc_g_c2 = {0.05736, 0.06022, 0.06323, 0.06638, 0.0697, 0.07318, 0.07684, 0.08067, 0.0847, 0.08893, 0.09338, 0.09804, 0.10294, 0.10808, 0.11348, 0.11914, 0.12509, 0.13134, 0.1379, 0.14479, 0.15203, 0.15962, 0.16759, 0.17597, 0.18476, 0.19399, 0.20368, 0.21386, 0.22454, 0.23577, 0.24755, 0.25992, 0.27291, 0.28655, 0.30088, 0.31592, 0.33171, 0.3483, 0.36572, 0.38401, 0.40322, 0.4234, 0.44459, 0.46684, 0.49021, 0.51476, 0.54055, 0.56763, 0.59608, 0.62597, 0.65737, 0.69036, 0.72502, 0.76144, 0.79972, 0.83994, 0.88222, 0.92666, 0.97339, 1.02251, 1.07417, 1.1285, 1.18565, 1.24579, 1.30907, 1.37568, 1.44581, 1.51967, 1.59748, 1.67948, 1.76592, 1.85709, 1.95329, 2.05484, 2.16209, 2.27544, 2.39531, 2.52216, 2.6565, 2.79889, 2.94996, 3.11038, 3.28093, 3.46245, 3.6559, 3.86236, 4.08301, 4.31923, 4.57256, 4.84475, 5.13781, 5.45402, 5.79603, 6.16687, 6.57005, 7.00969, 7.49054, 8.0182, 8.59926, 9.2415, 9.95416, 10.74828, 11.63709, 12.63657, 13.76608, 15.0493, 16.51533, 18.2002, 20.14887, 22.41793, 25.07928, 28.22511, 31.97496, 36.4857, 41.96579, 48.69631, 57.06226, 67.60037, 81.07379, 98.59197, 121.80906, 153.26364, 196.98412, 259.61861, 352.66115, 497.1339, 734.25038, 1152.24706}
function Svf_calc_g_raw_c0(index)
   return Svf_calc_g_c0[index + 1]
end

function Svf_calc_g_raw_c1(index)
   return Svf_calc_g_c1[index + 1]
end

function Svf_calc_g_raw_c2(index)
   return Svf_calc_g_c2[index + 1]
end

function Svf_calc_g(cv)
   local index = int_clip(float_to_int((cv * 141.11112)), 0, 127)
   return (Svf_calc_g_c0[index + 1] + (cv * (Svf_calc_g_c1[index + 1] + (Svf_calc_g_c2[index + 1] * cv))))
end

function Svf_default(_ctx)
   _ctx.g = Svf_calc_g(0.)
   _ctx.r = 1.
   _ctx.inv_den = (1. / (1. + (_ctx.g * _ctx.g)))
end

function Svf_process_type_alloc()
   local _ctx = {};
   _ctx.g = 0.
   _ctx.inst_1b0a2 = Util_change_type_alloc()
   _ctx.inst_2b0a2 = Util_change_type_alloc()
   _ctx.inv_den = 0.
   _ctx.r = 0.
   _ctx.z1 = 0.
   _ctx.z2 = 0.
   Svf_default(_ctx)
   return _ctx
end

function Svf_noteOn_type_alloc(_ctx)
   return Svf_process_type_alloc()
end

function Svf_noteOff_type_alloc(_ctx)
   return Svf_process_type_alloc()
end

function Svf_controlChange_type_alloc(_ctx)
   return Svf_process_type_alloc()
end

function Svf_default_type_alloc(_ctx)
   return Svf_process_type_alloc()
end

function Lfo_soft_type_alloc()
   local _ctx = {};
   _ctx.x2 = 0.
   _ctx.x3 = 0.
   _ctx.x4 = 0.
   return _ctx
end

function Lfo_process_type_alloc()
   local _ctx = {};
   _ctx.inst_1b0d6 = Util_change_type_alloc()
   _ctx.inst_204d6 = Util_edge_type_alloc()
   _ctx.inst_337d6 = Lfo_soft_type_alloc()
   _ctx.phase = 0.
   _ctx.rate = 0.
   return _ctx
end

function Lfo_noteOn_type_alloc(_ctx)
   return Lfo_process_type_alloc()
end

function Lfo_noteOff_type_alloc(_ctx)
   return Lfo_process_type_alloc()
end

function Lfo_controlChange_type_alloc(_ctx)
   return Lfo_process_type_alloc()
end

function Lfo_default_type_alloc(_ctx)
   return Lfo_process_type_alloc()
end

function Phase_default(_ctx)
   _ctx.rate = Util_cvToRate_1024(0.)
end

function Phase_process_type_alloc()
   local _ctx = {};
   _ctx.inst_1b08a = Util_change_type_alloc()
   _ctx.inst_2048a = Util_edge_type_alloc()
   _ctx.phase = 0.
   _ctx.rate = 0.
   Phase_default(_ctx)
   return _ctx
end

function Phase_noteOn_type_alloc(_ctx)
   return Phase_process_type_alloc()
end

function Phase_noteOff_type_alloc(_ctx)
   return Phase_process_type_alloc()
end

function Phase_controlChange_type_alloc(_ctx)
   return Phase_process_type_alloc()
end

function Phase_default_type_alloc(_ctx)
   return Phase_process_type_alloc()
end

local Util_cvToperiod_c0 = {674.24604, 671.55384, 662.76179, 646.75953, 623.79943, 594.87181, 561.29828, 524.47695, 485.73137, 446.22939, 406.94745, 368.66378, 331.96869, 297.28416, 264.88767, 234.93686, 207.49313, 182.54302, 160.01691, 139.80484, 121.76956, 105.75712, 91.60512, 79.14909, 68.22725, 58.6839, 50.37174, 43.15336, 36.90204, 31.50203, 26.8485, 22.84717}
local Util_cvToperiod_c1 = {-4656.65631, -4481.96057, -4198.68613, -3855.75154, -3487.13945, -3115.85882, -2756.93031, -2419.62514, -2109.13475, -1827.80833, -1576.06296, -1353.04709, -1157.11886, -986.18625, -837.94466, -710.03911, -600.17123, -506.16656, -426.01346, -357.88215, -300.13018, -251.2989, -210.1041, -175.42345, -146.28211, -121.83789, -101.36653, -84.24772, -69.95208, -58.02925, -48.09724, -39.83283}
local Util_cvToperiod_c2 = {14548.82317, 11715.36953, 9433.74468, 7596.4773, 6117.02663, 4925.70612, 3966.40104, 3193.92527, 2571.89288, 2071.00431, 1667.66621, 1342.88016, 1081.34776, 870.75005, 701.16727, 564.61156, 454.65073, 366.1053, 294.80453, 237.38992, 191.15709, 153.92832, 123.95004, 99.81017, 80.37166, 64.71889, 52.11457, 41.96501, 33.79212, 27.21094, 21.91148, 17.64412}
function Util_cvToperiod_raw_c0(index)
   return Util_cvToperiod_c0[index + 1]
end

function Util_cvToperiod_raw_c1(index)
   return Util_cvToperiod_c1[index + 1]
end

function Util_cvToperiod_raw_c2(index)
   return Util_cvToperiod_c2[index + 1]
end

function Util_cvToperiod(cv)
   local index = int_clip(float_to_int((cv * 31.)), 0, 31)
   return (Util_cvToperiod_c0[index + 1] + (cv * (Util_cvToperiod_c1[index + 1] + (Util_cvToperiod_c2[index + 1] * cv))))
end

function Blit_pulse_start(_ctx)
   _ctx.m = (1 + (2 * int(Util_cvToperiod(0.))))
   _ctx.scale = (1. + (2. * Util_cvToperiod(0.)))
end

function Blit_pulse_train_type_alloc()
   local _ctx = {};
   _ctx.inst_1b05e = Util_change_type_alloc()
   _ctx.m = 0
   _ctx.scale = 0.
   Blit_pulse_start(_ctx)
   return _ctx
end

function Blit_pulse_start_type_alloc(_ctx)
   return Blit_pulse_train_type_alloc()
end

local Util_pitchToRate_c0 = {0.00019, 0.00019, 0.0002, 0.00022, 0.00026, 0.00035, 0.00051, 0.00079, 0.00124, 0.00195, 0.00307, 0.00476, 0.00729, 0.01103, 0.01648, 0.02434, 0.0356, 0.05158, 0.0741, 0.10567, 0.14965, 0.21062, 0.29478, 0.41046, 0.56885, 0.785, 1.079, 1.47772, 2.01699, 2.74448, 3.72357, 5.03833}
local Util_pitchToRate_c1 = {2e-05, 1e-05, 1e-05, 1e-05, -0., -0., -2e-05, -4e-05, -7e-05, -0.00011, -0.00016, -0.00024, -0.00035, -0.00049, -0.00069, -0.00095, -0.0013, -0.00178, -0.00241, -0.00324, -0.00435, -0.00581, -0.00774, -0.01027, -0.0136, -0.01795, -0.02365, -0.03109, -0.04079, -0.05342, -0.06986, -0.09122}
local Util_pitchToRate_c2 = {1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 2e-05, 2e-05, 2e-05, 3e-05, 3e-05, 4e-05, 5e-05, 6e-05, 7e-05, 9e-05, 0.00011, 0.00014, 0.00017, 0.00022, 0.00027, 0.00034, 0.00043}
function Util_pitchToRate_raw_c0(index)
   return Util_pitchToRate_c0[index + 1]
end

function Util_pitchToRate_raw_c1(index)
   return Util_pitchToRate_c1[index + 1]
end

function Util_pitchToRate_raw_c2(index)
   return Util_pitchToRate_c2[index + 1]
end

function Util_pitchToRate(pitch)
   local index = int_clip(float_to_int((pitch * 0.2441)), 0, 31)
   return (Util_pitchToRate_c0[index + 1] + (pitch * (Util_pitchToRate_c1[index + 1] + (Util_pitchToRate_c2[index + 1] * pitch))))
end

local Util_cvToRate_c0 = {0.00075, 0.00075, 0.00075, 0.00075, 0.00075, 0.00075, 0.00075, 0.00075, 0.00076, 0.00076, 0.00077, 0.00078, 0.00079, 0.0008, 0.00082, 0.00084, 0.00087, 0.00089, 0.00093, 0.00097, 0.00101, 0.00106, 0.00113, 0.00119, 0.00127, 0.00137, 0.00147, 0.00159, 0.00172, 0.00187, 0.00203, 0.00222, 0.00243, 0.00266, 0.00292, 0.00321, 0.00353, 0.00389, 0.00429, 0.00472, 0.0052, 0.00574, 0.00632, 0.00697, 0.00768, 0.00846, 0.00931, 0.01025, 0.01128, 0.0124, 0.01363, 0.01497, 0.01643, 0.01803, 0.01977, 0.02166, 0.02373, 0.02597, 0.02841, 0.03106, 0.03394, 0.03706, 0.04045, 0.04412, 0.0481, 0.05241, 0.05708, 0.06212, 0.06758, 0.07348, 0.07986, 0.08675, 0.09419, 0.10221, 0.11087, 0.12022, 0.13029, 0.14114, 0.15283, 0.16543, 0.17899, 0.19358, 0.20929, 0.22618, 0.24435, 0.26388, 0.28488, 0.30743, 0.33166, 0.35769, 0.38563, 0.41562, 0.4478, 0.48234, 0.51937, 0.5591, 0.60168, 0.64733, 0.69626, 0.74868, 0.80484, 0.86498, 0.92939, 0.99835, 1.07216, 1.15116, 1.23569, 1.32612, 1.42286, 1.52631, 1.63693, 1.7552, 1.88163, 2.01675, 2.16114, 2.31541, 2.48022, 2.65625, 2.84425, 3.045, 3.25933, 3.48813, 3.73235, 3.99298, 4.2711, 4.56784, 4.8844, 5.22207}
local Util_cvToRate_c1 = {0.00514, 0.00513, 0.0051, 0.00506, 0.005, 0.00492, 0.00483, 0.00471, 0.00456, 0.00439, 0.00419, 0.00396, 0.0037, 0.0034, 0.00306, 0.00268, 0.00226, 0.00178, 0.00125, 0.00067, 2e-05, -0.0007, -0.00148, -0.00234, -0.00329, -0.00432, -0.00545, -0.00668, -0.00801, -0.00947, -0.01105, -0.01277, -0.01462, -0.01664, -0.01881, -0.02117, -0.02371, -0.02645, -0.02941, -0.0326, -0.03603, -0.03972, -0.04369, -0.04796, -0.05255, -0.05748, -0.06276, -0.06843, -0.07452, -0.08103, -0.08802, -0.0955, -0.1035, -0.11207, -0.12123, -0.13104, -0.14151, -0.15271, -0.16467, -0.17745, -0.19109, -0.20566, -0.2212, -0.23778, -0.25546, -0.27432, -0.29443, -0.31585, -0.33869, -0.36301, -0.38893, -0.41652, -0.4459, -0.47718, -0.51047, -0.54589, -0.58358, -0.62368, -0.66632, -0.71166, -0.75987, -0.81113, -0.8656, -0.9235, -0.98502, -1.05038, -1.11981, -1.19356, -1.27188, -1.35505, -1.44335, -1.53709, -1.6366, -1.74221, -1.85429, -1.97321, -2.09939, -2.23326, -2.37526, -2.52587, -2.6856, -2.85498, -3.03459, -3.22501, -3.42689, -3.64089, -3.86771, -4.10811, -4.36288, -4.63284, -4.91889, -5.22196, -5.54303, -5.88314, -6.2434, -6.62497, -7.02909, -7.45704, -7.91021, -8.39004, -8.89807, -9.43592, -10.0053, -10.60802, -11.24598, -11.92121, -12.63583, -13.3921}
local Util_cvToRate_c2 = {0.01826, 0.01917, 0.02013, 0.02113, 0.02219, 0.0233, 0.02446, 0.02568, 0.02696, 0.02831, 0.02972, 0.03121, 0.03277, 0.0344, 0.03612, 0.03793, 0.03982, 0.04181, 0.0439, 0.04609, 0.04839, 0.05081, 0.05334, 0.05601, 0.0588, 0.06174, 0.06482, 0.06806, 0.07146, 0.07503, 0.07878, 0.08271, 0.08684, 0.09118, 0.09573, 0.10051, 0.10553, 0.1108, 0.11633, 0.12214, 0.12825, 0.13465, 0.14137, 0.14844, 0.15585, 0.16363, 0.1718, 0.18038, 0.18939, 0.19885, 0.20878, 0.21921, 0.23016, 0.24165, 0.25372, 0.26639, 0.2797, 0.29367, 0.30833, 0.32373, 0.3399, 0.35688, 0.3747, 0.39342, 0.41306, 0.43369, 0.45535, 0.4781, 0.50197, 0.52704, 0.55337, 0.581, 0.61002, 0.64049, 0.67248, 0.70606, 0.74133, 0.77835, 0.81722, 0.85804, 0.90089, 0.94589, 0.99313, 1.04273, 1.09481, 1.14949, 1.2069, 1.26717, 1.33046, 1.39691, 1.46668, 1.53993, 1.61684, 1.69759, 1.78237, 1.87139, 1.96486, 2.06299, 2.16602, 2.2742, 2.38778, 2.50704, 2.63225, 2.76372, 2.90175, 3.04667, 3.19884, 3.3586, 3.52634, 3.70246, 3.88738, 4.08153, 4.28537, 4.4994, 4.72412, 4.96006, 5.20779, 5.46789, 5.74098, 6.0277, 6.32875, 6.64483, 6.9767, 7.32515, 7.691, 8.07512, 8.47842, 8.90187}
function Util_cvToRate_raw_c0(index)
   return Util_cvToRate_c0[index + 1]
end

function Util_cvToRate_raw_c1(index)
   return Util_cvToRate_c1[index + 1]
end

function Util_cvToRate_raw_c2(index)
   return Util_cvToRate_c2[index + 1]
end

function Util_cvToRate(cv)
   local index = int_clip(float_to_int((cv * 141.11112)), 0, 127)
   return (Util_cvToRate_c0[index + 1] + (cv * (Util_cvToRate_c1[index + 1] + (Util_cvToRate_c2[index + 1] * cv))))
end

function Blit_init(_ctx)
   _ctx.rate = Util_cvToRate(0.)
end

function Blit_osc_blit_type_alloc()
   local _ctx = {};
   _ctx.inst_1b026 = Util_change_type_alloc()
   _ctx.inst_28a26 = Phase_process_type_alloc()
   _ctx.inst_35e26 = Blit_pulse_train_type_alloc()
   _ctx.inst_45e26 = Blit_pulse_train_type_alloc()
   _ctx.inst_56426 = Util_dcblock_type_alloc()
   _ctx.output = 0.
   _ctx.rate = 0.
   _ctx.state_pulse = 0.
   _ctx.state_saw = 0.
   Blit_init(_ctx)
   return _ctx
end

function Blit_init_type_alloc(_ctx)
   return Blit_osc_blit_type_alloc()
end

function Blit_process_type_alloc()
   local _ctx = {};
   _ctx.inst_1268b = Blit_osc_blit_type_alloc()
   return _ctx
end

function Blit_noteOn_type_alloc(_ctx)
   return Blit_process_type_alloc()
end

function Blit_noteOff_type_alloc(_ctx)
   return Blit_process_type_alloc()
end

function Blit_controlChange_type_alloc(_ctx)
   return Blit_process_type_alloc()
end

function Blit_default_type_alloc(_ctx)
   return Blit_process_type_alloc()
end

function Adsr_do_type_alloc()
   local _ctx = {};
   _ctx.inst_104a0 = Util_edge_type_alloc()
   _ctx.inst_295a0 = Util_smooth_type_alloc()
   _ctx.out = 0.
   _ctx.rate = 0.
   _ctx.scale = 0.
   _ctx.state = 0
   _ctx.target = 0.
   return _ctx
end

function Adsr_process_type_alloc()
   local _ctx = {};
   _ctx.inst_1a025 = Adsr_do_type_alloc()
   _ctx.knob1 = 0.
   _ctx.knob2 = 0.
   _ctx.knob3 = 0.
   _ctx.knob4 = 0.
   return _ctx
end

function Adsr_noteOn_type_alloc(_ctx)
   return Adsr_process_type_alloc()
end

function Adsr_noteOff_type_alloc(_ctx)
   return Adsr_process_type_alloc()
end

function Adsr_controlChange_type_alloc(_ctx)
   return Adsr_process_type_alloc()
end

function Adsr_default_type_alloc(_ctx)
   return Adsr_process_type_alloc()
end

function Voice_4_process_type_alloc()
   local _ctx = {};
   _ctx.attack = 0.
   _ctx.decay = 0.
   _ctx.flt_cut = 0.
   _ctx.flt_res = 0.
   _ctx.flt_shape = 0
   _ctx.inst_1d695 = Lfo_process_type_alloc()
   _ctx.inst_28b95 = Blit_process_type_alloc()
   _ctx.inst_38b95 = Blit_process_type_alloc()
   _ctx.inst_48b95 = Blit_process_type_alloc()
   _ctx.inst_53c95 = Tricore_process_type_alloc()
   _ctx.inst_6a295 = Svf_process_type_alloc()
   _ctx.inst_7a095 = Adsr_do_type_alloc()
   _ctx.level1 = 0.
   _ctx.level2 = 0.
   _ctx.level3 = 0.
   _ctx.level4 = 0.
   _ctx.lfo_cv = 0.
   _ctx.lfo_flt = 0.
   _ctx.lfo_pw = 0.
   _ctx.lfo_rate = 0.
   _ctx.lfo_reset = 0.
   _ctx.lfo_shape = 0.
   _ctx.pw1 = 0.
   _ctx.pw2 = 0.
   _ctx.pw3 = 0.
   _ctx.pw4 = 0.
   _ctx.release = 0.
   _ctx.sustain = 0.
   return _ctx
end

function Voice_4_noteOn_type_alloc(_ctx)
   return Voice_4_process_type_alloc()
end

function Voice_4_noteOff_type_alloc(_ctx)
   return Voice_4_process_type_alloc()
end

function Voice_4_controlChange_type_alloc(_ctx)
   return Voice_4_process_type_alloc()
end

function Voice_4_default_type_alloc(_ctx)
   return Voice_4_process_type_alloc()
end

function Util_edge(_ctx, x)
   local ret = (x and (_ctx.pre == false))
   _ctx.pre = x
   return ret
end

function Util_change(_ctx, x)
   local v = (_ctx.pre_x ~= x)
   _ctx.pre_x = x
   return v
end

function Util_map(x, x0, x1, y0, y1)
   return (y0 + (((x + (-x0)) * (y1 + (-y0))) / (x1 + (-x0))))
end

function Util_dcblock(_ctx, x0)
   local y0 = (x0 + ((-_ctx.x1) + (0.995 * _ctx.y1)))
   _ctx.x1 = x0
   _ctx.y1 = y0
   return y0
end

function Util_smooth(_ctx, input)
   _ctx.x = ((0.005 * (input + (-_ctx.x))) + _ctx.x)
   return _ctx.x
end

function Util_average2(_ctx, x1)
   local result = (0.5 * (x1 + _ctx.x0))
   _ctx.x0 = x1
   return result
end

function Util_cubic_clipper(x)
   if (x <= -0.66666) then
      return -0.66666
   else
      if (x >= 0.66667) then
         return 0.66667
      else
         return (x + (-0.33333 * (x * (x * x))))
      end
   end
end

function Util_pitchToCv(pitch)
   return (-0.2 + (0.00834 * pitch))
end

local Util_cvTokHz_c0 = {0.03271, 0.03292, 0.03396, 0.03686, 0.04325, 0.05562, 0.07773, 0.11507, 0.17562, 0.27074, 0.41654, 0.63557, 0.95921, 1.43082, 2.10996, 3.07803, 4.4457, 6.36291, 9.03193, 12.72468, 17.80562, 24.76174, 34.242, 47.10905, 64.50693, 87.94956, 119.43624, 161.60228, 217.91515, 292.92962, 392.61924, 524.80665}
local Util_cvTokHz_c1 = {0.22572, 0.2123, 0.17917, 0.11761, 0.01579, -0.14217, -0.37746, -0.71825, -1.20179, -1.87722, -2.80907, -4.08186, -5.806, -8.12537, -11.22702, -15.3537, -20.81979, -28.03179, -37.5145, -49.94441, -66.19244, -87.3784, -114.94039, -150.72333, -197.09158, -257.07228, -334.53767, -434.43678, -563.08981, -728.56185, -941.13725, -1213.92132}
local Util_cvTokHz_c2 = {0.87634, 1.08829, 1.3515, 1.67837, 2.0843, 2.5884, 3.21443, 3.99186, 4.95732, 6.15629, 7.64523, 9.49429, 11.79055, 14.64219, 18.18352, 22.58134, 28.04281, 34.82519, 43.24793, 53.70778, 66.69742, 82.82871, 102.86148, 127.73933, 158.63409, 197.00098, 244.6472, 303.81704, 377.29756, 468.54992, 581.87238, 722.60276}
function Util_cvTokHz_raw_c0(index)
   return Util_cvTokHz_c0[index + 1]
end

function Util_cvTokHz_raw_c1(index)
   return Util_cvTokHz_c1[index + 1]
end

function Util_cvTokHz_raw_c2(index)
   return Util_cvTokHz_c2[index + 1]
end

function Util_cvTokHz(cv)
   local index = int_clip(float_to_int((cv * 31.)), 0, 31)
   return (Util_cvTokHz_c0[index + 1] + (cv * (Util_cvTokHz_c1[index + 1] + (Util_cvTokHz_c2[index + 1] * cv))))
end

function Tricore_process(_ctx, cv, reset, disable)
   local out = 0.
   if Util_change(_ctx.inst_1b03c, cv) then
      _ctx.rate = (4. * Util_cvToRate_1024(cv))
   end
   local new_phase = 0.
   local _if_temp_0 = 0.
   if _ctx.direction then
      _if_temp_0 = _ctx.rate
   else
      _if_temp_0 = (-_ctx.rate)
   end
   new_phase = (_if_temp_0 + _ctx.phase)
   local bdisable = (disable > 0.5)
   if (Util_edge(_ctx.inst_2043c, (reset > 0.)) or Util_edge(_ctx.inst_3043c, bdisable)) then
      do
         _ctx.reset_phase = _ctx.phase
         _ctx.reset_state = true
         new_phase = 0.
      end
   end
   if (new_phase > 1024.) then
      do
         new_phase = (2048. + (-new_phase))
         _ctx.direction = false
      end
   else
      if (new_phase < -1024.) then
         do
            _ctx.direction = true
            new_phase = new_phase
         end
      end
   end
   if bdisable then
      _ctx.phase = 0.
   else
      _ctx.phase = new_phase
   end
   if _ctx.reset_state then
      do
         if ((abs(_ctx.reset_phase) > 10.) or bdisable) then
            do
               local reset_speed = 0.
               if bdisable then
                  reset_speed = 0.01
               else
                  reset_speed = 0.5
               end
               _ctx.reset_phase = ((-(reset_speed * _ctx.reset_phase)) + _ctx.reset_phase)
            end
         else
            do
               if (_ctx.reset_phase > 10.) then
                  _ctx.reset_phase = _ctx.reset_phase
               else
                  _ctx.reset_phase = 0.
               end
               _ctx.reset_state = false
               _ctx.direction = true
            end
         end
         out = _ctx.reset_phase
      end
   end
   out = (out + _ctx.phase)
   return (0.00098 * out)
end

function Tricore_noteOn(_ctx, note, velocity, channel)
end

function Tricore_noteOff(_ctx, note, channel)
end

function Tricore_controlChange(_ctx, control, value, channel)
end

local Saturate_soft_tanh_table_c0 = {-4.19791, -4.08017, -3.96279, -3.84583, -3.72934, -3.61337, -3.49798, -3.38323, -3.26916, -3.15584, -3.04333, -2.93168, -2.82095, -2.7112, -2.60249, -2.49487, -2.38842, -2.28318, -2.17921, -2.07658, -1.97535, -1.87557, -1.7773, -1.6806, -1.58552, -1.49213, -1.40048, -1.31062, -1.22261, -1.1365, -1.05233, -0.97017, -0.89005, -0.81202, -0.73613, -0.66241, -0.59091, -0.52166, -0.4547, -0.39006, -0.32776, -0.26784, -0.21032, -0.15521, -0.10254, -0.05231, -0.00453, 0.04078, 0.08363, 0.12402, 0.16195, 0.19743, 0.23049, 0.26113, 0.28937, 0.31525, 0.3388, 0.36004, 0.37902, 0.39578, 0.41037, 0.42283, 0.43323, 0.44162, 0.44806, 0.45262, 0.45537, 0.45638, 0.45573, 0.4535, 0.44976, 0.4446, 0.43811, 0.43038, 0.42149, 0.41153, 0.40061, 0.3888, 0.37621, 0.36292, 0.34903, 0.33463, 0.31982, 0.30467, 0.28929, 0.27375, 0.25815, 0.24255, 0.22705, 0.2117, 0.1966, 0.18179, 0.16734, 0.15332, 0.13977, 0.12674, 0.11428, 0.10242, 0.0912, 0.08063, 0.07075, 0.06156, 0.05308, 0.04531, 0.03825, 0.03188, 0.0262, 0.02119, 0.01682, 0.01307, 0.00989, 0.00726, 0.00513, 0.00345, 0.00218, 0.00127, 0.00065, 0.00027, 8e-05, 1e-05, 0., -0., -7e-05, -0.00026, -0.00064, -0.00126, -0.00217, -0.00344, -0.00512, -0.00725, -0.00988, -0.01306, -0.01681, -0.02118, -0.02619, -0.03187, -0.03824, -0.0453, -0.05307, -0.06155, -0.07074, -0.08062, -0.09119, -0.10241, -0.11427, -0.12673, -0.13976, -0.15331, -0.16733, -0.18178, -0.19659, -0.21169, -0.22704, -0.24254, -0.25814, -0.27374, -0.28928, -0.30466, -0.31981, -0.33462, -0.34902, -0.36291, -0.3762, -0.38879, -0.4006, -0.41152, -0.42148, -0.43037, -0.4381, -0.44459, -0.44975, -0.45349, -0.45572, -0.45637, -0.45536, -0.45261, -0.44805, -0.44161, -0.43322, -0.42282, -0.41036, -0.39577, -0.37901, -0.36003, -0.33879, -0.31524, -0.28936, -0.26112, -0.23048, -0.19742, -0.16194, -0.12401, -0.08362, -0.04077, 0.00454, 0.05232, 0.10255, 0.15522, 0.21033, 0.26785, 0.32777, 0.39007, 0.45471, 0.52167, 0.59092, 0.66242, 0.73614, 0.81203, 0.89006, 0.97018, 1.05234, 1.13651, 1.22262, 1.31063, 1.40049, 1.49214, 1.58553, 1.68061, 1.77731, 1.87558, 1.97536, 2.07659, 2.17922, 2.28319, 2.38843, 2.49488, 2.6025, 2.71121, 2.82096, 2.93169, 3.04334, 3.15585, 3.26917, 3.38324, 3.49799, 3.61338, 3.72935, 3.84584, 3.9628, 4.08018, 4.19792}
local Saturate_soft_tanh_table_c1 = {0.67634, 0.68624, 0.69618, 0.70618, 0.71622, 0.7263, 0.73642, 0.74658, 0.75676, 0.76696, 0.77719, 0.78743, 0.79767, 0.80793, 0.81818, 0.82842, 0.83865, 0.84886, 0.85904, 0.8692, 0.87931, 0.88938, 0.8994, 0.90936, 0.91925, 0.92907, 0.93881, 0.94846, 0.95802, 0.96747, 0.97681, 0.98603, 0.99512, 1.00407, 1.01288, 1.02154, 1.03004, 1.03836, 1.04651, 1.05448, 1.06225, 1.06982, 1.07718, 1.08432, 1.09123, 1.09791, 1.10435, 1.11054, 1.11648, 1.12215, 1.12755, 1.13268, 1.13752, 1.14208, 1.14635, 1.15031, 1.15398, 1.15734, 1.16039, 1.16312, 1.16554, 1.16765, 1.16943, 1.1709, 1.17204, 1.17287, 1.17337, 1.17356, 1.17344, 1.173, 1.17226, 1.17121, 1.16987, 1.16823, 1.16631, 1.16411, 1.16165, 1.15892, 1.15594, 1.15273, 1.14928, 1.14562, 1.14176, 1.1377, 1.13347, 1.12908, 1.12453, 1.11986, 1.11507, 1.11017, 1.1052, 1.10016, 1.09507, 1.08995, 1.08481, 1.07968, 1.07457, 1.06951, 1.0645, 1.05956, 1.05472, 1.04999, 1.04539, 1.04093, 1.03663, 1.0325, 1.02857, 1.02484, 1.02133, 1.01805, 1.01501, 1.01223, 1.00971, 1.00747, 1.00551, 1.00384, 1.00246, 1.00138, 1.00061, 1.00015, 0.99999, 1.00015, 1.00061, 1.00138, 1.00246, 1.00384, 1.00551, 1.00747, 1.00971, 1.01223, 1.01501, 1.01805, 1.02133, 1.02484, 1.02857, 1.0325, 1.03663, 1.04093, 1.04539, 1.04999, 1.05472, 1.05956, 1.0645, 1.06951, 1.07457, 1.07968, 1.08481, 1.08995, 1.09507, 1.10016, 1.1052, 1.11017, 1.11507, 1.11986, 1.12453, 1.12908, 1.13347, 1.1377, 1.14176, 1.14562, 1.14928, 1.15273, 1.15594, 1.15892, 1.16165, 1.16411, 1.16631, 1.16823, 1.16987, 1.17121, 1.17226, 1.173, 1.17344, 1.17356, 1.17337, 1.17287, 1.17204, 1.1709, 1.16943, 1.16765, 1.16554, 1.16312, 1.16039, 1.15734, 1.15398, 1.15031, 1.14635, 1.14208, 1.13752, 1.13268, 1.12755, 1.12215, 1.11648, 1.11054, 1.10435, 1.09791, 1.09123, 1.08432, 1.07718, 1.06982, 1.06225, 1.05448, 1.04651, 1.03836, 1.03004, 1.02154, 1.01288, 1.00407, 0.99512, 0.98603, 0.97681, 0.96747, 0.95802, 0.94846, 0.93881, 0.92907, 0.91925, 0.90936, 0.8994, 0.88938, 0.87931, 0.8692, 0.85904, 0.84886, 0.83865, 0.82842, 0.81818, 0.80793, 0.79767, 0.78743, 0.77719, 0.76696, 0.75676, 0.74658, 0.73642, 0.7263, 0.71622, 0.70618, 0.69618, 0.68624, 0.67634}
local Saturate_soft_tanh_table_c2 = {0.01033, 0.01054, 0.01075, 0.01096, 0.01118, 0.0114, 0.01162, 0.01184, 0.01207, 0.0123, 0.01253, 0.01277, 0.01301, 0.01325, 0.01349, 0.01373, 0.01398, 0.01422, 0.01447, 0.01472, 0.01498, 0.01523, 0.01549, 0.01574, 0.016, 0.01626, 0.01652, 0.01678, 0.01704, 0.0173, 0.01755, 0.01781, 0.01807, 0.01833, 0.01858, 0.01884, 0.01909, 0.01934, 0.01959, 0.01983, 0.02008, 0.02031, 0.02055, 0.02078, 0.02101, 0.02123, 0.02145, 0.02166, 0.02186, 0.02206, 0.02226, 0.02244, 0.02262, 0.02279, 0.02295, 0.0231, 0.02324, 0.02338, 0.0235, 0.02361, 0.02371, 0.0238, 0.02388, 0.02394, 0.02399, 0.02403, 0.02405, 0.02406, 0.02405, 0.02403, 0.024, 0.02394, 0.02387, 0.02379, 0.02368, 0.02356, 0.02342, 0.02327, 0.02309, 0.0229, 0.02268, 0.02245, 0.0222, 0.02193, 0.02163, 0.02132, 0.02099, 0.02064, 0.02027, 0.01988, 0.01947, 0.01904, 0.0186, 0.01813, 0.01764, 0.01714, 0.01661, 0.01607, 0.01551, 0.01494, 0.01434, 0.01373, 0.01311, 0.01247, 0.01182, 0.01115, 0.01047, 0.00977, 0.00907, 0.00835, 0.00763, 0.00689, 0.00615, 0.0054, 0.00464, 0.00387, 0.00311, 0.00233, 0.00156, 0.00078, 0., -0.00077, -0.00155, -0.00232, -0.0031, -0.00386, -0.00463, -0.00539, -0.00614, -0.00688, -0.00762, -0.00834, -0.00906, -0.00976, -0.01046, -0.01114, -0.01181, -0.01246, -0.0131, -0.01372, -0.01433, -0.01493, -0.0155, -0.01606, -0.0166, -0.01713, -0.01763, -0.01812, -0.01859, -0.01903, -0.01946, -0.01987, -0.02026, -0.02063, -0.02098, -0.02131, -0.02162, -0.02192, -0.02219, -0.02244, -0.02267, -0.02289, -0.02308, -0.02326, -0.02341, -0.02355, -0.02367, -0.02378, -0.02386, -0.02393, -0.02399, -0.02402, -0.02404, -0.02405, -0.02404, -0.02402, -0.02398, -0.02393, -0.02387, -0.02379, -0.0237, -0.0236, -0.02349, -0.02337, -0.02323, -0.02309, -0.02294, -0.02278, -0.02261, -0.02243, -0.02225, -0.02205, -0.02185, -0.02165, -0.02144, -0.02122, -0.021, -0.02077, -0.02054, -0.0203, -0.02007, -0.01982, -0.01958, -0.01933, -0.01908, -0.01883, -0.01857, -0.01832, -0.01806, -0.0178, -0.01754, -0.01729, -0.01703, -0.01677, -0.01651, -0.01625, -0.01599, -0.01573, -0.01548, -0.01522, -0.01497, -0.01471, -0.01446, -0.01421, -0.01397, -0.01372, -0.01348, -0.01324, -0.013, -0.01276, -0.01252, -0.01229, -0.01206, -0.01183, -0.01161, -0.01139, -0.01117, -0.01095, -0.01074, -0.01053, -0.01032}
function Saturate_soft_tanh_table_raw_c0(index)
   return Saturate_soft_tanh_table_c0[index + 1]
end

function Saturate_soft_tanh_table_raw_c1(index)
   return Saturate_soft_tanh_table_c1[index + 1]
end

function Saturate_soft_tanh_table_raw_c2(index)
   return Saturate_soft_tanh_table_c2[index + 1]
end

function Saturate_soft_tanh_table(x)
   local index = int_clip(float_to_int(((x - -24.) * 5.)), 0, 240)
   return (Saturate_soft_tanh_table_c0[index + 1] + (x * (Saturate_soft_tanh_table_c1[index + 1] + (Saturate_soft_tanh_table_c2[index + 1] * x))))
end

function Saturate_soft_process(x)
   return Saturate_soft_tanh_table(x)
end

function Saturate_soft_noteOn(note, velocity, channel)
end

function Saturate_soft_noteOff(note, channel)
end

function Saturate_soft_controlChange(control, value, channel)
end

function Saturate_soft_default()
end

function Svf_process(_ctx, x, cv, q, sel)
   q = (0.5 + q)
   if (Util_change(_ctx.inst_1b0a2, cv) or Util_change(_ctx.inst_2b0a2, q)) then
      do
         _ctx.g = Svf_calc_g(cv)
         _ctx.r = (1. / (2. * (q + eps())))
         _ctx.inv_den = (1. / (1. + ((2. * (_ctx.r * _ctx.g)) + (_ctx.g * _ctx.g))))
      end
   end
   local high = ((x + ((-(((2. * _ctx.r) + _ctx.g) * _ctx.z1)) + (-_ctx.z2))) * _ctx.inv_den)
   local band = ((high * _ctx.g) + _ctx.z1)
   local low = ((band * _ctx.g) + _ctx.z2)
   local notch = (high + low)
   _ctx.z1 = (band + (high * _ctx.g))
   _ctx.z2 = (low + (band * _ctx.g))
   local output = 0.
   if (sel == 0) then
      output = low
   else
      if (sel == 1) then
         output = high
      else
         if (sel == 2) then
            output = band
         else
            output = notch
         end
      end
   end
   return Saturate_soft_process(output)
end

function Svf_noteOn(_ctx, note, velocity, channel)
end

function Svf_noteOff(_ctx, note, channel)
end

function Svf_controlChange(_ctx, control, value, channel)
end

local Saturate_tanh_table_c0 = {}
local Saturate_tanh_table_c1 = {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1e-05, 0., 0., 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 2e-05, 2e-05, 3e-05, 4e-05, 6e-05, 8e-05, 0.00012, 0.00017, 0.00024, 0.00034, 0.00049, 0.0007, 0.00101, 0.00145, 0.00209, 0.00299, 0.00429, 0.00613, 0.00875, 0.01247, 0.01774, 0.02516, 0.0356, 0.0502, 0.0705, 0.09855, 0.13696, 0.18893, 0.25817, 0.34845, 0.46265, 0.60103, 0.75833, 0.92049, 1.0627, 1.15322, 1.16782, 1.11213, 1.03337, 0.99671, 1.03337, 1.11213, 1.16782, 1.15322, 1.0627, 0.92049, 0.75833, 0.60103, 0.46265, 0.34845, 0.25817, 0.18893, 0.13696, 0.09855, 0.0705, 0.0502, 0.0356, 0.02516, 0.01774, 0.01247, 0.00875, 0.00613, 0.00429, 0.00299, 0.00209, 0.00145, 0.00101, 0.0007, 0.00049, 0.00034, 0.00024, 0.00017, 0.00012, 8e-05, 6e-05, 4e-05, 3e-05, 2e-05, 2e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 0., 0., 1e-05, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}
local Saturate_tanh_table_c2 = {0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1e-05, 0., 0., 1e-05, 1e-05, 1e-05, 0., 1e-05, 0., 1e-05, 1e-05, 0., 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 1e-05, 2e-05, 2e-05, 3e-05, 4e-05, 6e-05, 9e-05, 0.00013, 0.00019, 0.00029, 0.00043, 0.00063, 0.00094, 0.00139, 0.00207, 0.00308, 0.00458, 0.00681, 0.0101, 0.01496, 0.02212, 0.03258, 0.04772, 0.06935, 0.09959, 0.14055, 0.1933, 0.256, 0.32086, 0.37099, 0.38048, 0.32262, 0.18782, 0., -0.18781, -0.32261, -0.38047, -0.37098, -0.32085, -0.25599, -0.19329, -0.14054, -0.09958, -0.06934, -0.04771, -0.03257, -0.02211, -0.01495, -0.01009, -0.0068, -0.00457, -0.00307, -0.00206, -0.00138, -0.00093, -0.00062, -0.00042, -0.00028, -0.00018, -0.00012, -8e-05, -5e-05, -3e-05, -2e-05, -1e-05, -1e-05, -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., -0., 0., -0., 0., -0., -0., -0., 0., 0., -0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}
function Saturate_tanh_table_raw_c0(index)
   return Saturate_tanh_table_c0[index + 1]
end

function Saturate_tanh_table_raw_c1(index)
   return Saturate_tanh_table_c1[index + 1]
end

function Saturate_tanh_table_raw_c2(index)
   return Saturate_tanh_table_c2[index + 1]
end

function Saturate_tanh_table(x)
   local index = int_clip(float_to_int(((x - -24.) * 5.)), 0, 240)
   return (Saturate_tanh_table_c0[index + 1] + (x * (Saturate_tanh_table_c1[index + 1] + (Saturate_tanh_table_c2[index + 1] * x))))
end

function Saturate_process(x)
   return Saturate_tanh_table(x)
end

function Saturate_noteOn(note, velocity, channel)
end

function Saturate_noteOff(note, channel)
end

function Saturate_controlChange(control, value, channel)
end

function Saturate_default()
end

function Lfo_soft(_ctx, x1)
   local o = (0.25 * (x1 + (_ctx.x2 + (_ctx.x3 + _ctx.x4))))
   local _t_temp_0 = x1
   local _t_temp_1 = _ctx.x2
   local _t_temp_2 = _ctx.x3
   _ctx.x2 = _t_temp_0
   _ctx.x3 = _t_temp_1
   _ctx.x4 = _t_temp_2
   return o
end

function Lfo_process(_ctx, cv, shape, reset)
   if Util_change(_ctx.inst_1b0d6, cv) then
      _ctx.rate = Util_cvToRate((-0.3 + cv))
   end
   _ctx.phase = (_ctx.phase + _ctx.rate)
   if (_ctx.phase > 2.) then
      _ctx.phase = (-2. + _ctx.phase)
   else
      _ctx.phase = _ctx.phase
   end
   local breset = (reset > 0.)
   if Util_edge(_ctx.inst_204d6, breset) then
      _ctx.phase = 0.
   end
   local tmp = (-1. + _ctx.phase)
   local o = 0.
   if (shape < 1.) then
      o = tmp
   else
      if (shape < 2.) then
         o = (-1. + (2. * abs(tmp)))
      else
         if (tmp > 0.) then
            o = 1.
         else
            o = 0.
         end
      end
   end
   return Lfo_soft(_ctx.inst_337d6, o)
end

function Lfo_noteOn(_ctx, note, velocity, channel)
end

function Lfo_noteOff(_ctx, note, channel)
end

function Lfo_controlChange(_ctx, control, value, channel)
end

function Lfo_default(_ctx)
end

local Tables_nsine_c0 = {0., -5e-05, -0.00029, -0.00082, -0.00174, -0.00318, -0.00521, -0.00794, -0.01144, -0.01576, -0.02098, -0.02711, -0.03419, -0.04221, -0.05117, -0.06102, -0.07172, -0.08319, -0.09534, -0.10805, -0.12119, -0.13459, -0.14807, -0.16144, -0.17446, -0.18691, -0.1985, -0.20896, -0.218, -0.22529, -0.23049, -0.23327, -0.23326, -0.23008, -0.22337, -0.21273, -0.19777, -0.17809, -0.15329, -0.12297, -0.08676, -0.04424, 0.00494, 0.06116, 0.12478, 0.19612, 0.27551, 0.36324, 0.45958, 0.56479, 0.67908, 0.80262, 0.93557, 1.07805, 1.23013, 1.39183, 1.56316, 1.74405, 1.93441, 2.13408, 2.34286, 2.56051, 2.78672, 3.02113, 3.26333, 3.51285, 3.76919, 4.03175, 4.29991, 4.57299, 4.85025, 5.13089, 5.41408, 5.69893, 5.98448, 6.26976, 6.55372, 6.8353, 7.11337, 7.38679, 7.65437, 7.91488, 8.16709, 8.40973, 8.6415, 8.86111, 9.06724, 9.25857, 9.43377, 9.59153, 9.73054, 9.84948, 9.94709, 10.0221, 10.07328, 10.09943, 10.09939, 10.07206, 10.01636, 9.93129, 9.81589, 9.66929, 9.49067, 9.2793, 9.03452, 8.75575, 8.44253, 8.09445, 7.71124, 7.29271, 6.83878, 6.34948, 5.82497, 5.26549, 4.67143, 4.0433, 3.3817, 2.6874, 1.96126, 1.20428, 0.4176, -0.39755, -1.23977, -2.10756, -2.99929, -3.91322, -4.84747, -5.80004}
local Tables_nsine_c1 = {6.28445, 6.29957, 6.32969, 6.37461, 6.43399, 6.50739, 6.59429, 6.69405, 6.80591, 6.92905, 7.06253, 7.20533, 7.35634, 7.51437, 7.67816, 7.84637, 8.0176, 8.19038, 8.3632, 8.5345, 8.70266, 8.86604, 9.02299, 9.17181, 9.31079, 9.43824, 9.55245, 9.65171, 9.73435, 9.79872, 9.84319, 9.86616, 9.86612, 9.84156, 9.79107, 9.71328, 9.60692, 9.47079, 9.30376, 9.10483, 8.87307, 8.60768, 8.30793, 7.97326, 7.60318, 7.19736, 6.75558, 6.27776, 5.76394, 5.21432, 4.62922, 4.0091, 3.35458, 2.66642, 1.94549, 1.19284, 0.40965, -0.40277, -1.24295, -2.10931, -3.00011, -3.91351, -4.84753, -5.80004, -6.76884, -7.75159, -8.74585, -9.74908, -10.75864, -11.77182, -12.7858, -13.79772, -14.80464, -15.80356, -16.79145, -17.76522, -18.72175, -19.65794, -20.57062, -21.45666, -22.31294, -23.13633, -23.92375, -24.67215, -25.37855, -26.04, -26.65364, -27.21667, -27.7264, -28.18023, -28.57566, -28.91032, -29.18197, -29.38849, -29.52791, -29.59843, -29.59838, -29.52629, -29.38083, -29.1609, -28.86553, -28.494, -28.04575, -27.52044, -26.91794, -26.23832, -25.48189, -24.64915, -23.74084, -22.7579, -21.70152, -20.57309, -19.37423, -18.10678, -16.77278, -15.37452, -13.91447, -12.39534, -10.82, -9.19157, -7.51333, -5.78874, -4.02148, -2.21535, -0.37436, 1.49736, 3.3955, 5.31565}
local Tables_nsine_c2 = {-0.4844, -1.45203, -2.41616, -3.37448, -4.32466, -5.26443, -6.19151, -7.10368, -7.99874, -8.87452, -9.72893, -10.55989, -11.36542, -12.14357, -12.89246, -13.6103, -14.29534, -14.94595, -15.56055, -16.13766, -16.6759, -17.17396, -17.63065, -18.04487, -18.41561, -18.74199, -19.02322, -19.25862, -19.44762, -19.58977, -19.68473, -19.73227, -19.73227, -19.68473, -19.58977, -19.44762, -19.25862, -19.02322, -18.74199, -18.41561, -18.04487, -17.63065, -17.17396, -16.6759, -16.13766, -15.56055, -14.94595, -14.29534, -13.6103, -12.89246, -12.14357, -11.36542, -10.55989, -9.72893, -8.87452, -7.99874, -7.10368, -6.19151, -5.26443, -4.32466, -3.37448, -2.41616, -1.45203, -0.4844, 0.48441, 1.45204, 2.41617, 3.37449, 4.32467, 5.26444, 6.19152, 7.10369, 7.99875, 8.87453, 9.72894, 10.5599, 11.36543, 12.14358, 12.89247, 13.61031, 14.29535, 14.94596, 15.56056, 16.13767, 16.67591, 17.17397, 17.63066, 18.04488, 18.41562, 18.742, 19.02323, 19.25863, 19.44763, 19.58978, 19.68474, 19.73228, 19.73228, 19.68474, 19.58978, 19.44763, 19.25863, 19.02323, 18.742, 18.41562, 18.04488, 17.63066, 17.17397, 16.67591, 16.13767, 15.56056, 14.94596, 14.29535, 13.61031, 12.89247, 12.14358, 11.36543, 10.5599, 9.72894, 8.87453, 7.99875, 7.10369, 6.19152, 5.26444, 4.32467, 3.37449, 2.41617, 1.45204, 0.48441}
function Tables_nsine_raw_c0(index)
   return Tables_nsine_c0[index + 1]
end

function Tables_nsine_raw_c1(index)
   return Tables_nsine_c1[index + 1]
end

function Tables_nsine_raw_c2(index)
   return Tables_nsine_c2[index + 1]
end

function Tables_nsine(x)
   local index = int_clip(float_to_int((x * 127.)), 0, 127)
   return (Tables_nsine_c0[index + 1] + (x * (Tables_nsine_c1[index + 1] + (Tables_nsine_c2[index + 1] * x))))
end

function Phase_process(_ctx, cv, reset)
   if Util_change(_ctx.inst_1b08a, cv) then
      _ctx.rate = Util_cvToRate_1024(cv)
   end
   if Util_edge(_ctx.inst_2048a, (reset > 0.5)) then
      _ctx.phase = 0.
   else
      _ctx.phase = (_ctx.phase + _ctx.rate)
   end
   if (_ctx.phase > 1024.) then
      _ctx.phase = (-1024. + _ctx.phase)
   else
      _ctx.phase = _ctx.phase
   end
   return (0.00098 * _ctx.phase)
end

function Phase_noteOn(_ctx, note, velocity, channel)
end

function Phase_noteOff(_ctx, note, channel)
end

function Phase_controlChange(_ctx, control, value, channel)
end

function Blit_pulse_train(_ctx, cv, phase)
   if Util_change(_ctx.inst_1b05e, cv) then
      do
         _ctx.m = (1 + (2 * int(Util_cvToperiod(cv))))
         _ctx.scale = (2. * Util_cvToperiod(cv))
      end
   end
   local pi_phase = (0.5 * phase)
   local denominator = Tables_nsine(pi_phase)
   local out = 0.
   if (denominator <= eps()) then
      out = 1.
   else
      do
         local m_phase = ((pi_phase * real(_ctx.m)) % 1.)
         local numerator = Tables_nsine(m_phase)
         out = (numerator / (denominator * _ctx.scale))
      end
   end
   return out
end

function Blit_osc_blit(_ctx, cv, pw, wave)
   local fixed_cv = 0.
   if (wave < 1.) then
      fixed_cv = cv
   else
      fixed_cv = (-0.1 + cv)
   end
   if Util_change(_ctx.inst_1b026, fixed_cv) then
      _ctx.rate = Util_cvToRate(fixed_cv)
   end
   local phase = Phase_process(_ctx.inst_28a26, fixed_cv, 0.)
   local shift05 = (0.5 + (0.49 * pw))
   local shift = (phase + shift05)
   if (shift > 1.) then
      shift = (-1. + shift)
   end
   local pulse1 = Blit_pulse_train(_ctx.inst_35e26, fixed_cv, phase)
   local pulse2 = Blit_pulse_train(_ctx.inst_45e26, fixed_cv, shift)
   _ctx.state_pulse = (pulse1 + ((-pulse2) + (0.9995 * _ctx.state_pulse)))
   _ctx.state_saw = ((0.5 * ((pulse1 + (pulse2 + (-2. * _ctx.rate))) / shift05)) + (0.9995 * _ctx.state_saw))
   if (wave < 1.) then
      _ctx.output = _ctx.state_pulse
   else
      _ctx.output = (2. * _ctx.state_saw)
   end
   _ctx.output = Util_dcblock(_ctx.inst_56426, _ctx.output)
   return _ctx.output
end

function Blit_process(_ctx, cv, pw, wave)
   return Blit_osc_blit(_ctx.inst_1268b, cv, pw, wave)
end

function Blit_noteOn(_ctx, note, velocity, channel)
end

function Blit_noteOff(_ctx, note, channel)
end

function Blit_controlChange(_ctx, control, value, channel)
end

function Blit_default(_ctx)
end

function Adsr_do(_ctx, gate, a, d, s, r)
   local a_rate = (1. / (0.01 + (100. * a)))
   local d_rate = (1. / (0.01 + (100. * d)))
   local r_rate = (1. / (0.01 + (100. * r)))
   _ctx.out = ((0.004 * (((-_ctx.out) + _ctx.target) * _ctx.rate)) + _ctx.out)
   local bgate = (gate > 0.)
   if (_ctx.state == 0) then
      do
         if Util_edge(_ctx.inst_104a0, bgate) then
            do
               _ctx.state = 1
               _ctx.scale = (0.2 * gate)
            end
         end
         _ctx.rate = r_rate
         _ctx.target = 0.
      end
   end
   if (_ctx.state == 1) then
      do
         if (bgate == false) then
            _ctx.state = 0
         end
         if (_ctx.out > 1024.) then
            _ctx.state = 2
         end
         _ctx.rate = a_rate
         _ctx.target = 1228.8
      end
   end
   if (_ctx.state == 2) then
      do
         if (bgate == false) then
            _ctx.state = 0
         end
         _ctx.rate = d_rate
         _ctx.target = (1024. * s)
      end
   end
   return (Util_smooth(_ctx.inst_295a0, _ctx.scale) * clip((0.00098 * _ctx.out), 0., 1.))
end

function Adsr_process(_ctx, gate)
   return Adsr_do(_ctx.inst_1a025, gate, _ctx.knob1, _ctx.knob2, _ctx.knob3, _ctx.knob4)
end

function Adsr_noteOn(_ctx, note, velocity, channel)
end

function Adsr_noteOff(_ctx, note, channel)
end

function Adsr_controlChange(_ctx, control, value, channel)
   if (control == 1) then
      _ctx.knob1 = (0.00788 * real(value))
   end
   if (control == 2) then
      _ctx.knob2 = (0.00788 * real(value))
   end
   if (control == 3) then
      _ctx.knob3 = (0.00788 * real(value))
   end
   if (control == 4) then
      _ctx.knob4 = (0.00788 * real(value))
   end
end

function Adsr_default(_ctx)
   _ctx.knob1 = 0.
   _ctx.knob2 = 0.5
   _ctx.knob3 = 1.
   _ctx.knob4 = 0.5
end

function Voice_4_process(_ctx, cv, vel, gate)
   local lfo = Lfo_process(_ctx.inst_1d695, _ctx.lfo_rate, _ctx.lfo_shape, (gate * _ctx.lfo_reset))
   local mod_pw = (lfo * _ctx.lfo_pw)
   local mod_cv = (lfo * _ctx.lfo_cv)
   local mod_flt = (lfo * _ctx.lfo_flt)
   local o1 = Blit_process(_ctx.inst_28b95, (0.0001 + (cv + mod_cv)), (mod_pw + _ctx.pw1), 0.)
   local o2 = Blit_process(_ctx.inst_38b95, (0.0002 + (cv + mod_cv)), (mod_pw + _ctx.pw2), 1.)
   local o3 = Blit_process(_ctx.inst_48b95, (cv + (mod_cv + _ctx.pw3)), (mod_pw + _ctx.pw1), 0.)
   local sub = Saturate_process(((2. + (5. * _ctx.pw4)) * Tricore_process(_ctx.inst_53c95, (cv + mod_cv), 0., 1.)))
   local o = ((o1 * _ctx.level1) + ((o2 * _ctx.level2) + ((o3 * _ctx.level3) + (sub * _ctx.level4))))
   local f = Svf_process(_ctx.inst_6a295, o, (mod_flt + _ctx.flt_cut), _ctx.flt_res, _ctx.flt_shape)
   local env = Adsr_do(_ctx.inst_7a095, gate, _ctx.attack, _ctx.decay, _ctx.sustain, _ctx.release)
   return (env * f)
end

function Voice_4_noteOn(_ctx, note, velocity, channel)
end

function Voice_4_noteOff(_ctx, note, channel)
end

function Voice_4_controlChange(_ctx, control, value, channel)
   if (control == 30) then
      _ctx.level1 = (0.00788 * real(value))
   end
   if (control == 31) then
      _ctx.level2 = (0.00788 * real(value))
   end
   if (control == 32) then
      _ctx.level3 = (0.00788 * real(value))
   end
   if (control == 33) then
      _ctx.level4 = (0.00788 * real(value))
   end
   if (control == 34) then
      _ctx.pw1 = (0.00788 * real(value))
   end
   if (control == 35) then
      _ctx.pw2 = (0.00788 * real(value))
   end
   if (control == 36) then
      _ctx.pw3 = (0.00079 * real(value))
   end
   if (control == 37) then
      _ctx.pw4 = (0.00788 * real(value))
   end
   if (control == 38) then
      _ctx.lfo_rate = Util_map(real(value), 0., 127., -0.4, 0.1)
   end
   if (control == 39) then
      _ctx.lfo_shape = (0.02363 * real(value))
   end
   if (control == 40) then
      _ctx.lfo_pw = Util_map(real(value), 0., 127., -1., 1.)
   end
   if (control == 41) then
      _ctx.lfo_cv = Util_map(real(value), 0., 127., -0.1, 0.1)
   end
   if (control == 42) then
      _ctx.lfo_flt = Util_map(real(value), 0., 127., -0.3, 0.3)
   end
   if (control == 43) then
      if (value > 0) then
         _ctx.lfo_reset = 1.
      else
         _ctx.lfo_reset = 0.
      end
   end
   if (control == 44) then
      _ctx.flt_cut = Util_map(real(value), 0., 127., -0.2, 0.5)
   end
   if (control == 45) then
      _ctx.flt_res = (0.00788 * real(value))
   end
   if (control == 46) then
      _ctx.flt_shape = intDiv((4 * value), 127)
   end
   if (control == 47) then
      _ctx.attack = (0.00788 * real(value))
   end
   if (control == 48) then
      _ctx.decay = (0.00788 * real(value))
   end
   if (control == 49) then
      _ctx.sustain = (0.00788 * real(value))
   end
   if (control == 50) then
      _ctx.release = (0.00788 * real(value))
   end
end

function Voice_4_default(_ctx)
end

