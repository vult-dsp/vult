/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef WAVES_H
#define WAVES_H

#include "vultin.h"
#include "Waves.tables.h"

static_inline int32_t Waves_sineTable1_samples() {
   return 256;
}

static_inline fix16_t Waves_sineTable1(int32_t channel, int32_t index) {
   if (channel == 0) {
      return Waves_sineTable1_chan_0[static_cast<uint32_t>(index % 256)];
   }
   return 0.0f;
}

static_inline fix16_t Waves_sineTable2_raw_c0(int32_t index) {
   return Waves_sineTable2_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Waves_sineTable2_raw_c1(int32_t index) {
   return Waves_sineTable2_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Waves_sineTable2_raw_c2(int32_t index) {
   return Waves_sineTable2_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Waves_sineTable2(fix16_t position) {
   int32_t index = int_clip(fix_to_int(fix_mul(position, 16711680)), 0, 255);
   return Waves_sineTable2_c0[static_cast<uint32_t>(index)] + fix_mul(position, (Waves_sineTable2_c1[static_cast<uint32_t>(index)] + fix_mul(Waves_sineTable2_c2[static_cast<uint32_t>(index)], position)));
}

static_inline void Waves_test1() {
   int32_t n = Waves_sineTable1_samples();
   int32_t i = 0;
   while (i < n) {
      Waves_sineTable1(0, i);
      i = 1 + i;
   }
}

static_inline void Waves_test2() {
   fix16_t result = Waves_sineTable2(0x8000 /* 0.500000 */);
}


#endif // WAVES_H
