/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef SHORT_DELAY_H
#define SHORT_DELAY_H

#include "vultin.h"
#include "short_delay.tables.h"

typedef struct Short_delay_soft_type {
   float x2;
   float x3;
   float x4;
} Short_delay_soft_type;

typedef struct Short_delay_do_type {
   std::array<float, 22050> buffer;
   int32_t write_pos;
} Short_delay_do_type;

typedef struct Short_delay_process_type {
   Short_delay_soft_type inst_1593b;
   Short_delay_do_type inst_2ba3b;
} Short_delay_process_type;

static_inline void Short_delay_soft_type_init(Short_delay_soft_type& _ctx) {
   _ctx.x2 = 0.0f;
   _ctx.x3 = 0.0f;
   _ctx.x4 = 0.0f;
}

static_inline void Short_delay_do_type_init(Short_delay_do_type& _ctx) {
   int32_t i_0 = 0;
   while (i_0 < 22050) {
      _ctx.buffer[static_cast<uint32_t>(i_0)] = 0.0f;
      i_0 = (1 + i_0);
   }
   _ctx.write_pos = 0;
}

static_inline void Short_delay_process_type_init(Short_delay_process_type& _ctx) {
   Short_delay_soft_type_init(_ctx.inst_1593b);
   Short_delay_do_type_init(_ctx.inst_2ba3b);
}

static_inline float Saturate_tanh_table_raw_c0(int32_t index) {
   return Saturate_tanh_table_c0[static_cast<uint32_t>(index)];
}

static_inline float Saturate_tanh_table_raw_c1(int32_t index) {
   return Saturate_tanh_table_c1[static_cast<uint32_t>(index)];
}

static_inline float Saturate_tanh_table_raw_c2(int32_t index) {
   return Saturate_tanh_table_c2[static_cast<uint32_t>(index)];
}

static_inline float Saturate_tanh_table(float x) {
   int32_t index = int_clip(float_to_int(((x - -24.0f) * 5.0f)), 0, 240);
   return (Saturate_tanh_table_c0[static_cast<uint32_t>(index)] + (x * (Saturate_tanh_table_c1[static_cast<uint32_t>(index)] + (Saturate_tanh_table_c2[static_cast<uint32_t>(index)] * x))));
}

static_inline float Saturate_process(float x) {
   return Saturate_tanh_table(x);
}

static_inline void Saturate_noteOn(int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Saturate_noteOff(int32_t note, int32_t channel) {
}

static_inline void Saturate_controlChange(int32_t control, int32_t value, int32_t channel) {
}

static_inline void Saturate_default() {
}

static_inline float Short_delay_soft(Short_delay_soft_type& _ctx, float x1) {
   float o = (0.25f * (x1 + (_ctx.x2 + (_ctx.x3 + _ctx.x4))));
   float _t_temp_0 = x1;
   float _t_temp_1 = _ctx.x2;
   float _t_temp_2 = _ctx.x3;
   _ctx.x2 = _t_temp_0;
   _ctx.x3 = _t_temp_1;
   _ctx.x4 = _t_temp_2;
   return o;
}

float Short_delay_do(Short_delay_do_type& _ctx, float x, float time, float feedback);

static_inline float Short_delay_process(Short_delay_process_type& _ctx, float x, float time, float feedback) {
   return Short_delay_do(_ctx.inst_2ba3b, x, Short_delay_soft(_ctx.inst_1593b, time), feedback);
}

static_inline void Short_delay_noteOn(Short_delay_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Short_delay_noteOff(Short_delay_process_type& _ctx, int32_t note, int32_t channel) {
}

static_inline void Short_delay_controlChange(Short_delay_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
}

static_inline void Short_delay_default(Short_delay_process_type& _ctx) {
}


#endif // SHORT_DELAY_H
