/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef ARRAY_DIMENSION_H
#define ARRAY_DIMENSION_H

#include "vultin.h"
#include "array_dimension.tables.h"

template<std::size_t SIZE_0>
static_inline float Array_dimension_total(const std::array<float, SIZE_0>& data) {
   float acc = 0.0f;
   int32_t i__1 = 0;
   while (i__1 < data.size()) {
      acc = acc + data[static_cast<uint32_t>(i__1)];
      i__1 = 1 + i__1;
   }
   return acc;
}

template<std::size_t SIZE_0, std::size_t SIZE_1>
static_inline float Array_dimension_sum(const std::array<float, SIZE_0>& data1, const std::array<float, SIZE_1>& data2) {
   float acc = 0.0f;
   int32_t i__1 = 0;
   while (i__1 < data1.size()) {
      acc = acc + data1[static_cast<uint32_t>(i__1)] + data2[static_cast<uint32_t>(i__1)];
      i__1 = 1 + i__1;
   }
   return acc;
}

static_inline void Array_dimension_main() {
   std::array<float, 2> x = { 1.0f, 2.0f };
   std::array<float, 3> y = { 1.0f, 2.0f, 3.0f };
   float z = Array_dimension_total(x) + Array_dimension_total(y);
   float k = Array_dimension_sum(x, y);
}


#endif // ARRAY_DIMENSION_H
