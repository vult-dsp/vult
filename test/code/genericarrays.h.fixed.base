/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */
#ifndef GENERICARRAYS_H
#define GENERICARRAYS_H

#include "vultin.h"
#include "genericarrays.tables.h"

template<std::size_t SIZE_0>
static_inline fix16_t Genericarrays_sum(std::array<fix16_t, SIZE_0>& data) {
   fix16_t total = 0x0 /* 0.000000 */;
   int32_t i = 0;
   while (i < data.size()) {
      total = total + data[static_cast<uint32_t>(i)];
      i = 1 + i;
   }
   return total;
}

static_inline void Genericarrays_test1() {
   std::array<fix16_t, 3> data1 = { 0x10000 /* 1.000000 */, 0x20000 /* 2.000000 */, 0x30000 /* 3.000000 */ };
   std::array<fix16_t, 4> data2 = { 0x10000 /* 1.000000 */, 0x20000 /* 2.000000 */, 0x30000 /* 3.000000 */, 0x40000 /* 4.000000 */ };
   fix16_t result1 = Genericarrays_sum(data1);
   fix16_t result2 = Genericarrays_sum(data2);
}


#endif // GENERICARRAYS_H
