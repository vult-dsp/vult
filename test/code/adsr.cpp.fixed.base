/* This code was generated by the Vult compiler v1-dev https://github.com/vult-dsp/vult */

#include "adsr.h"

void Adsr_do_type_init(Adsr_do_type& _ctx) {
   Util_edge_type_init(_ctx.inst_104a0);
   Util_smooth_type_init(_ctx.inst_295a0);
   _ctx.out = 0x0 /* 0.000000 */;
   _ctx.rate = 0x0 /* 0.000000 */;
   _ctx.scale = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.target = 0x0 /* 0.000000 */;
}

void Adsr_process_type_init(Adsr_process_type& _ctx) {
   Adsr_do_type_init(_ctx.inst_1a025);
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x0 /* 0.000000 */;
   _ctx.knob3 = 0x0 /* 0.000000 */;
   _ctx.knob4 = 0x0 /* 0.000000 */;
}

fix16_t Adsr_do(Adsr_do_type& _ctx, fix16_t gate, fix16_t a, fix16_t d, fix16_t s, fix16_t r) {
   fix16_t a_rate = fix_div(0x10000 /* 1.000000 */, 0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */, a));
   fix16_t d_rate = fix_div(0x10000 /* 1.000000 */, 0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */, d));
   fix16_t r_rate = fix_div(0x10000 /* 1.000000 */, 0x28f /* 0.010000 */ + fix_mul(0x640000 /* 100.000000 */, r));
   _ctx.out = fix_mul(0x106 /* 0.004000 */, fix_mul((- _ctx.out) + _ctx.target, _ctx.rate)) + _ctx.out;
   bool bgate = gate > 0x0 /* 0.000000 */;
   if (_ctx.state == 0) {
      if (Util_edge(_ctx.inst_104a0, bgate)) {
         _ctx.state = 1;
         _ctx.scale = fix_mul(0x3333 /* 0.200000 */, gate);
      }
      _ctx.rate = r_rate;
      _ctx.target = 0x0 /* 0.000000 */;
   }
   if (_ctx.state == 1) {
      if (bgate == false) {
         _ctx.state = 0;
      }
      if (_ctx.out > 0x4000000 /* 1024.000000 */) {
         _ctx.state = 2;
      }
      _ctx.rate = a_rate;
      _ctx.target = 0x4cccccc /* 1228.800000 */;
   }
   if (_ctx.state == 2) {
      if (bgate == false) {
         _ctx.state = 0;
      }
      _ctx.rate = d_rate;
      _ctx.target = fix_mul(0x4000000 /* 1024.000000 */, s);
   }
   return fix_mul(Util_smooth(_ctx.inst_295a0, _ctx.scale), fix_clip(fix_mul(0x40 /* 0.000977 */, _ctx.out), 0x0 /* 0.000000 */, 0x10000 /* 1.000000 */));
}

void Adsr_controlChange(Adsr_process_type& _ctx, int32_t control, int32_t value, int32_t channel) {
   if (control == 1) {
      _ctx.knob1 = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
   if (control == 2) {
      _ctx.knob2 = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
   if (control == 3) {
      _ctx.knob3 = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
   if (control == 4) {
      _ctx.knob4 = fix_mul(0x204 /* 0.007874 */, int_to_fix(value));
   }
}

