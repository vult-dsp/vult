
function ifExpressionValue(cond,then_,else_) if cond then return then_ else return else_ end end
function ifExpression(cond,then_,else_) if cond then return then_() else return else_() end end
function eps()              return 1e-18 end
function pi()               return 3.1415926535897932384 end
function random()           return math.random() end
function irandom()          return math.floor(math.random() * 4294967296) end
function clip(x,low,high)   if x > high then return high else if x < low then return low else return x end end end
function real(x)            return x end
function int(x)             local int_part,_ = math.modf(x) return int_part end
function sin(x)             return math.sin(x) end
function cos(x)             return math.cos(x) end
function abs(x)             return math.abs(x) end
function exp(x)             return math.exp(x) end
function floor(x)           return math.floor(x) end
function tan(x)             return math.tan(x) end
function tanh(x)            return math.tanh(x) end
function sqrt(x)            return x end
function set(a, i, v)       a[i+1]=v end
function get(a, i)          return a[i+1] end
function intDiv(a, b)       return math.floor(a / b) end

function Synth1_smooth_type_alloc()
   local _ctx = {};
   _ctx.x = 0.
   return _ctx
end

function Synth1_change_type_alloc()
   local _ctx = {};
   _ctx.pre_x = 0.
   return _ctx
end

function Synth1_edge_type_alloc()
   local _ctx = {};
   _ctx.pre_x = 0
   return _ctx
end

function Synth1_each_type_alloc()
   local _ctx = {};
   _ctx.count = 0
   return _ctx
end

function Synth1_phasor_type_alloc()
   local _ctx = {};
   _ctx.inst_1be86 = Synth1_change_type_alloc()
   _ctx.phase = 0.
   _ctx.rate = 0.
   return _ctx
end

function Synth1_lfo_type_alloc()
   local _ctx = {};
   _ctx.inst_11e7d = Synth1_edge_type_alloc()
   _ctx.phase = 0.
   return _ctx
end

function Synth1_process_type_alloc()
   local _ctx = {};
   _ctx.count = 0
   _ctx.detune = 0.
   _ctx.gate = 0
   _ctx.inst_17d3d = Synth1_lfo_type_alloc()
   _ctx.inst_2863d = Synth1_phasor_type_alloc()
   _ctx.inst_3dc3d = Synth1_smooth_type_alloc()
   _ctx.inst_4863d = Synth1_phasor_type_alloc()
   _ctx.inst_5dc3d = Synth1_smooth_type_alloc()
   _ctx.inst_6dc3d = Synth1_smooth_type_alloc()
   _ctx.lfo_amt = 0.
   _ctx.lfo_rate = 0.
   _ctx.n1 = 0
   _ctx.n2 = 0
   _ctx.n3 = 0
   _ctx.n4 = 0
   _ctx.pitch = 0.
   _ctx.pre_phase1 = 0.
   _ctx.volume = 0.
   return _ctx
end

function Synth1_noteOn_type_alloc(_ctx)
   return Synth1_process_type_alloc()
end

function Synth1_noteOff_type_alloc(_ctx)
   return Synth1_process_type_alloc()
end

function Synth1_controlChange_type_alloc(_ctx)
   return Synth1_process_type_alloc()
end

function Synth1_default_type_alloc(_ctx)
   return Synth1_process_type_alloc()
end

function Synth1_smooth(_ctx, input)
   _ctx.x = ((0.005 * (input + (-_ctx.x))) + _ctx.x)
   return _ctx.x
end

function Synth1_change(_ctx, x)
   local v = (_ctx.pre_x ~= x)
   _ctx.pre_x = x
   return v
end

function Synth1_edge(_ctx, x)
   local v = ((_ctx.pre_x ~= x) and (_ctx.pre_x == 0))
   _ctx.pre_x = x
   return v
end

function Synth1_each(_ctx, n)
   local ret = (_ctx.count == 0)
   _ctx.count = ((1 + _ctx.count) % n)
   return ret
end

function Synth1_pitchToRate(d)
   return (0.0001854 * exp((0.0577623 * d)))
end

function Synth1_phasor(_ctx, pitch, reset)
   if Synth1_change(_ctx.inst_1be86, pitch) then
      _ctx.rate = Synth1_pitchToRate(pitch)
   end
   if reset then
      _ctx.phase = 0.
   else
      _ctx.phase = ((_ctx.phase + _ctx.rate) % 1.)
   end
   return _ctx.phase
end

function Synth1_lfo(_ctx, f, gate)
   local rate = (0.0002268 * f)
   if Synth1_edge(_ctx.inst_11e7d, gate) then
      _ctx.phase = 0.
   end
   _ctx.phase = (rate + _ctx.phase)
   if (_ctx.phase > 1.) then
      _ctx.phase = (-1. + _ctx.phase)
   end
   return (-0.5 + sin((6.2831854 * _ctx.phase)))
end

function Synth1_process(_ctx, input)
   local lfo_val = (Synth1_lfo(_ctx.inst_17d3d, _ctx.lfo_rate, _ctx.gate) * _ctx.lfo_amt)
   local phase1 = Synth1_phasor(_ctx.inst_2863d, _ctx.pitch, false)
   local comp = (1. + (-phase1))
   local reset = (((-phase1) + _ctx.pre_phase1) > 0.5)
   _ctx.pre_phase1 = phase1
   local phase2 = Synth1_phasor(_ctx.inst_4863d, ((32. * Synth1_smooth(_ctx.inst_3dc3d, (lfo_val + _ctx.detune))) + _ctx.pitch), reset)
   local sine = sin((6.2831854 * phase2))
   local gate_value = 0.
   if (_ctx.gate > 0) then
      gate_value = 1.
   else
      gate_value = 0.
   end
   return (comp * (sine * (Synth1_smooth(_ctx.inst_5dc3d, _ctx.volume) * Synth1_smooth(_ctx.inst_6dc3d, gate_value))))
end

function Synth1_noteOn(_ctx, note, velocity, channel)
   if (_ctx.count == 0) then
      do
         _ctx.n1 = note
         _ctx.pitch = real(note)
      end
   else
      if (_ctx.count == 1) then
         do
            _ctx.n2 = note
            _ctx.pitch = real(note)
         end
      else
         if (_ctx.count == 2) then
            do
               _ctx.n3 = note
               _ctx.pitch = real(note)
            end
         else
            if (_ctx.count == 3) then
               do
                  _ctx.n4 = note
                  _ctx.pitch = real(note)
               end
            end
         end
      end
   end
   if (_ctx.count <= 4) then
      _ctx.count = (1 + _ctx.count)
   end
   if (_ctx.count > 0) then
      _ctx.gate = 1
   else
      _ctx.gate = 0
   end
end

function Synth1_noteOff(_ctx, note, channel)
   local found = false
   if (note == _ctx.n1) then
      do
         local _t_temp_0 = _ctx.n2
         local _t_temp_1 = _ctx.n3
         local _t_temp_2 = _ctx.n4
         _ctx.n1 = _t_temp_0
         _ctx.n2 = _t_temp_1
         _ctx.n3 = _t_temp_2
         found = true
      end
   else
      if (note == _ctx.n2) then
         do
            local _t_temp_3 = _ctx.n3
            local _t_temp_4 = _ctx.n4
            _ctx.n2 = _t_temp_3
            _ctx.n3 = _t_temp_4
            found = true
         end
      else
         if (note == _ctx.n3) then
            do
               _ctx.n3 = _ctx.n4
               found = true
            end
         else
            if (note == _ctx.n4) then
               found = true
            end
         end
      end
   end
   if (found and (_ctx.count > 0)) then
      _ctx.count = (-1 + _ctx.count)
   end
   if (_ctx.count > 0) then
      _ctx.gate = 1
   else
      _ctx.gate = 0
   end
   if (_ctx.count == 1) then
      _ctx.pitch = real(_ctx.n1)
   end
   if (_ctx.count == 2) then
      _ctx.pitch = real(_ctx.n2)
   end
   if (_ctx.count == 3) then
      _ctx.pitch = real(_ctx.n3)
   end
   if (_ctx.count == 4) then
      _ctx.pitch = real(_ctx.n4)
   end
end

function Synth1_controlChange(_ctx, control, value, channel)
   if (control == 30) then
      _ctx.volume = (0.0078741 * value)
   end
   if (control == 31) then
      _ctx.detune = (0.0078741 * value)
   end
   if (control == 32) then
      _ctx.lfo_rate = (0.0078741 * value)
   end
   if (control == 33) then
      _ctx.lfo_amt = (2. * (-0.5 + (0.0078741 * value)))
   end
end

function Synth1_default(_ctx)
   _ctx.volume = 1.
   _ctx.pitch = 45.
   _ctx.detune = 0.8
   _ctx.lfo_rate = 0.0700001
   _ctx.lfo_amt = -0.8
end

