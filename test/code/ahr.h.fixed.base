/* This code was generated by the Vult compiler v1-dev https://github.com/modlfo/vult */
#ifndef AHR_H
#define AHR_H

#include "vultin.h"
#include "ahr.tables.h"

typedef struct Util_edge_type {
   bool pre;
} Util_edge_type;

typedef struct Util_change_type {
   fix16_t pre_x;
} Util_change_type;

typedef struct Util_dcblock_type {
   fix16_t x1;
   fix16_t y1;
} Util_dcblock_type;

typedef struct Util_smooth_type {
   fix16_t x;
} Util_smooth_type;

typedef struct Util_average2_type {
   fix16_t x0;
} Util_average2_type;

typedef struct Ahr_do_type {
   fix16_t Ahr_do_ret_0;
   fix16_t Ahr_do_ret_1;
   fix16_t hold_phase;
   Util_edge_type inst_104d8;
   Util_edge_type inst_204d8;
   fix16_t out;
   fix16_t rate;
   int32_t state;
   fix16_t target;
} Ahr_do_type;

typedef struct Ahr_process_type {
   fix16_t Ahr_process_ret_0;
   fix16_t Ahr_process_ret_1;
   Ahr_do_type inst_1d84b;
   fix16_t knob1;
   fix16_t knob2;
   fix16_t knob3;
} Ahr_process_type;

typedef struct Ahr_process_type Ahr_noteOn_type;

typedef struct Ahr_process_type Ahr_noteOff_type;

typedef struct Ahr_process_type Ahr_controlChange_type;

typedef struct Ahr_process_type Ahr_default_type;

static_inline void Util_edge_type_init(Util_edge_type& _ctx) {
   _ctx.pre = false;
}

static_inline void Util_change_type_init(Util_change_type& _ctx) {
   _ctx.pre_x = 0x0 /* 0.000000 */;
}

static_inline void Util_dcblock_type_init(Util_dcblock_type& _ctx) {
   _ctx.x1 = 0x0 /* 0.000000 */;
   _ctx.y1 = 0x0 /* 0.000000 */;
}

static_inline void Util_smooth_type_init(Util_smooth_type& _ctx) {
   _ctx.x = 0x0 /* 0.000000 */;
}

static_inline void Util_average2_type_init(Util_average2_type& _ctx) {
   _ctx.x0 = 0x0 /* 0.000000 */;
}

void Ahr_do_type_init(Ahr_do_type& _ctx);

void Ahr_process_type_init(Ahr_process_type& _ctx);

static_inline void Ahr_noteOn_type_init(Ahr_noteOn_type& _ctx) {
   Ahr_process_type_init(_ctx);
}

static_inline void Ahr_noteOff_type_init(Ahr_noteOff_type& _ctx) {
   Ahr_process_type_init(_ctx);
}

static_inline void Ahr_controlChange_type_init(Ahr_controlChange_type& _ctx) {
   Ahr_process_type_init(_ctx);
}

static_inline void Ahr_default_type_init(Ahr_default_type& _ctx) {
   Ahr_process_type_init(_ctx);
}

static_inline bool Util_edge(Util_edge_type& _ctx, bool x) {
   bool ret = (x && (_ctx.pre == false));
   _ctx.pre = x;
   return ret;
}

static_inline bool Util_change(Util_change_type& _ctx, fix16_t x) {
   bool v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

static_inline fix16_t Util_map(fix16_t x, fix16_t x0, fix16_t x1, fix16_t y0, fix16_t y1) {
   return (y0 + fix_div(fix_mul((x + (- x0)), (y1 + (- y0))), (x1 + (- x0))));
}

static_inline fix16_t Util_dcblock(Util_dcblock_type& _ctx, fix16_t x0) {
   fix16_t y0 = (x0 + ((- _ctx.x1) + fix_mul(0xfeb8 /* 0.995000 */, _ctx.y1)));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

static_inline fix16_t Util_smooth(Util_smooth_type& _ctx, fix16_t input) {
   _ctx.x = (fix_mul(0x147 /* 0.005000 */, (input + (- _ctx.x))) + _ctx.x);
   return _ctx.x;
}

static_inline fix16_t Util_average2(Util_average2_type& _ctx, fix16_t x1) {
   fix16_t result = fix_mul(0x8000 /* 0.500000 */, (x1 + _ctx.x0));
   _ctx.x0 = x1;
   return result;
}

static_inline fix16_t Util_cubic_clipper(fix16_t x) {
   if (x <= -0xaaaa /* -0.666667 */) {
      return -0xaaaa /* -0.666667 */;
   }
   else {
      if (x >= 0xaaaa /* 0.666667 */) {
         return 0xaaaa /* 0.666667 */;
      }
      else {
         return (x + fix_mul(-0x5555 /* -0.333333 */, fix_mul(x, fix_mul(x, x))));
      }
   }
}

static_inline fix16_t Util_pitchToRate_1024_raw_c0(int32_t index) {
   return Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024_raw_c1(int32_t index) {
   return Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024_raw_c2(int32_t index) {
   return Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_1024(fix16_t pitch) {
   int32_t index = int_clip(fix_to_int(fix_mul(pitch, 15996)), 0, 31);
   return (Util_pitchToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(pitch, (Util_pitchToRate_1024_c1[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_1024_c2[static_cast<uint32_t>(index)], pitch))));
}

static_inline fix16_t Util_pitchToRate_raw_c0(int32_t index) {
   return Util_pitchToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_raw_c1(int32_t index) {
   return Util_pitchToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate_raw_c2(int32_t index) {
   return Util_pitchToRate_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_pitchToRate(fix16_t pitch) {
   int32_t index = int_clip(fix_to_int(fix_mul(pitch, 15996)), 0, 31);
   return (Util_pitchToRate_c0[static_cast<uint32_t>(index)] + fix_mul(pitch, (Util_pitchToRate_c1[static_cast<uint32_t>(index)] + fix_mul(Util_pitchToRate_c2[static_cast<uint32_t>(index)], pitch))));
}

static_inline fix16_t Util_cvToPitch(fix16_t cv) {
   return (0x180000 /* 24.000000 */ + fix_mul(0x780000 /* 120.000000 */, cv));
}

static_inline fix16_t Util_cvToRate_1024_raw_c0(int32_t index) {
   return Util_cvToRate_1024_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024_raw_c1(int32_t index) {
   return Util_cvToRate_1024_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024_raw_c2(int32_t index) {
   return Util_cvToRate_1024_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_1024(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 2257351)), 0, 31);
   return (Util_cvToRate_1024_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToRate_1024_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_1024_c2[static_cast<uint32_t>(index)], cv))));
}

static_inline fix16_t Util_cvToRate_raw_c0(int32_t index) {
   return Util_cvToRate_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_raw_c1(int32_t index) {
   return Util_cvToRate_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate_raw_c2(int32_t index) {
   return Util_cvToRate_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToRate(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 9247857)), 0, 127);
   return (Util_cvToRate_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToRate_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToRate_c2[static_cast<uint32_t>(index)], cv))));
}

static_inline fix16_t Util_pitchToCv(fix16_t pitch) {
   return (-0x3333 /* -0.200000 */ + fix_mul(0x222 /* 0.008333 */, pitch));
}

static_inline fix16_t Util_cvToperiod_raw_c0(int32_t index) {
   return Util_cvToperiod_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod_raw_c1(int32_t index) {
   return Util_cvToperiod_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod_raw_c2(int32_t index) {
   return Util_cvToperiod_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvToperiod(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 2031616)), 0, 31);
   return (Util_cvToperiod_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvToperiod_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvToperiod_c2[static_cast<uint32_t>(index)], cv))));
}

static_inline fix16_t Util_cvTokHz_raw_c0(int32_t index) {
   return Util_cvTokHz_c0[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz_raw_c1(int32_t index) {
   return Util_cvTokHz_c1[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz_raw_c2(int32_t index) {
   return Util_cvTokHz_c2[static_cast<uint32_t>(index)];
}

static_inline fix16_t Util_cvTokHz(fix16_t cv) {
   int32_t index = int_clip(fix_to_int(fix_mul(cv, 2031616)), 0, 31);
   return (Util_cvTokHz_c0[static_cast<uint32_t>(index)] + fix_mul(cv, (Util_cvTokHz_c1[static_cast<uint32_t>(index)] + fix_mul(Util_cvTokHz_c2[static_cast<uint32_t>(index)], cv))));
}

void Ahr_do(Ahr_do_type& _ctx, fix16_t gate, fix16_t a, fix16_t h, fix16_t r);

void Ahr_process(Ahr_process_type& _ctx, fix16_t gate);

static_inline void Ahr_noteOn(Ahr_process_type& _ctx, int32_t note, int32_t velocity, int32_t channel) {
}

static_inline void Ahr_noteOff(Ahr_process_type& _ctx, int32_t note, int32_t channel) {
}

void Ahr_controlChange(Ahr_process_type& _ctx, int32_t control, int32_t value, int32_t channel);

static_inline void Ahr_default(Ahr_process_type& _ctx) {
   _ctx.knob1 = 0x0 /* 0.000000 */;
   _ctx.knob2 = 0x8000 /* 0.500000 */;
   _ctx.knob3 = 0x8000 /* 0.500000 */;
}


#endif // AHR_H
