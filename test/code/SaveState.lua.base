
function ifExpressionValue(cond,then_,else_) if cond then return then_ else return else_ end end
function ifExpression(cond,then_,else_) if cond then return then_() else return else_() end end
function eps()              return 1e-18 end
function pi()               return 3.1415926535897932384 end
function random()           return math.random() end
function irandom()          return math.floor(math.random() * 4294967296) end
function clip(x,low,high)   if x > high then return high else if x < low then return low else return x end end end
function real(x)            return x end
function int(x)             local int_part,_ = math.modf(x) return int_part end
function sin(x)             return math.sin(x) end
function cos(x)             return math.cos(x) end
function abs(x)             return math.abs(x) end
function exp(x)             return math.exp(x) end
function floor(x)           return math.floor(x) end
function tan(x)             return math.tan(x) end
function tanh(x)            return math.tanh(x) end
function sqrt(x)            return x end
function set(a, i, v)       a[i+1]=v end
function get(a, i)          return a[i+1] end
function intDiv(a, b)       return math.floor(a / b) end

function SaveState_counter_type_alloc()
   local _ctx = {};
   _ctx.count = 0
   return _ctx
end

function SaveState_reset_type_alloc(_ctx)
   return SaveState_counter_type_alloc()
end

function SaveState_nosave_type_alloc()
   local _ctx = {};
   _ctx.x = 0
   return _ctx
end

function SaveState_point_alloc()
   local _ctx = {};
   _ctx.x = 0.
   _ctx.y = 0.
   return _ctx
end

function SaveState_main_type_alloc()
   local _ctx = {};
   _ctx.c1 = SaveState_counter_type_alloc()
   _ctx.inst_19fb0 = SaveState_counter_type_alloc()
   _ctx.inst_21bb0 = SaveState_nosave_type_alloc()
   _ctx.p1 = SaveState_point_alloc()
   _ctx.p2 = SaveState_point_alloc()
   local i_0 = 0
   local temp
   while (i_0 < 3) do
      do
         temp[i_0 + 1] = SaveState_point_alloc()
         i_0 = (1 + i_0)
      end
   end
   _ctx.point_array = temp
   _ctx.str = ""
   _ctx.x = 0.
   return _ctx
end

function SaveState_counter_type_serialize_data(buffer, index, _ctx)
   local start = index
   index = push_block_header(buffer, index)
   index = push_int(buffer, index, _ctx.count)
   update_size(buffer, start, (index + (-start)))
   return index
end

function SaveState_reset_type_serialize_data(buffer, index, _ctx)
   return SaveState_counter_type_serialize_data(buffer, index, _ctx)
end

function SaveState_point_serialize_data(buffer, index, _ctx)
   local start = index
   index = push_block_header(buffer, index)
   index = push_float(buffer, index, _ctx.x)
   index = push_float(buffer, index, _ctx.y)
   update_size(buffer, start, (index + (-start)))
   return index
end

function SaveState_main_type_serialize_data(buffer, index, _ctx)
   local start = index
   index = push_block_header(buffer, index)
   index = SaveState_counter_type_serialize_data(buffer, index, _ctx.c1)
   index = SaveState_counter_type_serialize_data(buffer, index, _ctx.inst_19fb0)
   index = SaveState_point_serialize_data(buffer, index, _ctx.p1)
   index = SaveState_point_serialize_data(buffer, index, _ctx.p2)
   local start_0 = index
   index = push_array(buffer, index, 3)
   local i_0 = 0
   while (i_0 < 3) do
      do
         index = SaveState_point_serialize_data(buffer, index, _ctx.point_array[i_0 + 1])
         i_0 = (1 + i_0)
      end
   end
   update_size(buffer, start_0, (index + (-start_0)))
   index = push_string(buffer, index, _ctx.str)
   index = push_float(buffer, index, _ctx.x)
   update_size(buffer, start, (index + (-start)))
   return index
end

function SaveState_counter_type_serialize_type_descr(buffer, index, marks)
   if marks[0 + 1] then
      return index
   end
   marks[0 + 1] = true
   local _array_0 = {"count"}
   return serialize_type_descr(buffer, index, "SaveState_counter_type", _array_0)
end

function SaveState_point_serialize_type_descr(buffer, index, marks)
   if marks[2 + 1] then
      return index
   end
   marks[2 + 1] = true
   local _array_0 = {"x", "y"}
   return serialize_type_descr(buffer, index, "SaveState_point", _array_0)
end

function SaveState_main_type_serialize_type_descr(buffer, index, marks)
   if marks[1 + 1] then
      return index
   end
   marks[1 + 1] = true
   index = SaveState_counter_type_serialize_type_descr(buffer, index, marks)
   index = SaveState_point_serialize_type_descr(buffer, index, marks)
   local _array_0 = {"c1", "inst_19fb0", "p1", "p2", "point_array", "str", "x"}
   return serialize_type_descr(buffer, index, "SaveState_main_type", _array_0)
end

function SaveState_counter_type_deserialize_data(buffer, type_descr, index, _ctx)
   local field_index = search_field_name(buffer, type_descr, index, "count")
   if (field_index >= 0) then
      _ctx.count = deserialize_int(buffer, field_index)
   end
end

function SaveState_point_deserialize_data(buffer, type_descr, index, _ctx)
   local field_index = search_field_name(buffer, type_descr, index, "x")
   if (field_index >= 0) then
      _ctx.x = deserialize_float(buffer, field_index)
   end
   field_index = search_field_name(buffer, type_descr, index, "y")
   if (field_index >= 0) then
      _ctx.y = deserialize_float(buffer, field_index)
   end
end

function SaveState_main_type_deserialize_data(buffer, type_descr, index, _ctx)
   local field_index = search_field_name(buffer, type_descr, index, "c1")
   if (field_index >= 0) then
      do
         local field_descr_0 = search_type_description(buffer, "SaveState_counter_type")
         SaveState_counter_type_deserialize_data(buffer, field_descr_0, field_index, _ctx.c1)
      end
   end
   field_index = search_field_name(buffer, type_descr, index, "inst_19fb0")
   if (field_index >= 0) then
      do
         local field_descr_1 = search_type_description(buffer, "SaveState_counter_type")
         SaveState_counter_type_deserialize_data(buffer, field_descr_1, field_index, _ctx.inst_19fb0)
      end
   end
   field_index = search_field_name(buffer, type_descr, index, "p1")
   if (field_index >= 0) then
      do
         local field_descr_2 = search_type_description(buffer, "SaveState_point")
         SaveState_point_deserialize_data(buffer, field_descr_2, field_index, _ctx.p1)
      end
   end
   field_index = search_field_name(buffer, type_descr, index, "p2")
   if (field_index >= 0) then
      do
         local field_descr_3 = search_type_description(buffer, "SaveState_point")
         SaveState_point_deserialize_data(buffer, field_descr_3, field_index, _ctx.p2)
      end
   end
   local field_descr_4 = search_type_description(buffer, "SaveState_point")
   field_index = search_field_name(buffer, type_descr, index, "point_array")
   if (field_index >= 0) then
      do
         local i_5 = 0
         while (i_5 < 3) do
            do
               SaveState_point_deserialize_data(buffer, field_descr_4, field_index, _ctx.point_array[i_5 + 1])
               i_5 = (1 + i_5)
            end
         end
      end
   end
   field_index = search_field_name(buffer, type_descr, index, "str")
   if (field_index >= 0) then
      _ctx.str = deserialize_string(buffer, field_index)
   end
   field_index = search_field_name(buffer, type_descr, index, "x")
   if (field_index >= 0) then
      _ctx.x = deserialize_float(buffer, field_index)
   end
end

function SaveState_counter(_ctx)
   _ctx.count = (1 + _ctx.count)
   return _ctx.count
end

function SaveState_reset(_ctx)
   _ctx.count = 0
end

function SaveState_nosave(_ctx)
   _ctx.x = 0
end

function SaveState_main(_ctx)
   _ctx.x = 0.
   _ctx.str = ""
   local count1 = SaveState_counter(_ctx.c1)
   local count2 = SaveState_counter(_ctx.inst_19fb0)
   SaveState_nosave(_ctx.inst_21bb0)
end

