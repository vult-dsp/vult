/*
The MIT License (MIT)

Copyright (c) 2014-2024 Leonardo Laguna Ruiz
-----
Diode ladder filter
*/

fun tune(cut) @[table(min = 0.0, max = 1.0, size = 128)]{
   val f = Util.cvTokHz(cut);
   f = clip(f, 0.0, 20.0);
   val fh = (2.0 * pi()) * f / (4.0 * 44.1);
   return fh;
}

fun heun(input, fh, res) {
   mem p0, p1, p2, p3;

   val wt0 = Util.cubic_clipper(input - 4.0 * res * p3);
   val wt1 = Util.cubic_clipper(p0);
   val dpt0 = (wt0 - wt1) * fh;
   val wt3 = Util.cubic_clipper(p1);
   val dpt1 = (wt1 - wt3) * fh;
   val wt5 = Util.cubic_clipper(p2);
   val dpt2 = (wt3 - wt5) * fh;
   val wt7 = Util.cubic_clipper(p3);
   val dpt3 = (wt5 - wt7) * fh;

   val pt0 = p0 + dpt0;
   val pt1 = p1 + dpt1;
   val pt2 = p2 + dpt2;
   val pt3 = p3 + dpt3;

   val w0 = Util.cubic_clipper(input - 4.0 * res * pt3);
   val w1 = Util.cubic_clipper(pt0);
   val dp0 = (w0 - w1) * fh;
   val w3 = Util.cubic_clipper(pt1);
   val dp1 = (w1 - w3) * fh;
   val w5 = Util.cubic_clipper(pt2);
   val dp2 = (w3 - w5) * fh;
   val w7 = Util.cubic_clipper(pt3);
   val dp3 = (w5 - w7) * fh;

   p0 = p0 + (dp0 + dpt0)/ 2.0;
   p1 = p1 + (dp1 + dpt1)/ 2.0;
   p2 = p2 + (dp2 + dpt2)/ 2.0;
   p3 = p3 + (dp3 + dpt3)/ 2.0;

   return p3;
}

fun euler(input, fh, res) {
   mem p0, p1, p2, p3;
   val w0 = Util.cubic_clipper(input - 4.0 * res * p3);
   val w1 = Util.cubic_clipper(p0);
   val dpt0 = (w0 - w1) * fh;
   val w3 = Util.cubic_clipper(p1);
   val dpt1 = (w1 - w3) * fh;
   val w5 = Util.cubic_clipper(p2);
   val dpt2 = (w3 - w5) * fh;
   val w7 = Util.cubic_clipper(p3);
   val dpt3 = (w5 - w7) * fh;
   p0 = p0 + dpt0;
   p1 = p1 + dpt1;
   p2 = p2 + dpt2;
   p3 = p3 + dpt3;
   return p3;
}

fun process_euler(input:real, cut:real, res:real):real{
   mem fh;
   if(Util.change(cut)) {
      fh = tune(cut);
   }
    _ = e:euler(input, fh, res);
    _ = e:euler(input, fh, res);
    _ = e:euler(input, fh, res);
    val out = e:euler(input, fh, res);
    return out;
}

fun process_heun(input:real, cut:real, res:real):real{
   mem fh;
   if(Util.change(cut)) {
      fh = tune(cut);
   }
    _ = h:heun(input, fh, res);
    _ = h:heun(input, fh, res);
    _ = h:heun(input, fh, res);
    val out = h:heun(input, fh, res);
    return out;
}

fun process(input:real, cut:real, res:real):real{
    return process_heun(input, cut, res);
}

and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }