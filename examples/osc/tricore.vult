/*
The MIT License (MIT)

Copyright (c) 2014-2024 Leonardo Laguna Ruiz
-----
Triangle oscillator with reset
*/

fun process(cv:real, reset:real, disable:real) : real {
   mem rate;
   mem reset_state;
   mem phase, reset_phase;
   mem direction;
   val out = 0.0;
   // Calculate the rate only when the cv changes
   if(Util.change(cv)) {
      rate = 4.0 * Util.cvToRate_1024(cv);
   }
   // Determine the next value
   val new_phase = phase + if direction then rate else -rate;

   val bdisable = disable > 0.5;

   // if reset or disable were triggered, then enter reset state
   if(Util.edge(reset > 0.0) || Util.edge(bdisable)) {
      // this is gonna be the initial value from which the oscillator starts resetting
      reset_phase = phase;
      // enter the reset state
      reset_state = true;
      new_phase = 0.0;
   }

   // wrap the phase in both directions
   if(new_phase > 1024.0) {
      new_phase = 1024.0 - (new_phase - 1024.0);
      direction = false;
   }
   else if(new_phase < -1024.0) {
      direction = true;
      new_phase = -1024.0 + (new_phase + 1024.0);
   }
   // update the phase, if disabled just make it zero
   phase = if bdisable then 0.0 else new_phase;

   if(reset_state) {
      // exponentially reduce the value until, if it's reseted and not dissable
      // when the value is very small goes out of reset state
      if(abs(reset_phase) > 10.0 || bdisable) {
         // dissable produces a softer transition
         val reset_speed = if bdisable then 0.01 else 0.5;
         reset_phase = reset_phase - reset_phase * reset_speed;
      }
      else {
         reset_phase = if reset_phase > 10.0 then reset_phase else 0.0;
         reset_state = false;
         direction = true;
      }
      out = reset_phase;
   }
   // the output is the sum of the ideal saw wave and the reset transition
   out = out + phase;
   return out / 1024.0;
}
and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default() @[init] {
   rate = Util.cvToRate_1024(0.0);
}