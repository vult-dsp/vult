/*
The MIT License (MIT)

Copyright (c) 2014-2024 Leonardo Laguna Ruiz
-----
Multioscillator using BLIT synthesis
*/

// Generates a BW-limited pulse train given the phase and the number of harmonics
fun pulse_train(cv, phase){
   mem m, scale;
   if(Util.change(cv)){
      m = 2 * int(Util.cvToperiod(cv)) + 1;
      scale = 2.0 * Util.cvToperiod(cv);
   }
   val pi_phase = phase / 2.0;
   val denominator = Tables.nsine(pi_phase);
   val out = 0.;
   if(denominator <= eps()) {
      out = 1.;
   }
   else {
      val m_phase = (real(m) * pi_phase) % 1.0;
      val numerator = Tables.nsine(m_phase);
      out =  numerator / (scale * denominator);
   }
   return out;
}
and pulse_start() @[init] {
   m = 2 * int(Util.cvToperiod(0.0)) + 1;
   scale = 2.0 * Util.cvToperiod(0.0) + 1.0;
}

// Generates BW-limited waveforms using the blit algorithm.
// It can generate PWM puses, saws and triangles.
fun osc_blit(cv,pw,wave:real){
  mem rate;
  mem state_pulse;
  mem state_saw;
  mem output;

  val fixed_cv = 0.;
  if(wave < 1.) {
    fixed_cv = cv;
  }
  else
  {
    fixed_cv = cv - 0.1;
  }
  // Updates the parameters if the cv changed
  if(Util.change(fixed_cv)) {
    rate = Util.cvToRate(fixed_cv);
  }
  val phase = Phase.process(fixed_cv, 0.0);
  // Generates a shifted version of the phase
  val shift05 = 0.5 + pw * 0.49;
  val shift = phase + shift05;
  if(shift > 1.) {
    shift = shift - 1.;
  }
  // Generates the first pulse train
  val pulse1 = pulse_train(fixed_cv, phase);
  // Generates the second pulse train
  val pulse2 = pulse_train(fixed_cv, shift);

  // Calculates the waveforms based on the pulse trains
  state_pulse  = state_pulse  * 0.9995 + pulse1 - pulse2;
  state_saw    = state_saw    * 0.9995 + (pulse1 + pulse2  - 2. * rate)/shift05/2.;

  // Select the wave to output
  if(wave < 1.) {
    output = state_pulse;
  }
  else {
    output = 2. * state_saw;
  }

  output = Util.dcblock(output);
  return output;
}
and init()@[init]{
  rate = Util.cvToRate(0.0);
}

fun process(cv, pw, wave) {
   return osc_blit(cv, pw, wave);
}
and noteOn(note:int,velocity:int,channel:int){ }
and noteOff(note:int,channel:int){ }
and controlChange(control:int,value:int,channel:int){ }
and default(){ }