
// Used to soften the transitions of controls
fun smooth(input:real) : real {
  mem x;
  x = x + (input-x) * 0.1;
  return x;
}

// Returns true if the value changes from 0 to anything
fun edge(x:bool):bool {
    mem pre_x;
    val v:bool = (pre_x<>x) && (pre_x==false);
    pre_x = x;
    return v;
}

// Returns true every time the input value changes
fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x<>x;
    pre_x = x;
    return v;
}

// Converts the MIDI note to increment rate at a 44100 sample rate
fun pitchToRate(d) return 8.1758*exp(0.0577623*d)/44100.0;

fun phasor(pitch:real,reset:bool){
    mem rate,phase;
    if(change(pitch))
        rate = pitchToRate(pitch);
    phase = if reset then 0.0 else (phase + rate) % 1.0;
    return phase;
}
and phasorInit() @[init] {
   mem rate = pitchToRate(64.0);
}

fun sineWave(pitch:real,reset) : real {
   mem buffer : array(real,128);
   val phase = phasor(pitch,reset);
   // Gets the position in the buffer to read
   val index_r  = real(size(buffer)) * phase;
   val index_i  = int(floor(index_r));

   // Gets the decimal part of the position
   val decimal  = index_r - real(index_i);
   // Reads the values in the buffer
   val x1 = buffer[index_i];
   val x2 = buffer[(index_i+1) % size(buffer)];
   // Interpolates the value
   val ret = (x2-x1)*decimal + x1;
   return ret;
}
and sineInit() @[init] {
   mem buffer;
   val i = 0;
   while(i<size(buffer)){
      val w = 2.0 * 3.1415 * real(i)/(real(size(buffer)));
      val x = sin(w);
      buffer[i] = x;
      i = i + 1;
   }
}

fun slide(gate:real,rate:real) : real {
   mem x;
   if(edge(gate>0.0)) x = 1.0;
   val speed = 0.0002 * rate;
   x = if x < 0.001 then 0.0 else x-x*speed;
   return x;
}

fun env(input:real,decay) : real {
   mem x;
   if(input>0.0)
      x = x+(input-x)*0.01;
    else{
      x = x - x * 0.0005 * decay;
      x = if x<0.001 then 0.0 else x;
    }
   return x;
}

fun drum(gate:real,pitch:real,stretch:real,time:real,decay:real){
   val actual = (1.0 - env(gate,decay)) * 48.0;
   return env(gate,decay) * sineWave(pitch-actual,edge(gate>0.0));
}

fun lfo(f,gate){
    mem phase;
    val rate = f * 10.0/44100.0;
    if(edge(gate)) phase = 0.0;
    phase = phase + rate;
    if(phase>1.0) phase = phase-1.0;
    return sin(phase*2.0*3.141592653589793)-0.5;
}

// Calculates one step of the oversampled state-variable filter
fun svf_step(input:real,g:real,q:real,sel:int) : real {
   mem dlow, dband;
   val low = dlow + g * dband;
   val high = input - low - q*dband;
   val band = g * high + dband;
   val notch = high + low;

   dband = clip(band,-1.,1.);
   dlow  = clip(low,-1.,1.);
   val output =
      if sel == 0 then low else
      if sel == 1 then high else
      if sel == 2 then band else
      notch;
   return output;
}

// Main function for the state-variable filter with 2x of oversampling
fun svf(input,fc,q,sel){
   mem g;
   fc = clip(fc, 0., 1.);
   q  = clip(q, 0., 1.);
   val fix_q = 2. * (1. - q);

   if(change(fc)){
      g = fc/2.;
   }

   // In Vult oversamplig in very easy!
   val x1 = step:svf_step(input,g,fix_q,sel);
   val x2 = step:svf_step(input,g,fix_q,sel);

   return (x1+x2)/2.;
}

fun delay(x:real, time:real, feedback:real) : real {
   mem buffer : array(real,44100);
   mem write_pos;
   // Constraints the parameter values
   time     = clip(time,0.0,1.0);
   feedback = clip(feedback,0.0,1.0);
   // Gets the position in the buffer to read
   val index_r  = real(size(buffer)) * time;
   val index_i  = int(floor(index_r));
   val delta    = write_pos - index_i;
   val read_pos = if delta < 0 then size(buffer)+delta else delta;
   // Gets the decimal part of the position
   val decimal  = index_r - real(index_i);
   // Reads the values in the buffer
   val x1 = buffer[read_pos];
   val x2 = buffer[(read_pos+1) % size(buffer)];
   // Interpolates the value
   val ret = (x2-x1)*decimal + x1;
   // Write the data to the buffer
   write_pos = (write_pos+1) % size(buffer);
   buffer[write_pos] = clip(x+feedback*ret,-1.0,1.0);
   return ret;
}

fun dcblock(x0:real) : real {
  mem x1,y1;
  val y0 = x0-x1+y1*0.995;
  x1,y1 = x0,y0;
  return y0;
}

fun voice1(pitch:real,detune:real,gate:real){
   mem pre_phase1;
   val phase1 = phasor(pitch,false);
   val comp   = 1.0 - phase1;
   val reset  = (pre_phase1 - phase1) > 0.5;
   pre_phase1 = phase1;
   val phase2 = phasor(pitch+smooth(detune)*32.0,reset);
   val sine  = sin(2.0*3.14159265359*phase2);
   return (sine*comp)*env(gate,0.7);
}


fun voice2(pitch:real,f:real,res:real,time:real,feed:real,gate:real){
   val o = svf(dcblock(phasor(pitch+12.0,false)),f,res,0);
   val oo = o * env(gate,0.2);
   return (oo+delay(oo,time,feed))/2.0;
}

// Main processing function
fun process(input:real){
   mem drum_gate,drum_pitch;
   mem voice1_gate,voice1_pitch,voice1_detune;
   mem voice2_gate,voice2_pitch,voice2_f,voice2_res;
   mem time,feed;

   val drum = drum(drum_gate, drum_pitch, 0.1, 0.8, 0.1);
   val voice1_out = voice1(voice1_pitch,voice1_detune,voice1_gate);
   val voice2_out = voice2(voice2_pitch,voice2_f,voice2_res,time,feed,voice2_gate);

   return (voice1_out+drum+voice2_out*0.5)/3.0;
}

// Called when a note On is received
and noteOn(note:int,velocity:int,channel:int){
  if(note==12)
    drum_gate = 1.0;
  if(note>=32 && note<=47) {
    voice1_gate = 1.0;
    voice1_pitch = real(note);
  }
  if(note>=48 && note<=63) {
    voice2_gate = 1.0;
    voice2_pitch = real(note);
  }
}

// Called when a note Off is received
and noteOff(note:int,channel:int){
   if(note==12)
      drum_gate = 0.0;
   if(note>=32 && note<=47) {
      voice1_gate = 0.0;
   }
   if(note>=48 && note<=63) {
      voice2_gate = 0.0;
   }
}

// Called when a control changes
and controlChange(control:int,value:int,channel:int){
  if(control==30) drum_pitch = 42.0 + 24.0 * real(value)/127.0;
  if(control==31) voice1_detune = real(value)/127.0;
  if(control==32) voice2_f = real(value)/127.0;
  if(control==33) voice2_res = real(value)/127.0;
  if(control==34) time = real(value)/127.0;
  if(control==35) feed = real(value)/127.0;
}

// Called on initialization to define initial values
and default(){

}
