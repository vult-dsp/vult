let legend =
  let version = Core.Version.version in
  [%pla {|/* This code was generated by the Vult compiler <#version#s> https://github.com/vult-dsp/vult */|}]


let setExt ext output =
  match output with
  | None -> "output" ^ ext
  | Some file -> file ^ ext


let splitArray into elems =
  let rec loop current acc count elems =
    match elems with
    | [] -> List.rev (List.rev current :: acc)
    | h :: t when count < into -> loop (h :: current) acc (count + 1) t
    | h :: t -> loop [ h ] (List.rev current :: acc) 0 t
  in
  loop [] [] 0 elems


let cast ~(from : Code.type_) ~(to_ : Code.type_) (value : Pla.t) =
  match from, to_ with
  | Int, Real -> [%pla {|(float)<#value#>|}]
  | Int, Bool -> [%pla {|(bool)<#value#>|}]
  | Int, Fixed -> [%pla {|int_to_fix(<#value#>)|}]
  | Real, Int -> [%pla {|(int)<#value#>|}]
  | Real, Bool -> [%pla {|(<#value#> != 0.0f)|}]
  | Real, Fixed -> [%pla {|float_to_fix(<#value#>)|}]
  | Bool, Int -> [%pla {|(int)<#value#>|}]
  | Bool, Real -> [%pla {|(<#value#> ? 1.0f : 0.0f)|}]
  | Bool, Fixed -> [%pla {|(<#value#> ? int_to_fix(1) : int_to_fix(0))|}]
  | Fixed, Int -> [%pla {|fix_to_int(<#value#>)|}]
  | Fixed, Real -> [%pla {|fix_to_float(<#value#>)|}]
  | Fixed, Bool -> [%pla {|(<#value#> != 0)|}]
  (* no cast *)
  | Real, Real -> value
  | Int, Int -> value
  | Bool, Bool -> value
  | Fixed, Fixed -> value
  | _ -> failwith "Unknown cast"


let toFixed ?(comment = true) (n : float) : string =
  let () =
    if n > 32767.0 || n < -32768.0 then (
      let msg = Printf.sprintf "This value '%f' cannot be represented with fixed-point numbers" n in
      Util.Error.raiseErrorMsg msg)
  in
  if n < 0.0 then (
    let value = Int32.of_float (-.n *. float_of_int 0x10000) in
    if comment then Printf.sprintf "-0x%lx /* %f */" value n else Printf.sprintf "-0x%lx" value)
  else (
    let value = Int32.of_float (n *. float_of_int 0x10000) in
    if comment then
      Printf.sprintf "0x%lx /* %f */" value n
    else
      Printf.sprintf "0x%lx" value)


let splitByFile (stmts : Code.top_stmt list) =
  let getFile loc =
    match loc.Util.Loc.source with
    | Util.Loc.Text _ -> failwith ""
    | File file -> file |> Filename.basename |> Filename.chop_extension
  in
  let index = ref 0 in
  List.fold_left
    (fun map (stmt : Code.top_stmt) ->
      Util.Maps.Map.update
        (getFile stmt.loc)
        (fun found_opt ->
          match found_opt with
          | None ->
            incr index;
            Some (index, [ stmt ])
          | Some (index, stmts) -> Some (index, stmt :: stmts))
        map)
    Util.Maps.Map.empty
    stmts
  |> Util.Maps.Map.to_list
  |> List.sort (fun (_, (a, _)) (_, (b, _)) -> compare a b)
  |> List.map (fun (file, (_, stmts)) -> file, List.rev stmts)
