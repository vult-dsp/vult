<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Vult Language</title>
    <link>https://vult-dsp.github.io/vult/blog/</link>
    <description>Recent content in Blogs on Vult Language</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Aug 2017 21:07:02 +0300</lastBuildDate><atom:link href="https://vult-dsp.github.io/vult/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Performance Tips: the cost of allocation</title>
      <link>https://vult-dsp.github.io/vult/blog/performance-arrays/</link>
      <pubDate>Mon, 21 Aug 2017 21:07:02 +0300</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/performance-arrays/</guid>
      <description>&lt;p&gt;Looking at the performance results of algorithms using arrays I noticed something very drastic. LuaJIT was terribly slow compared to the other languages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Performance Tips: floating-point mod</title>
      <link>https://vult-dsp.github.io/vult/blog/performance-mod/</link>
      <pubDate>Sun, 20 Aug 2017 21:21:01 +0300</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/performance-mod/</guid>
      <description>&lt;p&gt;Recently I implemented in Vult a simpler way for me to measure the performance of the generated code. Running the command &lt;code&gt;$ make perf&lt;/code&gt; generates code for all languages and runs it for most of the examples.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating Web Audio code</title>
      <link>https://vult-dsp.github.io/vult/blog/webaudio-example/</link>
      <pubDate>Sat, 05 Aug 2017 13:05:50 +0300</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/webaudio-example/</guid>
      <description>&lt;p&gt;For a long time it has been possible to generate JavaScript code that runs in the browser (check the &lt;a href=&#34;http://vult-dsp.github.io/vult/demo/&#34;&gt;Vult demo&lt;/a&gt;). However the code was not very easy to integrate since it still needed some manual coding.&lt;/p&gt;
&lt;p&gt;Now Vult provides a new template for JavaScript that generates the code of a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode&#34;&gt;ScriptProcessorNode&lt;/a&gt; that can be easily added to a Web Audio project.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>New structure of the examples</title>
      <link>https://vult-dsp.github.io/vult/blog/new-examples/</link>
      <pubDate>Sat, 29 Jul 2017 14:08:43 +0300</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/new-examples/</guid>
      <description>&lt;p&gt;In the past, the examples folder of Vult contained just a few files that were developed in an early stage. Most of the &amp;lsquo;real&amp;rsquo; examples were developed in a separate &lt;a href=&#34;https://github.com/modlfo/vult-examples&#34;&gt;repository&lt;/a&gt;. In order to improve the testing of the Vult compiler the examples have been moved into the Vult repository.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Compile-time embedding of WAV files</title>
      <link>https://vult-dsp.github.io/vult/blog/embed-wav/</link>
      <pubDate>Tue, 20 Jun 2017 08:40:42 +0300</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/embed-wav/</guid>
      <description>&lt;p&gt;Around the 2000&amp;rsquo;s I got my first VST plugin; it was a PPG Wave. The sounds produced by this plugin got me intrigued because it sounded very different from other soft synths that I have heard. The main difference was that the PPG was based on wavetables. Since I started working on Vult, making a wavetable synthesizer has been in the list.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Compile-time creation of tables</title>
      <link>https://vult-dsp.github.io/vult/blog/tables/</link>
      <pubDate>Wed, 01 Feb 2017 22:04:23 +0100</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/tables/</guid>
      <description>&lt;script type=&#34;text/javascript&#34;
   src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;This is one of the features that has been in the TODO list since the creation of Vult. When generating code, now is possible to annotate a function and Vult will automatically create a table-based implementation which will be faster. This is specially useful when generating code for microcontrollers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automatic loading of Vult files</title>
      <link>https://vult-dsp.github.io/vult/blog/automatic-loading/</link>
      <pubDate>Thu, 01 Dec 2016 15:49:04 -0600</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/automatic-loading/</guid>
      <description>&lt;p&gt;Recently I implemented simpler way to call the Vult compiler with multiple files. Previously Vult required that you passed every file in a correct order. For example:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>New repository with more PureData examples</title>
      <link>https://vult-dsp.github.io/vult/blog/more-examples/</link>
      <pubDate>Tue, 01 Nov 2016 22:14:59 +0200</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/more-examples/</guid>
      <description>&lt;p&gt;A new repository with more Vult examples is available:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/modlfo/vult-examples&#34;&gt;https://github.com/modlfo/vult-examples&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating up-to-date binaries with CI</title>
      <link>https://vult-dsp.github.io/vult/blog/ci-integration/</link>
      <pubDate>Tue, 18 Oct 2016 22:56:13 +0300</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/ci-integration/</guid>
      <description>&lt;p&gt;I have been using Travis CI for running tests and checking that Vult build correctly. Travis CI can build Vult in OSX and Linux. However, due to the status of OCaml it was difficult to setup something similar in Windows with AppVeyor. Thankfully the OCaml community has published a set of script to configure different CI services:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Now Vult can be installed from npm</title>
      <link>https://vult-dsp.github.io/vult/blog/vult-in-npm/</link>
      <pubDate>Tue, 04 Oct 2016 19:22:30 +0300</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/vult-in-npm/</guid>
      <description>&lt;p&gt;In the last months I have been making many improvements to the Vult compiler. These improvements cannot be easily tried by the users due to the fact that for me creating binaries for all the platforms is very time consuming. Therefore, in order for the users to try the latests changes they need to compile Vult from the source code. Even though the process is well documented in the repository, this can be time consuming and difficult for people unfamiliar with the OCaml tools.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LuaJIT as backend for Vult</title>
      <link>https://vult-dsp.github.io/vult/blog/lua/</link>
      <pubDate>Thu, 08 Sep 2016 22:43:03 +0300</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/lua/</guid>
      <description>&lt;p&gt;I have been keeping an eye on LuaJIT (&lt;a href=&#34;http://luajit.org&#34;&gt;http://luajit.org&lt;/a&gt;) for some time. It&amp;rsquo;s a very interesting project and I have read very good things about it. Some time ago I made a small benchmark comparing an optimized algorithm written in C++11 against a lazy coded version in OCaml and LuaJIT. In case you are curious here are the results:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Generating Pure Data and Teensy Audio templates</title>
      <link>https://vult-dsp.github.io/vult/blog/pd-teensy/</link>
      <pubDate>Wed, 13 Jul 2016 20:10:57 +0200</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/pd-teensy/</guid>
      <description>&lt;p&gt;As part of the Vult project I have developed a new standalone library: Pla (&lt;a href=&#34;https://modlfo.github.io/pla/)&#34;&gt;https://modlfo.github.io/pla/)&lt;/a&gt;. Pla is a templating library that is used in Vult to generate code in a simpler way. Thanks to this library I have developed two templates to simplify using Vult:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>New site for Vult</title>
      <link>https://vult-dsp.github.io/vult/blog/new-site/</link>
      <pubDate>Tue, 12 Jul 2016 20:21:43 +0200</pubDate>
      
      <guid>https://vult-dsp.github.io/vult/blog/new-site/</guid>
      <description>&lt;p&gt;I have been working on giving a refresh of the Vult site. The result is what you see now. After trying a few alternatives I settle to use Hugo (&lt;a href=&#34;https://gohugo.io&#34;&gt;https://gohugo.io&lt;/a&gt;). The reason I used Hugo was because I could make it do exactly what I wanted with the help of the documentation.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
